
Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\StepController.php
find text   viewAssignment($id)
replace  viewAssignment function



    public function viewAssignment($id)
    {
        // $teammemberall = Teammember::where('role_id', '=', 15)->orwhere('role_id', '=', 14)->where('status', '=', 1)->with('title', 'role')->get();
        $teammemberall = Teammember::whereIn('role_id', [15, 14])
            ->where('status', 1)
            ->with('title', 'role')
            ->get();

        $assignmentid = Assignmentmapping::where('assignmentgenerate_id', $id)->select('assignment_id')->pluck('assignment_id')->first();
        // dd($assignmentgenerateid); 
        $assignmentcheck =
            DB::table('financialstatementclassifications')
            ->where('assignmentgenerate_id', $id)
            ->get();

        if ($assignmentcheck->isEmpty()) {
            $assignmentcheckDatas =
                DB::table('financialstatementclassifications')
                ->where('assignment_id', $assignmentid)
                ->where('assignmentgenerate_id', null)
                ->get();
            //dd($assignmentcheckDatas);
        } else {
            $assignmentcheckDatas =
                DB::table('financialstatementclassifications')
                ->where('assignment_id', $assignmentid)
                ->where('assignmentgenerate_id', null)
                ->orwhere('assignmentgenerate_id',  $id)
                ->get();
        }

        //  dd($assignmentcheckDatas);

        $assignmentbudgetingDatas = DB::table('assignmentbudgetings')
            ->join('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->join('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
            ->join('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
            ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
            ->where('assignmentbudgetings.assignmentgenerate_id', $id)
            ->select(
                'assignmentbudgetings.*',
                'assignmentmappings.*',
                'clients.client_name',
                'clients.client_code',
                'assignmentteammappings.type',
                'assignments.assignment_name'
            )->first();
        // dd($assignmentbudgetingDatas);
        // $teammemberDatas = DB::table('assignmentmappings')
        //     ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        //     ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
        //     ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
        //     ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        //     ->where('assignmentmappings.assignmentgenerate_id', $id)
        //     ->select('teammembers.*', 'roles.rolename', 'assignmentteammappings.type', 'titles.title', 'assignmentteammappings.id As assignmentteammappingsId', 'assignmentteammappings.status as assignmentteammappingsStatus', 'assignmentmappings.assignmentgenerate_id as assignmentgenerateid', 'assignmentteammappings.teamhour', 'assignmentmappings.leadpartner', 'assignmentteammappings.viewerteam')
        //     ->orderBy('assignmentteammappingsId', 'desc')
        //     ->get();

        $teammemberDatas = DB::table('assignmentmappings')
            ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
            ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
            ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
            ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->whereNotNull('assignmentteammappings.id')
            ->select('teammembers.*', 'roles.rolename', 'assignmentteammappings.type', 'titles.title', 'assignmentteammappings.id As assignmentteammappingsId', 'assignmentteammappings.status as assignmentteammappingsStatus', 'assignmentmappings.assignmentgenerate_id as assignmentgenerateid', 'assignmentteammappings.teamhour', 'assignmentmappings.leadpartner', 'assignmentteammappings.viewerteam')
            ->orderBy('assignmentteammappingsId', 'desc')
            ->get();


        // dd($teammemberDatas, 1);
        $contactDatas = DB::table('assignmentbudgetings')
            ->join('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->join('clientcontacts', 'clientcontacts.client_id', 'clients.id')
            ->where('assignmentbudgetings.assignmentgenerate_id', $id)
            ->select(
                'clientcontacts.*'
            )->get();
        $udinDatas = DB::table('assignmentbudgetingudins')
            ->join('teammembers', 'teammembers.id', 'assignmentbudgetingudins.created_by')
            ->join('roles', 'roles.id', 'teammembers.role_id')
            ->where('assignmentbudgetingudins.assignment_generate_id', $id)
            ->select('teammembers.*', 'assignmentbudgetingudins.udin', 'assignmentbudgetingudins.udindate', 'assignmentbudgetingudins.id as assignmentbudgetingudinsid', 'roles.rolename', 'assignmentbudgetingudins.partner', 'assignmentbudgetingudins.created_at as created')->get();
        // dd($contactDatas);

        $leadpartner = DB::table('assignmentmappings')
            ->join('teammembers as team', 'team.id', 'assignmentmappings.leadpartner')
            ->leftJoin('titles', 'titles.id', '=', 'team.title_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->select('team.id', 'team.team_member', 'team.staffcode',  'team.mobile_no', 'team.role_id', 'assignmentmappings.leadpartnerhour', 'titles.title')
            ->get();


        $otherpartner = DB::table('assignmentmappings')
            ->join('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->leftJoin('titles', 'titles.id', '=', 'team.title_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->select('team.id', 'team.team_member', 'team.staffcode', 'team.mobile_no', 'team.role_id', 'assignmentmappings.otherpartnerhour', 'titles.title',)
            ->get();

        $partner = $leadpartner->merge($otherpartner);

        return view('backEnd.viewassignment', compact('partner', 'udinDatas', 'contactDatas', 'teammemberDatas', 'assignmentcheckDatas', 'assignmentbudgetingDatas', 'teammemberall'));
    }





Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\form.blade.php

find text   <label class="font-weight-600">Name *</label>
replace  <div class="col-6"> tag



 <div class="col-6">
            <div class="form-group">
                <label class="font-weight-600">Name *</label>
                <input type="checkbox" data-toggle="tooltip" id="enablebox" style="margin-left: 10px;"
                    title="You want to submit without teammember, please click on check box">
                <select required class="language form-control enablefalse" id="key" name="teammember_id[]">
                    <option value="">Please Select One</option>
                    @foreach ($teammember as $teammemberData)
                        <option value="{{ $teammemberData->id }}" @if (!empty($store->financial) && $store->financial == $teammemberData->id) selected @endif>
                            {{ $teammemberData->team_member }} ( {{ $teammemberData->role->rolename }} ) (
                            {{ $teammemberData->staffcode }} )</option>
                    @endforeach
                </select>
            </div>
      </div>
	  
	 

Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\form.blade.php

find text   <<label class="font-weight-600">Type *</label>
replace  <div class="col-5">  tag


	 <div class="col-5">
            <div class="form-group">
                <label class="font-weight-600">Type *</label>
                <select required class="form-control key enablefalse" id="key" name="type[]">
                    <option value="">Please Select One</option>
                    <option value="0">Team Leader</option>
                    <option value="2">Staff</option>
                </select>
            </div>
        </div>





Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\form.blade.php
add this script end of this page




        <script>
            $(document).ready(function() {
                $('#enablebox').on('change', function() {
                    // This will disable the dropdown when the checkbox is checked and enable it when unchecked
                    $('.enablefalse').prop('disabled', this.checked);
                });
            });
        </script>





Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php
replace  store function 



    public function store(Request $request)
    {

        $request->validate([
            'client_id' => "required",
            'assignment_id' => "required",
            'teammember_id.*' => "required",
            'assignmentname' => "required",
            'type.*' => "required"
        ]);
        // Assignment budgeting start 
        $client_id = $request->input('client_id', null);
        $assignment_id = $request->input('assignment_id', null);
        $assignmentname = $request->input('assignmentname', null);

        if ($client_id != null && $assignment_id != null  && $assignmentname != null) {

            $data = $request->except(['_token', 'periodstart', 'periodend', 'roleassignment', 'esthours', 'stdcost', 'estcost', 'fees', 'leadpartner', 'otherpartner', 'teammember_id', 'type']);
            $data['created_by'] = auth()->user()->id;
            $clientcode = DB::table('clients')->where('id', $request->client_id)->first();
            $assignmentgenerateid = strtoupper(substr($clientcode->client_name, 0, 3));


            $assign = Assignmentbudgeting::latest()->get();

            if ($assign->isEmpty()) {
                $assignmentnumbers = '100001';
            } else {
                $assignmentgenerateall = DB::table('assignmentmappings')->pluck('assignmentgenerate_id')->toArray();

                function extractDigits($string)
                {
                    preg_match_all('/\d+/', $string, $matches);
                    return implode('', $matches[0]);
                }
                $assignmentNumbersDigits = array_map(function ($assignmentgenerate_id) {
                    return extractDigits($assignmentgenerate_id);
                }, $assignmentgenerateall);

                $minAssignmentNumber = 100001;
                $maxAssignmentNumber = 100529;

                $allPossibleAssignmentNumbers = range($minAssignmentNumber, $maxAssignmentNumber);
                $missingAssignmentNumbers = array_diff($allPossibleAssignmentNumbers, $assignmentNumbersDigits);
                unset($missingAssignmentNumbers[260]);


                // if (!empty($missingAssignmentNumbers)) {
                if (!empty($missingAssignmentNumbers)) {
                    $keys = array_keys($missingAssignmentNumbers);
                    $assignmentnumbers = $missingAssignmentNumbers[$keys[0]];
                } else {
                    // $assignmentnumb = Assignmentbudgeting::latest()->first()->assignmentnumber;
                    // dd($assignmentnumb);

                    $assignmentnumb = Assignmentbudgeting::max('assignmentnumber');

                    if ($assignmentnumb ==  null) {
                        $assignmentnumbers = '100001';
                    } else {
                        $assignmentnumbers = $assignmentnumb + 1;

                        $previouschck = DB::table('assignmentbudgetings')
                            ->where('assignmentnumber', $assignmentnumbers)
                            ->first();

                        if ($previouschck != null) {
                            $output = array('msg' => 'You already created assignment.');
                            return back()->with('success', $output);
                        }
                    }
                }
            }
            // dd($assignmentnumbers);
            $assignmentgenerate = $assignmentgenerateid . $assignmentnumbers;

            if (!empty($missingAssignmentNumbers)) {
                $previouschck = DB::table('assignmentmappings')
                    ->where('assignmentgenerate_id', $assignmentgenerate)
                    ->first();

                if ($previouschck != null) {
                    $output = array('msg' => 'You have already created assignment.');
                    return back()->with('success', $output);
                }
            }

            // Storage::disk('s3')->makeDirectory($assignmentgenerate);
            $data['assignmentgenerate_id'] = $assignmentgenerate;
            $data['assignmentnumber'] = $assignmentnumbers;



            DB::table('assignmentbudgetings')->insert([
                'client_id' => $data['client_id'],
                'assignment_id' => $data['assignment_id'],
                'assignmentname' => $data['assignmentname'],
                'duedate' => $data['duedate'],
                'created_by' => $data['created_by'],
                'assignmentgenerate_id' => $data['assignmentgenerate_id'],
                'assignmentnumber' => $data['assignmentnumber'],
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s')
            ]);
        }
        // Assignment budgeting end


        $assignment_name = Assignment::where('id', $request->assignment_id)->select('assignment_name')->pluck('assignment_name')->first();

        $request->except(['_token']);

        $id = DB::table('assignmentmappings')->insertGetId([
            'assignmentgenerate_id'         =>     $assignmentgenerate,
            'periodstart'         =>     $request->periodstart,
            'periodend'         =>     $request->periodend,
            'year'         =>     Carbon::parse($request->periodend)->year,
            'roleassignment'                =>      $request->roleassignment,
            'assignment_id'         =>     $request->assignment_id,
            'esthours'            =>       $request->esthours,
            'leadpartner'            =>       $request->leadpartner,
            'otherpartner'            =>       $request->otherpartner,
            'stdcost'            =>       $request->stdcost,
            'estcost'            =>       $request->estcost,
            'filecreationdate'                =>       date('y-m-d'),
            'modifieddate'              =>    date('y-m-d'),
            'auditcompletiondate'                =>       date('y-m-d'),
            'documentationdate'              =>    date('y-m-d'),
            'created_at'                =>       date('y-m-d'),
            'updated_at'              =>    date('y-m-d'),
        ]);



        if (!empty($request->teammember_id) && $request->teammember_id != '0') {
            $teammemberIds = $request->teammember_id;
            if (is_array($teammemberIds) && count($teammemberIds) > 0) {
                foreach ($teammemberIds as $index => $teammemberId) {
                    DB::table('assignmentteammappings')->insert([
                        'assignmentmapping_id' => $id,
                        'type'                 => $request->type[$index],
                        'teammember_id'        => $teammemberId,
                        'created_at'           => date('Y-m-d'),
                        'updated_at'           => date('Y-m-d'),
                    ]);
                }
            }

            $clientname = Client::where('id', $request->client_id)
                ->select('client_name', 'client_code')
                ->first();

            $teamemailpartner = DB::table('teammembers')
                ->where('id', $request->leadpartner)
                ->select('emailid', 'team_member', 'staffcode')
                ->first();

            $teamemailotherpartner = DB::table('teammembers')
                ->where('id', $request->otherpartner)
                ->select('emailid', 'team_member', 'staffcode')
                ->first();

            $teamleader = DB::table('assignmentteammappings')
                ->where('assignmentmapping_id', $id)
                ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
                ->select('teammembers.team_member', 'teammembers.staffcode')
                ->get();

            if (!empty($teammemberIds)) {
                $teamemails = DB::table('teammembers')
                    ->whereIn('id', $teammemberIds)
                    ->pluck('emailid');

                // Mail for employee
                foreach ($teamemails as $teammemberEmail) {
                    $data = [
                        'assignmentid'      => $assignmentgenerate,
                        'clientname'        => $clientname->client_name,
                        'clientcode'        => $clientname->client_code,
                        'assignmentname'    => $request->assignmentname,
                        'assignment_name'   => $assignment_name,
                        'emailid'           => $teammemberEmail,
                        'otherpatner'       => $teamemailotherpartner,
                        'assignmentpartner' => $teamemailpartner,
                        'teamleader'        => $teamleader,
                    ];

                    $this->sendAssignmentEmail($data);
                }
            }

            // Mail for leadpartner
            if (!empty($request->leadpartner)) {
                $data = [
                    'assignmentid'      => $assignmentgenerate,
                    'clientname'        => $clientname->client_name,
                    'clientcode'        => $clientname->client_code,
                    'assignmentname'    => $request->assignmentname,
                    'assignment_name'   => $assignment_name,
                    'emailid'           => $teamemailpartner->emailid,
                    'otherpatner'       => $teamemailotherpartner,
                    'assignmentpartner' => $teamemailpartner,
                    'teamleader'        => $teamleader,
                ];

                $this->sendAssignmentEmail($data);
            }

            // Mail for otherpartner
            if (!empty($request->otherpartner)) {
                $data = [
                    'assignmentid'      => $assignmentgenerate,
                    'clientname'        => $clientname->client_name,
                    'clientcode'        => $clientname->client_code,
                    'assignmentname'    => $request->assignmentname,
                    'assignment_name'   => $assignment_name,
                    'emailid'           => $teamemailotherpartner->emailid,
                    'otherpatner'       => $teamemailotherpartner,
                    'assignmentpartner' => $teamemailpartner,
                    'teamleader'        => $teamleader,
                ];

                $this->sendAssignmentEmail($data);
            }
        } else {
            $clientname = Client::where('id', $request->client_id)
                ->select('client_name', 'client_code')
                ->first();

            $teamemailpartner = DB::table('teammembers')
                ->where('id', $request->leadpartner)
                ->select('emailid', 'team_member', 'staffcode')
                ->first();

            $teamemailotherpartner = DB::table('teammembers')
                ->where('id', $request->otherpartner)
                ->select('emailid', 'team_member', 'staffcode')
                ->first();


            // Mail for leadpartner
            if (!empty($request->leadpartner)) {
                $data = [
                    'assignmentid'      => $assignmentgenerate,
                    'clientname'        => $clientname->client_name,
                    'clientcode'        => $clientname->client_code,
                    'assignmentname'    => $request->assignmentname,
                    'assignment_name'   => $assignment_name,
                    'emailid'           => $teamemailpartner->emailid,
                    'otherpatner'       => $teamemailotherpartner,
                    'assignmentpartner' => $teamemailpartner,
                ];

                $this->sendAssignmentEmail($data);
            }

            // Mail for otherpartner
            if (!empty($request->otherpartner)) {
                $data = [
                    'assignmentid'      => $assignmentgenerate,
                    'clientname'        => $clientname->client_name,
                    'clientcode'        => $clientname->client_code,
                    'assignmentname'    => $request->assignmentname,
                    'assignment_name'   => $assignment_name,
                    'emailid'           => $teamemailotherpartner->emailid,
                    'otherpatner'       => $teamemailotherpartner,
                    'assignmentpartner' => $teamemailpartner,
                ];

                $this->sendAssignmentEmail($data);
            }
        }


        // please match hare in old code me null aa raha hai kiya 
        $actionName = class_basename($request->route()->getActionname());
        $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
        $id = auth()->user()->teammember_id;
        DB::table('activitylogs')->insert([
            'user_id' => $id,
            'ip_address' => $request->ip(),
            'activitytitle' => $pagename,
            'description' => 'New Assignment Mapping Added' . ' ' . '( ' . $assignment_name . ' )',
            'created_at' => date('y-m-d'),
            'updated_at' => date('y-m-d')
        ]);
        // Assignment assignmentmappings end
        $output = array('msg' => "Created Successfully <strong>Client Name:</strong> $clientname->client_name <strong>Assignment:</strong> $assignment_name <strong>Assignment Name:</strong> $request->assignmentname <strong>Assignment Id:</strong> $assignmentgenerate ");
        return redirect('assignmentbudgeting')->with('success', $output);
    }



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\emails\assignmentassign.blade.php
replace all code hare 


<h3>
    Dear Sir/Madam</h3>
<br><br>
<p>You have been assigned a new assignment . Please click <a href="{{ url('assignmentmapping') }}">here</a> to check</p>
<p>Assignment Name : {{ $assignment_name }} ({{ $assignmentname }}) ({{ $assignmentid }})</p>
<p>Client Name : {{ $clientname ?? '' }}</p>
<p>Client Code : {{ $clientcode ?? '' }}</p>
<p>Assignment Partner : {{ $assignmentpartner->team_member ?? '' }} ({{ $assignmentpartner->staffcode ?? '' }})</p>
<p>Other Partner : {{ $otherpatner->team_member ?? 'N/A' }}
    @if ($otherpatner != null)
        ({{ $otherpatner->staffcode ?? '' }})
    @endif
</p>
@if (!empty($teamleader) && $teamleader->isNotEmpty())
    <p>Team Leader :
        @foreach ($teamleader as $teamleaderDatas)
            {{ $teamleaderDatas->team_member ?? '' }} ({{ $teamleaderDatas->staffcode ?? '' }}),
        @endforeach
    </p>
@endif
