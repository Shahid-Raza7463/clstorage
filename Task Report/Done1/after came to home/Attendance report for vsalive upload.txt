now start are you sure module 
07-09-24
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
all code replace below file 

resources\views\backEnd\applyleave\adminopen.blade.php

resources\views\backEnd\applyleave\index.blade.php

resources\views\backEnd\applyleave\openindex.blade.php

resources\views\backEnd\applyleave\teamapplication.blade.php

resources\views\backEnd\applyleave\view.blade.php

resources\views\backEnd\timesheetrequest\view.blade.php
resources\views\backEnd\applyleave\adminrevertleave.blade.php


resources\views\backEnd\layouts\includes\js.blade.php

 {{-- ###################################################################################################### --}}
 {{-- shahid script start hare  --}}

 {{-- <script>
     $(document).ready(function() {
         //   alert('hi');
         $('#saveform').click(function(event) {
             //   alert('hi');
             var reasoninputvalve = $('#reasoninput').val().trim();

             if (reasoninputvalve === "") {
                 alert('Please enter a reason.');
                 event.preventDefault();
                 return false;
             }

             // Confirmation prompt
             var confirmSubmit = confirm('Are you sure you want to submit ?');
             if (!confirmSubmit) {
                 event.preventDefault();
                 return false;
             }
         });
     });
 </script> --}}


 <script>
     $(document).ready(function() {
         $('.saveform').each(function() {
             $(this).click(function(event) {
                 var index = $(this).attr('id').split('-')[
                     1]; // Get the index from the button's ID
                 var reasonInputVal = $('#reasoninput-' + index).val()
                     .trim(); // Use the dynamic ID

                 if (reasonInputVal === "") {
                     alert('Please enter a reason.');
                     event.preventDefault();
                     return false;
                 }

                 // Confirmation prompt
                 var confirmSubmit = confirm('Are you sure you want to submit?');
                 if (!confirmSubmit) {
                     event.preventDefault();
                     return false;
                 }
             });
         });
     });
 </script>

 <script>
     $(document).ready(function() {
         //   alert('hi');
         $('#timesheetrequest').click(function(event) {
             //   alert('hi');
             var reasoninputvalve = $('#timesheetrequestinput').val().trim();

             if (reasoninputvalve === "") {
                 alert('Please enter a reason.');
                 event.preventDefault();
                 return false;
             }

             // Confirmation prompt
             var confirmSubmit = confirm('Are you sure you want to submit ?');
             if (!confirmSubmit) {
                 event.preventDefault();
                 return false;
             }
         });
     });
 </script>

 <script>
     $(document).ready(function() {
         $('#exampleModal12').on('hidden.bs.modal', function() {
             $(this).find('form')[0].reset();
         });
     });
 </script>


now start are you sure module end 

now start attendance module for vsalve upload from vsademo
07-09-24
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php


                                  @if (Auth::user()->role_id == 18 || Auth::user()->role_id == 11 || Auth::user()->role_id == 13)
                                      <li><a href="{{ url('attendance') }}">Attendance</a></li>
                                      <!-- <li><a href="{{ url('check-In') }}">Check In/Out</a></li>-->
                                  @endif







22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
routes\web.php

  Route::resource('/attendance', AttendanceController::class);







22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AttendanceController.php


    public function index()
    {

        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
            $teammembers = DB::table('teammembers')
                ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                // ->where('teammembers.status', 1)
                ->whereIn('teammembers.role_id', [14, 15, 13, 11])
                ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
                ->orderBy('team_member', 'ASC')
                ->get();

            return view('backEnd.attendance.index', compact('teammembers'));
        }
        abort(403, ' you have no permission to access this page ');
    }







22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\index.blade.php
replace all code

    <!--Third party Styles(used by this page)-->
  <link href="{{ url('backEnd/plugins/select2/dist/css/select2.min.css') }}" rel="stylesheet">
  <link href="{{ url('backEnd/plugins/select2-bootstrap4/dist/select2-bootstrap4.min.css') }}" rel="stylesheet">
  <link href="{{ url('backEnd/plugins/jquery.sumoselect/sumoselect.min.css') }}" rel="stylesheet">

  @extends('backEnd.layouts.layout') @section('backEnd_content')
      <!--Content Header (Page header)-->
      <div class="content-header row align-items-center m-0">
          <nav aria-label="breadcrumb" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
          </nav>
          <div class="col-sm-8 header-title p-0">
              <div class="media">
                  <div class="header-icon text-success mr-3"><i class="typcn typcn-puzzle-outline"></i></div>
                  <div class="media-body">
                      <h1 class="font-weight-bold">Attendance Report</h1>
                      <small>Team Workbook List</small>
                  </div>
              </div>
          </div>
      </div>
      <!--/.Content Header (Page header)-->
      <div class="body-content">
          <div class="card mb-4">

              <div class="card-body">
                  @component('backEnd.components.alert')
                  @endcomponent
                  {{-- filtering functionality --}}
                  <form method="post" action="{{ url('attendance-filter') }}" enctype="multipart/form-data">
                      @csrf
                      <div class="row">
                          <!-- Teammember Filter -->
                          <div class="col-md-4 col-sm-6 mb-3">
                              <div class="form-group">
                                  <strong><label for="teammemberId">Employee Name</label></strong>
                                  <select class="language form-control" id="teammemberId" name="teammemberId">
                                      <option value="">Please Select One</option>
                                      @php
                                          $displayedValues = [];
                                      @endphp
                                      @foreach ($teammembers as $teammember)
                                          @if (!in_array($teammember->staffcode, $displayedValues))
                                              <option value="{{ $teammember->id }}"
                                                  {{ old('teammemberId') == $teammember->id ? 'selected' : '' }}>
                                                  {{ $teammember->team_member }}
                                                  ({{ $teammember->newstaff_code ?? ($teammember->staffcode ?? '') }})
                                              </option>
                                              @php
                                                  $displayedValues[] = $teammember->staffcode;
                                              @endphp
                                          @endif
                                      @endforeach
                                  </select>
                              </div>
                          </div>

                          <!-- Start Date Filter -->
                          <div class="col-md-3 col-sm-6 mb-3">
                              <div class="form-group">
                                  <strong><label for="startdate">Start Date <span
                                              class="text-danger">*</span></label></strong>
                                  <input required type="date" class="form-control" id="startdate" name="startdate"
                                      value="{{ old('startdate') }}">
                              </div>
                          </div>

                          <!-- End Date Filter -->
                          <div class="col-md-3 col-sm-6 mb-3">
                              <div class="form-group">
                                  <strong><label for="enddate">End Date <span class="text-danger">*</span></label></strong>
                                  <input required type="date" class="form-control" id="enddate" name="enddate"
                                      value="{{ old('enddate') }}">
                              </div>
                          </div>

                          <!-- Search Button -->
                          <div class="col-md-2 col-sm-6 mb-3">
                              <div class="form-group">
                                  <label for="search">&nbsp;</label>
                                  <button type="submit" class="btn btn-success btn-block">Search</button>
                              </div>
                          </div>
                      </div>
                  </form>
              </div>

          </div>
      </div>
  @endsection


  {{-- Include jQuery --}}
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

  <script>
      $(document).ready(function() {
          var startDateInput = $('#startdate');
          var endDateInput = $('#enddate');

          // Function to compare start and end dates
          function compareDates() {
              var startDate = new Date(startDateInput.val());
              var endDate = new Date(endDateInput.val());

              if (startDate > endDate) {
                  alert('End date should be greater than or equal to the Start date');
                  endDateInput.val(''); // Clear the end date input
              }
          }

          // Function to validate the year length
          function validateYear(input) {
              var date = new Date(input.val());
              var year = date.getFullYear();

              if (year.toString().length > 4) {
                  alert('Enter four digits for the year');
                  input.val(''); // Clear the invalid date
              }
          }

          // Attach event listeners
          startDateInput.on('input', compareDates);
          endDateInput.on('blur', compareDates);

          startDateInput.on('change', function() {
              validateYear(startDateInput);
          });

          endDateInput.on('change', function() {
              validateYear(endDateInput);
          });
      });
  </script>









22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
  Route::any('/attendance-filter',  [AttendanceController::class, 'adminattendancereport']);







22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AttendanceController.php

    public function adminattendancereport(Request $request)
    {

        $teamnid = $request->input('teammemberId');
        $startdate = $request->input('startdate');
        $enddate = $request->input('enddate');
        // All teammember 
        $teammembers = DB::table('teammembers')
            ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->whereIn('teammembers.role_id', [14, 15, 13, 11])
            ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
            ->orderBy('team_member', 'ASC')
            ->get();
        // only attendance user 
        // $teammembers = DB::table('attendances')
        //     ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'attendances.employee_name')
        //     ->leftJoin('teammembers', 'teammembers.id', '=', 'attendances.employee_name')
        //     ->whereIn('teammembers.role_id', [14, 15, 13, 11])
        //     ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
        //     ->distinct()
        //     ->orderBy('teammembers.team_member', 'ASC')
        //     ->get();

        $query  = DB::table('attendances')
            ->leftjoin('teammembers', 'teammembers.id', 'attendances.employee_name')
            ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
            ->select('attendances.*', 'teammembers.team_member', 'teammembers.employment_status', 'roles.rolename', 'teammembers.joining_date');

        if ($teamnid) {
            $query->where('attendances.employee_name', $teamnid);
        }

        if ($startdate && $enddate) {
            // Convert the start and end dates to full month names
            $startMonth = Carbon::parse($startdate)->format('F'); // e.g., "January"
            $endMonth = Carbon::parse($enddate)->format('F');     // e.g., "December"

            // Map months to numbers for correct comparison
            $months = [
                'January' => 1,
                'February' => 2,
                'March' => 3,
                'April' => 4,
                'May' => 5,
                'June' => 6,
                'July' => 7,
                'August' => 8,
                'September' => 9,
                'October' => 10,
                'November' => 11,
                'December' => 12,
            ];

            $startMonthNumber = $months[$startMonth];
            $endMonthNumber = $months[$endMonth];

            // Filter by month names by converting the stored string month to its respective number
            $query->whereBetween(DB::raw("FIELD(attendances.month, 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')"), [$startMonthNumber, $endMonthNumber]);
        }

        // if ($startdate) {
        //     $query->where('applyleaves.leavetype', $startdate);
        // }

        $attendanceDatas = $query->get();
        $request->flash();

        return view('backEnd.attendance.adminattendance', compact('attendanceDatas', 'teammembers'));
    }






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\adminattendance.blade.php
replace all code 


{{-- selec input box style --}}
<link href="{{ url('backEnd/plugins/select2/dist/css/select2.min.css') }}" rel="stylesheet">
<link href="{{ url('backEnd/plugins/select2-bootstrap4/dist/select2-bootstrap4.min.css') }}" rel="stylesheet">
<link href="{{ url('backEnd/plugins/jquery.sumoselect/sumoselect.min.css') }}" rel="stylesheet">
{{-- selec input box style end hare --}}

{{-- Datatable style --}}
<link href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css" rel="stylesheet">
<link href="https://cdn.datatables.net/buttons/1.7.1/css/buttons.dataTables.min.css" rel="stylesheet">
{{-- Datatable style end --}}

@extends('backEnd.layouts.layout') @section('backEnd_content')
    <div class="content-header row align-items-center m-0">
        <nav aria-label="breadcrumb" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
        </nav>
        <div class="col-sm-8 header-title p-0">
            <div class="media">
                <div class="header-icon text-success mr-3"><i class="typcn typcn-puzzle-outline"></i></div>
                <div class="media-body">
                    <h1 class="font-weight-bold">Attendance Report</h1>
                    <small>Team Workbook List</small>
                </div>
            </div>
        </div>
    </div>

    <div class="body-content">
        <div class="card mb-4">
            <div class="card-body">
                @component('backEnd.components.alert')
                @endcomponent
                <div class="table-responsive">
                    <form method="post" action="{{ url('attendance-filter') }}" enctype="multipart/form-data">
                        @csrf
                        <div class="row">
                            <!-- Teammember Filter -->
                            <div class="col-md-4 col-sm-6 mb-3">
                                <div class="form-group">
                                    <strong><label for="teammemberId">Employee Name</label></strong>
                                    <select class="language form-control" id="teammemberId" name="teammemberId">
                                        <option value="">Please Select One</option>
                                        @php
                                            $displayedValues = [];
                                        @endphp
                                        @foreach ($teammembers as $teammember)
                                            @if (!in_array($teammember->staffcode, $displayedValues))
                                                <option value="{{ $teammember->id }}"
                                                    {{ old('teammemberId') == $teammember->id ? 'selected' : '' }}>
                                                    {{ $teammember->team_member }}
                                                    ({{ $teammember->newstaff_code ?? ($teammember->staffcode ?? '') }})
                                                </option>
                                                @php
                                                    $displayedValues[] = $teammember->staffcode;
                                                @endphp
                                            @endif
                                        @endforeach
                                    </select>
                                </div>
                            </div>

                            <!-- Start Date Filter -->
                            <div class="col-md-3 col-sm-6 mb-3">
                                <div class="form-group">
                                    <strong><label for="startdate">Start Date <span
                                                class="text-danger">*</span></label></strong>
                                    <input required type="date" class="form-control" id="startdate" name="startdate"
                                        value="{{ old('startdate') }}">
                                </div>
                            </div>

                            <!-- End Date Filter -->
                            <div class="col-md-3 col-sm-6 mb-3">
                                <div class="form-group">
                                    <strong><label for="enddate">End Date <span
                                                class="text-danger">*</span></label></strong>
                                    <input required type="date" class="form-control" id="enddate" name="enddate"
                                        value="{{ old('enddate') }}">
                                </div>
                            </div>

                            <!-- Search Button -->
                            <div class="col-md-2 col-sm-6 mb-3">
                                <div class="form-group">
                                    <label for="search">&nbsp;</label>
                                    <button type="submit" class="btn btn-success btn-block">Search</button>
                                </div>
                            </div>
                        </div>
                    </form>
                    <table id="examplee" class="display nowrap">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Employee Name</th>
                                <th>Role</th>
                                <th>Month</th>
                                <th>01</th>
                                <th>02</th>
                                <th>03</th>
                                <th>04</th>
                                <th>05</th>
                                <th>06</th>
                                <th>07</th>
                                <th>08</th>
                                <th>09</th>
                                <th>10</th>
                                <th>11</th>
                                <th>12</th>
                                <th>13</th>
                                <th>14</th>
                                <th>15</th>
                                <th>16</th>
                                <th>17</th>
                                <th>18</th>
                                <th>19</th>
                                <th>20</th>
                                <th>21</th>
                                <th>22</th>
                                <th>23</th>
                                <th>24</th>
                                <th>25</th>
                                <th>26</th>
                                <th>27</th>
                                <th>28</th>
                                <th>29</th>
                                <th>30</th>
                                <th>31</th>
                                <th>Total Number of days</th>
                                {{-- <th>No of days Present</th> --}}
                                <th>Total Working days</th>
                                <th>Total Casual Leave</th>
                                {{-- <th>Sick Leave (SL)</th> --}}
                                {{-- <th>Exam Leave (EL)</th> --}}
                                <th>Total Exam Leave</th>
                                <th>Total Travel</th>
                                <th>Total Offholidays</th>
                                <th>Total Weekend</th>
                                <th>Total Holidays</th>
                                {{-- <th>Absent</th> --}}
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($attendanceDatas as $attendanceData)
                                <tr>
                                    <td style="display: none;">{{ $attendanceData->id }}</td>
                                    <td>{{ $attendanceData->team_member }}</td>
                                    <td>{{ $attendanceData->rolename }}</td>
                                    <td> {{ $attendanceData->month }}</td>
                                    <td> {{ $attendanceData->one ?? '…....' }}</td>
                                    <td> {{ $attendanceData->two ?? '…....' }}</td>
                                    <td> {{ $attendanceData->three ?? '…....' }}</td>
                                    <td> {{ $attendanceData->four ?? '…....' }}</td>
                                    <td> {{ $attendanceData->five ?? '…....' }}</td>
                                    <td> {{ $attendanceData->six ?? '…....' }}</td>
                                    <td> {{ $attendanceData->seven ?? '…....' }}</td>
                                    <td> {{ $attendanceData->eight ?? '…....' }}</td>
                                    <td> {{ $attendanceData->nine ?? '…....' }}</td>
                                    <td> {{ $attendanceData->ten ?? '…....' }}</td>
                                    <td> {{ $attendanceData->eleven ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twelve ?? '…....' }}</td>
                                    <td> {{ $attendanceData->thirteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->fourteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->fifteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->sixteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->seventeen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->eighteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->ninghteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twenty ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyone ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentytwo ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentythree ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyfour ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyfive ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentysix ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyseven ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyeight ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentynine ?? '…....' }}</td>
                                    <td> {{ $attendanceData->thirty ?? '…....' }}</td>
                                    <td> {{ $attendanceData->thirtyone ?? '…....' }}</td>

                                    <td> {{ $attendanceData->total_no_of_days ?? '0' }}</td>
                                    <td> {{ $attendanceData->no_of_days_present ?? '0' }}</td>
                                    <td> {{ $attendanceData->casual_leave ?? '0' }}</td>
                                    {{-- <td> {{ $attendanceData->sick_leave ?? '0' }}</td> --}}
                                    <td> {{ $attendanceData->exam_leave ?? '0' }}</td>
                                    <td> {{ $attendanceData->travel ?? '0' }}</td>
                                    <td> {{ $attendanceData->offholidays ?? '0' }}</td>
                                    <td> {{ $attendanceData->sundaycount ?? '0' }}</td>
                                    <td> {{ $attendanceData->holidays ?? '0' }}</td>
                                    {{-- <td> {{ $attendanceData->absent ?? '' }}</td> --}}
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
@endsection
{{-- 
<script src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/dataTables.buttons.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.print.min.js"></script>
<script>
    $(document).ready(function() {
        $('#examplee').DataTable({
            "pageLength": 100,
            dom: 'Bfrtip',
            "order": [
                [0, "desc"]
            ],


            buttons: [

                {
                    extend: 'copyHtml5',
                    exportOptions: {
                        columns: [0, ':visible']
                    }
                },
                {
                    extend: 'excelHtml5',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                {
                    extend: 'pdfHtml5',
                    exportOptions: {
                        columns: [0, 1, 2, 5]
                    }
                },
                'colvis'
            ]
        });
    });
</script> --}}



<script src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/dataTables.buttons.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.print.min.js"></script>

<script>
    $(document).ready(function() {
        $('#examplee').DataTable({
            "pageLength": 100,
            dom: 'Bfrtip',
            "order": [
                [0, "desc"]
            ],
            columnDefs: [{
                targets: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
                    39, 40, 41, 42
                ],
                orderable: false
            }],

            buttons: [{
                    extend: 'excelHtml5',
                    filename: 'Team Attendance',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                'colvis'
            ]
        });
    });
</script>









22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
regarding table 
add attendance table 






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php


    public function index()
  {
    // Fetch the user's status
    $checkuserstatus = DB::table('users')
      ->where('teammember_id', auth()->user()->teammember_id)
      ->where('status', 1)
      ->first();

    if (!$checkuserstatus) {
      Auth::logout();
      return redirect()->route('login')->with('message', 'You have been logged out due to your account inactive.');
    }

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    $mentor_id = DB::table('teammembers')
      ->join('users', 'users.teammember_id', 'teammembers.id')
      ->where('users.teammember_id', auth()->user()->teammember_id)
      ->pluck('mentor_id')
      ->first();

    $mentee_id = DB::table('teammembers')
      ->join('users', 'users.teammember_id', 'teammembers.id')
      ->where('teammembers.mentor_id', auth()->user()->teammember_id)
      //->pluck('teammembers.id')
      ->get();

    //dd($mentee_id);
    $mentor = null;
    $mentees = null;

    if ($mentor_id != null) {
      $mentor = DB::table('teammembers')->where('id', $mentor_id)->first();
    }

    if (count($mentee_id) != 0) {
      $mentees = $mentee_id;
    }

    // Set $mentees to null (if needed)
    if ($mentees == null) {
      $mentees = null;
    }

    $todayBirthdays = Teammember::whereNotNull('dateofbirth')
      ->where('status', '1')
      ->get()
      ->filter(function ($birthday) {
        $dateofbirth = Carbon::parse($birthday->dateofbirth);
        $currentDate = Carbon::now();

        // Compare the month and day without considering the current year
        return $dateofbirth->month == $currentDate->month && $dateofbirth->day == $currentDate->day;
      })
      ->sortBy('dateofbirth');

    $upcomingBirthdays = Teammember::where('status', '1')
      ->whereRaw('DATE_FORMAT(dateofbirth, "%m-%d") > DATE_FORMAT(NOW(), "%m-%d")')
      ->orderByRaw('DATE_FORMAT(dateofbirth, "%m-%d")')
      ->limit(7)
      ->get();



    $workAnniversaries = Teammember::whereNotNull('joining_date')
      ->where('status', '1')
      ->get()
      ->filter(function ($teammember) {
        $joiningDate = Carbon::parse($teammember->joining_date);
        $currentDate = Carbon::now();

        // Compare the month and day without considering the current year
        $isAnniversaryToday = $joiningDate->month == $currentDate->month && $joiningDate->day == $currentDate->day;

        // Exclude work anniversaries with a duration of 0 years
        $isNonZeroAnniversary = $joiningDate->diffInYears($currentDate) > 0;

        return $isAnniversaryToday && $isNonZeroAnniversary;
      })
      ->sortBy('joining_date')
      ->take(2);

    $upcomingHolidays = Holiday::where('startdate', '>', now()->format('Y-m-d'))
      ->where('status', 1)
      ->orderBy('startdate', 'asc')
      ->take(2)
      ->get();

    if (auth()->user()->role_id == 11 || auth()->user()->role_id == 12) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;
      $notificationDatas =  DB::table('notifications')
        ->join('teammembers', 'teammembers.id', 'notifications.created_by')
        ->select(
          'notifications.*',
          'teammembers.profilepic',
          'teammembers.team_member'
        )->orderBy('created_at', 'desc')->paginate('2');
      // dd($notificationDatas);
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->paginate(2);
      $assignment =  DB::table('assignmentbudgetings')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->select(
          'assignmentbudgetings.*',
          'clients.client_name',
          'assignments.assignment_name'
        )->orderBy('assignmentbudgetings.created_at', 'desc')->take(5)->get();

      $openleave = DB::table('applyleaves')
        ->where('status', 0)
        ->count();

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->count();

      $assignmentcount = Assignmentmapping::count();
      $notification = Notification::count();

      // Get open assinment count
      $openassignmentcount =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', '1')
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->count();
      // Get closed assinment count
      $closedassignmentcount =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', '0')
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->count();

      return view('backEnd.index', compact('openassignmentcount', 'closedassignmentcount', 'opentimesheetrequests', 'openleave', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays'));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 
      // dd(auth()->user()->teammember_id);
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      $notificationDatas =   DB::table('notifications')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->where('notifications.targettype', '1')
        ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();


      $openleave = DB::table('applyleaves')
        ->where('approver', auth()->user()->teammember_id)
        ->where('status', 0)
        ->count();
      //  dd($notificationDatas);

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->where(function ($query) {
          $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
            ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
        })
        ->count();

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      // $assignmentcount = count($assignment);

      $assignmentcountbefore = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->count();


      $assignmentcountafter = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->count();

      $assignmentcount = $assignmentcountbefore + $assignmentcountafter;
      // manager

      // total working days start using financial year
      $currentDate = Carbon::now();
      $currentMonth = $currentDate->format('F');
      if ($currentDate->month >= 4) {
        // Current year financial year
        $startDate = Carbon::create($currentDate->year, 4, 1);
        $endDate = Carbon::create($currentDate->year + 1, 3, 31);
      } else {
        // Previous year financial year
        $startDate = Carbon::create($currentDate->year - 1, 4, 1);
        $endDate = Carbon::create($currentDate->year, 3, 31);
      }

      $totalworkingdays = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('fulldate', [$startDate->format('Y-m-d'), $endDate->format('Y-m-d')])
        ->sum('no_of_days_present');
      // total working days end hare 
      return view('backEnd.index', compact('notification', 'opentimesheetrequests', 'openleave', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount', 'totalworkingdays', 'currentMonth'));
    } elseif (auth()->user()->role_id == 13) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      $notificationDatas =  DB::table('notifications')
        ->join('teammembers', 'teammembers.id', 'notifications.created_by')
        ->Where('targettype', '3')
        ->orWhere('targettype', '2')
        ->select(
          'notifications.*',
          'teammembers.profilepic',
          'teammembers.team_member'
        )->orderBy('created_at', 'desc')->paginate('2');
      //  dd($notificationDatas);

      $notification = Notification::count();
      $client = Client::count();
      $tender = Tender::where('teammember_id', auth()->user()->teammember_id)->count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();

      $openleave = DB::table('applyleaves')
        ->where('approver', auth()->user()->teammember_id)
        ->where('status', 0)
        ->count();

      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();
      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->take(5)->get();

      $assignmentcount = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->count();

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->where(function ($query) {
          $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
            ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
        })
        ->count();

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare

      // total working days start using financial year
      $currentDate = Carbon::now();
      $currentMonth = $currentDate->format('F');
      if ($currentDate->month >= 4) {
        // Current year financial year
        $startDate = Carbon::create($currentDate->year, 4, 1);
        $endDate = Carbon::create($currentDate->year + 1, 3, 31);
      } else {
        // Previous year financial year
        $startDate = Carbon::create($currentDate->year - 1, 4, 1);
        $endDate = Carbon::create($currentDate->year, 3, 31);
      }

      $totalworkingdays = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('fulldate', [$startDate->format('Y-m-d'), $endDate->format('Y-m-d')])
        ->sum('no_of_days_present');
      // total working days end hare 

      return view('backEnd.index', compact('opentimesheetrequests', 'openleave', 'tender', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount', 'totalworkingdays', 'currentMonth'));
    } elseif (auth()->user()->role_id == 16) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;
      $notificationDatas =    $notificationDatas = DB::table('notifications')
        //    ->leftjoin('users','users.id','notifications.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->Where('targettype', '3')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);
      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $tender = Tender::where('teammember_id', auth()->user()->teammember_id)->count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();
      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')

        ->select(
          'assignmentbudgetings.client_id',
          'assignmentbudgetings.assignmentgenerate_id',
          'clients.client_name',
          'assignments.assignment_name'
        )
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)->distinct()->get();
      $assignmentcount = count($assignment);
      return view('backEnd.index', compact('tender', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays'));
    } elseif (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 
      // dd(auth()->user()->teammember_id);
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      $notificationDatas =   DB::table('notifications')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->where('notifications.targettype', '1')
        ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();

      //  dd($notificationDatas);

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      // $assignmentcount = count($assignment);

      $assignmentcount = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->count();

      // total working days start using financial year
      $currentDate = Carbon::now();
      $currentMonth = $currentDate->format('F');
      if ($currentDate->month >= 4) {
        // Current year financial year
        $startDate = Carbon::create($currentDate->year, 4, 1);
        $endDate = Carbon::create($currentDate->year + 1, 3, 31);
      } else {
        // Previous year financial year
        $startDate = Carbon::create($currentDate->year - 1, 4, 1);
        $endDate = Carbon::create($currentDate->year, 3, 31);
      }

      $totalworkingdays = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('fulldate', [$startDate->format('Y-m-d'), $endDate->format('Y-m-d')])
        ->sum('no_of_days_present');
      // total working days end hare 

      // manager
      return view('backEnd.index', compact('notification', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount', 'totalworkingdays', 'currentMonth'));
    } else {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;
      $notificationDatas =   DB::table('notifications')
        //  ->leftjoin('users','users.id','notifications.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->where('notifications.targettype', '1')
        ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        ->where('clients.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      $assignmentcount = count($assignment);
      return view('backEnd.index', compact('notification', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays'));
    }
  }







22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\index.blade.php

13

                <div class="col-md-6 col-lg-3">
                    <div class="p-2 text-white rounded mb-3 p-3 shadow-sm text-center" style="background: #00548bfa;green">
                        <a href="{{ url('totalworkingdays', auth()->user()->teammember_id) }}">
                            <div style="color:white;"
                                class="opacity-50 header-pretitle fs-11 font-weight-bold text-uppercase">Total Working Days
                            </div>
                            <div style="color:white;" class="fs-32 text-monospace">{{ $totalworkingdays ?? '0' }}
                            </div>
                            <small style="color:white;">Days (April to {{ $currentMonth }})</small>
                        </a>
                    </div>
                </div>
				
14

                               <div class="col-md-6 col-lg-3">
                    <div class="p-2 text-white rounded mb-3 p-3 shadow-sm text-center" style="background: #00548bfa;green">
                        <a href="{{ url('totalworkingdays', auth()->user()->teammember_id) }}">
                            <div style="color:white;"
                                class="opacity-50 header-pretitle fs-11 font-weight-bold text-uppercase">Total Working Days
                            </div>
                            <div style="color:white;" class="fs-32 text-monospace">{{ $totalworkingdays ?? '0' }}
                            </div>
                            <small style="color:white;">Days (April to {{ $currentMonth }})</small>
                        </a>
                    </div>
                </div>


15

  <div class="col-md-6 col-lg-3">
                    <div class="p-2 text-white rounded mb-3 p-3 shadow-sm text-center"
                        style="background: #00548bfa;green">
                        <a href="{{ url('totalworkingdays', auth()->user()->teammember_id) }}">
                            <div style="color:white;"
                                class="opacity-50 header-pretitle fs-11 font-weight-bold text-uppercase">Total Working Days
                            </div>
                            <div style="color:white;" class="fs-32 text-monospace">{{ $totalworkingdays ?? '0' }}
                            </div>
                            <small style="color:white;">Days (April to {{ $currentMonth }})</small>
                        </a>
                    </div>
                </div>
				




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222

  Route::get('/totalworkingdays/{teamid}', [TimesheetController::class, 'totalworkingdays']);





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


   public function totalworkingdays(Request $request, $teamid)
  {
    $attendanceDates = DB::table('attendances')
      ->where('employee_name', $teamid)
      ->select(DB::raw('MIN(created_at) as startDate, MAX(created_at) as endDate'))
      ->first();

    $attendancesstartDate = Carbon::parse($attendanceDates->startDate)->format('Y-m-d H:i:s');
    // $attendancesstartDate = Carbon::parse($attendanceDates->startDate)->subMinutes(2)->format('Y-m-d H:i:s');
    // $attendancesendDate = Carbon::parse($attendanceDates->endDate)->addMinutes(2)->format('Y-m-d H:i:s');

    // find last date of this date $attendanceDates->endDate
    $attendancesendDate = Carbon::parse($attendanceDates->endDate)->endOfMonth()->setTime(23, 59, 0)->format('Y-m-d H:i:s');


    $query = DB::table('timesheetusers')
      ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
      ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
      ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
      ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
      ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
      ->select(
        'timesheetusers.*',
        'assignments.assignment_name',
        'clients.client_name',
        'clients.client_code',
        'teammembers.team_member',
        'teammembers.staffcode',
        'patnerid.team_member as patnername',
        'patnerid.staffcode as patnerstaffcode',
        'assignmentbudgetings.assignmentname',
        'teamrolehistory.newstaff_code',
        'assignmentbudgetings.created_at as assignmentcreateddate'
      )
      ->where('timesheetusers.createdby', $teamid)
      ->whereIn('timesheetusers.status', [1, 2, 3])
      ->whereBetween('timesheetusers.updated_at', [$attendancesstartDate, $attendancesendDate])
      // leave offholidays timesheet
      ->whereNotIn('timesheetusers.assignmentgenerate_id', ['OFF100004'])
      // ->whereNotNull('timesheetusers.assignmentgenerate_id')
      // leave holidays timesheet
      ->whereNotIn('timesheetusers.client_id', [134])
      ->orderBy('timesheetusers.date', 'DESC');

    // Apply role-specific filters if necessary
    if (auth()->user()->role_id == 13) {
      // Add any specific conditions or modifications for role_id 13 if needed.
    }

    $timesheetData = $query->get();
    // dd($timesheetData);
    return view('backEnd.timesheet.totalworkingdays', compact('timesheetData'));
  }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\totalworkingdays.blade.php

<!--Third party Styles(used by this page)-->
<link href="{{ url('backEnd/plugins/select2/dist/css/select2.min.css') }}" rel="stylesheet">
<link href="{{ url('backEnd/plugins/select2-bootstrap4/dist/select2-bootstrap4.min.css') }}" rel="stylesheet">
<link href="{{ url('backEnd/plugins/jquery.sumoselect/sumoselect.min.css') }}" rel="stylesheet">

@extends('backEnd.layouts.layout') @section('backEnd_content')
    <!--Content Header (Page header)-->
    <div class="content-header row align-items-center m-0">
        <nav aria-label="breadcrumb" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
        </nav>
        <div class="col-sm-8 header-title p-0">
            <div class="media">
                <div class="header-icon text-success mr-3"><i class="typcn typcn-puzzle-outline"></i></div>
                <div class="media-body">
                    <h1 class="font-weight-bold">Total Working Days</h1>
                    <small>My Workbook List</small>
                </div>
            </div>
        </div>
    </div>
    <!--/.Content Header (Page header)-->
    <div class="body-content">
        <div class="card mb-4">
            <div class="card-body">
                @component('backEnd.components.alert')
                @endcomponent
                <div class="table-responsive">
                    @if (Request::is('adminsearchtimesheet') || Request::is('totalworkingdays/*') || Request::is('searchingtimesheet'))
                        <table id="examplee" class="table display table-bordered table-striped table-hover">
                            <thead>
                                <tr>
                                    <th style="display: none;">id</th>
                                    @if (Auth::user()->role_id == 11 ||
                                            Request::is('adminsearchtimesheet') ||
                                            (Auth::user()->role_id == 13 && Request::is('admintimesheetlist')))
                                        <th class="textfixed">Employee Name</th>
                                        <th class="textfixed">Employee Code</th>
                                    @endif
                                    <th>Date</th>
                                    <th>Day</th>
                                    <th>Client Name</th>
                                    <th class="textfixed">Client Code</th>
                                    <th>Assignment Name</th>
                                    <th class="textfixed">Assignment Id</th>
                                    <th>Work Item</th>
                                    <th>Location</th>
                                    <th>Partner</th>
                                    <th class="textfixed">Partner Code</th>
                                    <th>Hour</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach ($timesheetData as $timesheetDatas)
                                    <tr>
                                        @php
                                            $permotioncheck = DB::table('teamrolehistory')
                                                ->where('teammember_id', $timesheetDatas->createdby)
                                                ->first();
                                            $datadate = $timesheetDatas->assignmentcreateddate
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $timesheetDatas->assignmentcreateddate,
                                                )
                                                : null;

                                            $permotiondate = null;
                                            if ($permotioncheck) {
                                                $permotiondate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $permotioncheck->created_at,
                                                );
                                            }
                                        @endphp
                                        <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                        @if (Auth::user()->role_id == 11 ||
                                                Request::is('adminsearchtimesheet') ||
                                                (Auth::user()->role_id == 13 && Request::is('admintimesheetlist')))
                                            <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                            @if ($permotioncheck && $datadate && $datadate->greaterThan($permotiondate))
                                                <td>{{ $permotioncheck->newstaff_code }}</td>
                                            @else
                                                <td>{{ $timesheetDatas->staffcode }}</td>
                                            @endif
                                        @endif

                                        <td class="textfixed"> <span style="display: none;">
                                                {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                        </td>
                                        <td class="textfixed">
                                            @if ($timesheetDatas->date != null)
                                                {{ date('l', strtotime($timesheetDatas->date)) }}
                                            @endif
                                        </td>
                                        <td class="textfixed">{{ $timesheetDatas->client_name ?? '' }}
                                        </td>
                                        <td>{{ $timesheetDatas->client_code ?? '' }}
                                        </td>
                                        <td class="textfixed">
                                            {{ $timesheetDatas->assignment_name ?? '' }}
                                            @if ($timesheetDatas->assignmentname != null)
                                                ({{ $timesheetDatas->assignmentname ?? '' }})
                                            @endif
                                        </td>
                                        <td>
                                            {{ $timesheetDatas->assignmentgenerate_id ?? '' }}
                                        </td>
                                        <td class="textfixed"> {{ $timesheetDatas->workitem ?? '' }}</td>
                                        <td class="textfixed">{{ $timesheetDatas->location ?? '' }} </td>
                                        <td class="textfixed"> {{ $timesheetDatas->patnername ?? '' }}
                                        </td>
                                        <td>
                                            @if ($permotioncheck && $datadate && $datadate->greaterThan($permotiondate))
                                                {{ $timesheetDatas->newstaff_code ?? '' }}
                                            @else
                                                {{ $timesheetDatas->patnerstaffcode ?? '' }}
                                            @endif
                                        </td>
                                        <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    @endif
                </div>
            </div>
        </div>
    </div>
@endsection

<script src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/dataTables.buttons.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.print.min.js"></script>
<script>
    $(document).ready(function() {
        $('#examplee').DataTable({
            dom: 'Bfrtip',
            "order": [],
            searching: false,

            columnDefs: [{
                targets: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
                orderable: false
            }],

            buttons: [{
                    extend: 'excelHtml5',
                    filename: 'Total_Working_days',

                    //   remove extra date from column
                    exportOptions: {
                        columns: ':visible',
                        format: {
                            body: function(data, row, column, node) {
                                // it should be column number 2
                                if (column === 0) {
                                    // If the data is a date, extract the date without HTML tags
                                    var cleanedText = $(data).text().trim();
                                    var dateParts = cleanedText.split(
                                        '-');
                                    // Assuming the date format is yyyy-mm-dd
                                    if (dateParts.length === 3) {
                                        return dateParts[2] + '-' + dateParts[1] + '-' +
                                            dateParts[0];
                                    }
                                }
                                return data;
                            }
                        }
                    },

                    //   set width in excell
                    customize: function(xlsx) {
                        var sheet = xlsx.xl.worksheets['sheet1.xml'];
                        // set column width
                        $('col', sheet).eq(0).attr('width', 11);
                        $('col', sheet).eq(1).attr('width', 12);
                        $('col', sheet).eq(2).attr('width', 30);
                        $('col', sheet).eq(3).attr('width', 11);
                        $('col', sheet).eq(4).attr('width', 30);
                        $('col', sheet).eq(5).attr('width', 13);
                        $('col', sheet).eq(9).attr('width', 12);

                        $('c', sheet).each(function() {
                            var originalText = $(this).find('is t').text();
                            var cleanedText = originalText.replace(/\s+/g, ' ')
                                .trim();
                            $(this).find('is t').text(cleanedText);
                        });
                    }
                },
                'colvis'
            ]
        });
    });
</script>



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php


  
    // after attendance
  public function store(Request $request)
  {

    $request->validate([
      'leavetype' => "required",
      'to' => "required",
      'from' => "required",
    ]);

    $skipaftertrue = false;
    $from = Carbon::createFromFormat('Y-m-d', $request->from);
    // $from = Carbon::createFromFormat('Y-m-d', '2024-03-11');
    $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
    // software created date 
    $softwarermaked = Carbon::createFromFormat('Y-m-d', '2023-09-11');

    // timesheetreport latest submitted date 
    $latesttimesheetsubmitted = DB::table('timesheetreport')
      ->where('teamid', auth()->user()->teammember_id)
      ->latest()
      ->first();

    $pormotionandrejoiningdata = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.id', auth()->user()->teammember_id)
      ->select(
        'teammembers.team_member',
        'teammembers.staffcode',
        'teammembers.joining_date',
        'teamrolehistory.newstaff_code',
        'teamrolehistory.rejoiningdate',
        'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
      )
      ->first();

    // $joining_date = $pormotionandrejoiningdata->joining_date ? Carbon::parse($pormotionandrejoiningdata->joining_date) : null;
    $rejoining_date = null;
    if ($pormotionandrejoiningdata) {
      $rejoining_date = $pormotionandrejoiningdata->rejoiningdate ?? $pormotionandrejoiningdata->samepostrejoiningdate;
      $rejoiningDateformate = $rejoining_date ? Carbon::parse($rejoining_date) : null;
    }
    // dd($rejoiningDateformate);
    if ($rejoiningDateformate && $from->lessThan($rejoiningDateformate)) {
      $output = ['msg' => 'You cannot apply leave before the rejoining date: ' . $rejoiningDateformate->format('d-m-Y')];
      return back()->with('statuss', $output);
    }

    // if ($joining_date && $from->lessThan($joining_date)) {
    //   $output = ['msg' => 'You cannot fill timesheet before the joining date: ' . $joining_date->format('d-m-Y')];
    //   return redirect('timesheet/mylist')->with('statuss', $output);
    // }

    // $latesttimesheetsubmittedformate = Carbon::createFromFormat('Y-m-d', $latesttimesheetsubmitted->enddate);
    $latesttimesheetsubmittedformate = null;
    if ($latesttimesheetsubmitted) {
      $latesttimesheetsubmittedformate = $latesttimesheetsubmitted->enddate
        ? Carbon::createFromFormat('Y-m-d', $latesttimesheetsubmitted->enddate)
        : null;
    }
    // Check if the from date is in the past
    if ($latesttimesheetsubmittedformate && $latesttimesheetsubmittedformate->greaterThan($from)) {

      // Check if the from date is in the past
      if ($softwarermaked->greaterThan($from)) {
        $output = ['msg' => 'You cannot apply leave before 11-09-2023'];
        return back()->with('statuss', $output);
      }

      $rejectedtimesheet = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();


      $rejectedtimesheetformate = null;
      if ($rejectedtimesheet) {
        $rejectedtimesheetformate = Carbon::createFromFormat('Y-m-d', $rejectedtimesheet->date);
      }

      if ($rejectedtimesheetformate && $rejectedtimesheetformate->isSameDay($from)) {

        // Update total hour
        $timesheetdelete = DB::table('timesheetusers')->where('timesheetid', $rejectedtimesheet->timesheetid)->first();
        if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {

          $gettotalteamhour = DB::table('assignmentmappings')
            ->leftJoin(
              'assignmentteammappings',
              'assignmentteammappings.assignmentmapping_id',
              'assignmentmappings.id',
            )
            ->where(
              'assignmentmappings.assignmentgenerate_id',
              $timesheetdelete->assignmentgenerate_id
            )
            ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->first();

          if ($gettotalteamhour) {
            // dd($gettotalteamhour);
            $gettotalteamhour = $gettotalteamhour->teamhour;
            $finalresult =  $gettotalteamhour - $timesheetdelete->hour;

            $totalteamhourupdate = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $timesheetdelete->assignmentgenerate_id
              )
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              // ->get();
              ->update(['teamhour' =>  $finalresult]);
          }
        }

        if (auth()->user()->role_id == 13) {
          $assignmentdata = DB::table('assignmentmappings')
            ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
            ->first();

          $finalresultleadpatner =  $assignmentdata->leadpartnerhour - $timesheetdelete->hour;
          $finalresultotherpatner =  $assignmentdata->otherpartnerhour - $timesheetdelete->hour;

          if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
            $update2 = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
              ->where('leadpartner', auth()->user()->teammember_id)
              ->update(['leadpartnerhour' => $finalresultleadpatner]);
          }
          if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
            $update2 = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
              ->where('otherpartner', auth()->user()->teammember_id)
              ->update(['otherpartnerhour' => $finalresultotherpatner]);
          }
        }
        // Update total hour end 

        DB::table('timesheets')->where('id', $rejectedtimesheet->timesheetid)->update([
          'status'   => 3,
        ]);

        if ($request->leavetype == 9) {
          DB::table('timesheetusers')->where('id', $rejectedtimesheet->id)->update([
            'status'   => 3,
            'client_id'     =>    134,
            'workitem'     =>     $request->reasonleave,
            'assignmentgenerate_id' => null,
            'location'     =>     '',
            'hour'     =>     0,
            'totalhour' =>      0,
            'assignment_id'     =>     215,
            'partner'     =>     887,
          ]);
        } else {
          DB::table('timesheetusers')->where('id', $rejectedtimesheet->id)->update([
            'status'   => 3,
            'client_id'     =>    134,
            'assignmentgenerate_id' => null,
            'workitem'     =>     $request->reasonleave,
            'location'     =>     '',
            'hour'     =>     0,
            'totalhour' =>      0,
            'assignment_id'     =>     214,
            'partner'     =>     887,
          ]);
        }

        $id = DB::table('applyleaves')->insertGetId([
          'leavetype'         =>     $request->leavetype,
          'type'         =>     $request->type,
          'examtype'         =>     $request->examtype,
          'otherexam'         =>     $request->otherexam,
          'from'         =>     $request->from,
          'to'         =>     $request->to,
          'reasonleave'         =>     $request->reasonleave,
          'approver'         =>     $request->approver,
          'status'         =>    1,
          'createdby'         =>     auth()->user()->teammember_id,
          'created_at'          =>    date('Y-m-d H:i:s'),
          'updated_at'              =>    date('Y-m-d H:i:s'),
        ]);


        // Attendance code start hare 
        $hdatess = Carbon::parse($request->from)->format('Y-m-d');
        $day = Carbon::parse($hdatess)->format('d');
        $month = Carbon::parse($hdatess)->format('F');
        $yeardata = Carbon::parse($hdatess)->format('Y');


        $dates = [
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
        ];

        $column = $dates[$day];
        // check attendenace record exist or not 
        $attendances = DB::table('attendances')
          ->where('employee_name', auth()->user()->teammember_id)
          ->where('month', $month)
          ->first();

        if ($attendances && property_exists($attendances, $column)) {
          $checkwording = DB::table('attendances')
            ->where('id', $attendances->id)
            ->value($column);

          if ($checkwording == 'R') {

            if ($request->leavetype == 9) {
              $updatewording = 'CL';
            } else {
              $updatewording = 'EL';
            }

            // Mapping for total count columns
            $totalCountMapping = [
              'P' => 'no_of_days_present',
              'CL' => 'casual_leave',
              'EL' => 'exam_leave',
              'T' => 'travel',
              'OH' => 'offholidays',
              'W' => 'sundaycount',
              'H' => 'holidays'
            ];

            // Update the total count and attendance record if applicable
            if (isset($totalCountMapping[$updatewording])) {
              $totalcountColumn = $totalCountMapping[$updatewording];
              $totalcountupdate = $attendances->$totalcountColumn + 1;
              DB::table('attendances')
                ->where('id', $attendances->id)
                ->update([
                  $column => $updatewording,
                  $totalcountColumn => $totalcountupdate,
                ]);
            }
          }
        }
        // Attendance code end hare 

        $output = array('msg' => 'Create Successfully');
        return back()->with('success', $output);
      } else {
        $output = ['msg' => 'You cannot apply leave before Submitted timesheet date'];
        return back()->with('statuss', $output);
      }
    }


    if ($latesttimesheetsubmittedformate == null) {
      // Check if the from date is in the past
      if ($softwarermaked->greaterThan($from)) {
        $output = ['msg' => 'You cannot apply leave before 11-09-2023'];
        return back()->with('statuss', $output);
      }
    }

    if ($from->equalTo($to) && $from->dayOfWeek === Carbon::SUNDAY) {
      $output = ['msg' => 'You cannot apply leave for Sunday'];
      return back()->with('statuss', $output);
    }
    // timesheetcheck 
    $timesheetcheck = DB::table('timesheets')
      ->where('created_by', auth()->user()->teammember_id)
      ->select('date')
      ->get();
    if (count($timesheetcheck) != 0) {
      foreach ($timesheetcheck as $timesheetchecks) {
        $leaveDates = CarbonPeriod::create(
          date('Y-m-d', strtotime($request->from)),
          date('Y-m-d', strtotime($request->to))
        );

        foreach ($leaveDates as $leaveDate) {
          if ($leaveDate->format('Y-m-d') == $timesheetchecks->date) {
            $output = array('msg' => 'You Have already filled timesheet for the Day (' . date('d-m-Y', strtotime($leaveDate)) . ')');
            return back()->with('statuss', $output);
          }
        }
      }
    }

    //duplicate leave check
    $leaves = DB::table('applyleaves')
      ->where('applyleaves.createdby', auth()->user()->teammember_id)
      ->where('status', '!=', 2)
      ->select('applyleaves.from', 'applyleaves.to')
      ->get();

    $leaveDates = [];
    foreach ($leaves as $leave) {
      $days = CarbonPeriod::create(
        date('Y-m-d', strtotime($leave->from)),
        date('Y-m-d', strtotime($leave->to))
      );

      foreach ($days as $day) {
        $leaveDates[] = $day->format('Y-m-d');
      }
    }

    $currentDay = date('Y-m-d', strtotime($request->from));
    $lastDay = date('Y-m-d', strtotime($request->to));

    if (count($leaves) != 0) {
      foreach ($leaveDates as $leaveDate) {
        if ($leaveDate >= $currentDay && $leaveDate <= $lastDay) {
          $output = array('msg' => 'You Have Leave for the Day (' . date('d-m-Y', strtotime($leaveDate)) . ')');
          return back()->with('statuss', $output);
        }
      }
    }

    $currentdate = date('Y-m-d');
    $currentYear = date('Y');
    $financialYearStart = $currentYear . '-04-01';
    $financialYearEnd = ($currentYear + 1) . '-03-31';

    $teammember = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

    try {

      $currentDate = Carbon::now();
      $day = $currentDate->day;
      $currentYear = $currentDate->year;



      //birthday-festival leave 
      if ($request->leavetype == 8) {
        dd($request, 'hi 3');
        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $diff_in_days = $to->diffInDays($from) + 1;


        $financialYearStart = $currentYear . '-04-01';
        $financialYearEnd = ($currentYear + 1) . '-03-31';

        $count = DB::table('applyleaves')
          ->where('status', '!=', '2')
          ->where('leavetype', $request->leavetype)
          ->where('createdby', auth()->user()->teammember_id)
          ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
          ->first();


        $teammember = DB::table('teammembers')
          ->where('id', auth()->user()->teammember_id)
          ->first();

        $requestedDate = date('F d', strtotime($request->to));
        $birthdayDate = date('F d', strtotime($teammember->dateofbirth));

        if ($request->type == 0) {
          if ($request->to != $request->from) {

            $output = ['msg' => 'You can take only one day birthday leave'];
            return back()->with('success', $output);
          }
          if ($requestedDate != $birthdayDate) {

            $output = ['msg' => 'Your request for the birthday date is wrong'];
            return back()->with('success', $output);
          }
          if ($diff_in_days < 2 && $count != null) {
            $output = ['msg' => 'You have already taken a birthday leave'];
            return back()->with('success', $output);
          }
        } elseif ($request->type == 1) {
          if ($diff_in_days < 2) {
            if ($count != null) {
              $output = ['msg' => 'You have already taken a festival leave'];
              return back()->with('success', $output);
            }
          } else {
            $output = ['msg' => 'You can take only one day festival leave'];
            return back()->with('success', $output);
          }
        }


        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];

        $requestedDay = date('d', strtotime($request->to));
        $requestedDay = date('d', strtotime($request->to));
        $requestedMonth = $from->format('F');
        if (isset($columnMappings[$requestedDay])) {
          $columnName = $columnMappings[$requestedDay];
          if (in_array($requestedDay, ['26', '27', '28', '29', '30', '31'])) {
            $requestedMonth = $from->copy()->addMonth()->format('F');
          }
          DB::table('attendances')
            ->updateOrInsert(
              [
                'employee_name' => auth()->user()->teammember_id,
                'month' => $requestedMonth
              ],
              [
                $columnName => 'BL/C',
                'birthday_religious' => DB::raw('COALESCE(birthday_religious, 0) + 1'),
                'created_at' => now(),
                'updated_at' => now()
              ],
              [
                'created_at' => now()
              ]
            );
        }
      } elseif ($request->leavetype == 9) {

        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $requestdays = $to->diffInDays($from) + 1;
        $period = CarbonPeriod::create($request->from, $request->to);
        $datess = [];

        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');

          $id = DB::table('timesheets')->insertGetId(
            [
              'created_by' => auth()->user()->teammember_id,
              'month'     =>     date('F', strtotime($date->format('Y-m-d'))),
              'date'     =>    $date->format('Y-m-d'),
              'created_at'          =>     date('Y-m-d H:i:s'),
            ]
          );

          $a = DB::table('timesheetusers')->insert([
            'date'     =>    $date->format('Y-m-d'),
            'client_id'     =>    134,
            'workitem'     =>     $request->reasonleave,
            'location'     =>     '',
            //   'billable_status'     =>     $request->billable_status[$i],
            'timesheetid'     =>     $id,
            'date'     =>    $date->format('Y-m-d'),
            'hour'     =>     0,
            'totalhour' =>      0,
            'assignment_id'     =>     215,
            'partner'     =>     887,
            // adding approver in patner section 
            // 'partner'     =>     $request->approver,
            'createdby' => auth()->user()->teammember_id,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>    date('Y-m-d H:i:s'),
          ]);
        }

        $getholidays = DB::table('holidays')->where('startdate', '>=', $request->from)
          ->where('enddate', '<=', $request->to)->select('startdate')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }

        $cl_leave = array_diff($datess, $hdatess);
        $cl_leave_total = count($cl_leave);
        $lstatus = "CL/C";

        if ($teammember->joining_date < $financialYearStart) {
          $startDate = \Carbon\Carbon::createFromFormat('Y-m-d', $financialYearStart);
        } else {
          $startDate = \Carbon\Carbon::createFromFormat('Y-m-d', $teammember->joining_date);
        }

        $diff_in_months = $startDate->diffInMonths($currentdate) + 1;
        $totalcountCasual = 1.5 * $diff_in_months;
        if (\Carbon\Carbon::parse($teammember->joining_date)->diffInDays($currentdate) <= 90) {
          $totalcountCasual = 0;
        }

        $teamdate = \Carbon\Carbon::createFromFormat('Y-m-d', $teammember->joining_date);
        $teammonthcount = $teamdate->diffInMonths($currentdate) + 1;

        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];

        foreach ($cl_leave as $requestedDate) {
          $day = date('d', strtotime($requestedDate));
          $requestedMonth = date('F', strtotime($requestedDate));

          if ($day >= 26 && $day <= 31) {
            $requestedDateTime = new DateTime($requestedDate);
            $requestedDateTime->modify('first day of next month');
            $requestedMonth = $requestedDateTime->format('F');
          }

          $appliedCasual = DB::table('applyleaves')
            ->where('status', '!=', '2')
            ->where('leavetype', $request->leavetype)
            ->where('createdby', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();

          $countCasual = 0;
          $casualDates = [];
          $holidaydates = [];
          foreach ($appliedCasual as $CasualLeave) {
            $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
            $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
            $period = CarbonPeriod::create($fromDate, $toDate);

            foreach ($period as $date) {
              $casualDates[] = $date->format('Y-m-d');
            }

            $getholidays = DB::table('holidays')->get();
            foreach ($getholidays as $date) {
              $holidaydates[] = date('Y-m-d', strtotime($date->startdate));
            }

            $casualDates = array_unique($casualDates);
          }

          $attendanceRecord = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();

          $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
          $clInAttendance = 0;
          foreach ($attendanceRecord as $item) {
            foreach ($columns as $column) {
              if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
                $clInAttendance++;
              }
            }
          }

          if ($clInAttendance >= $totalcountCasual || $totalcountCasual - $clInAttendance == 0.5) {
            $lstatus = 'LWP';
          }

          $attendanceUpdateData = [];
          $attendances = DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)->first();
          if ($attendances == null) {
            if ($lstatus == 'CL/C') {
              $attendanceData = [
                'employee_name' => auth()->user()->teammember_id,
                'month' => $requestedMonth,
                'casual_leave' => 1,
                'created_at' => Carbon::now(),
              ];
            } else {
              $attendanceData = [
                'employee_name' => auth()->user()->teammember_id,
                'month' => $requestedMonth,
                'lwp' => 1,
                'created_at' => Carbon::now(),
              ];
            }
            // DB::table('attendances')->insert($attendanceData);
          } else {
            if ($lstatus == 'CL/C') {
              // DB::table('attendances')
              //   ->where('employee_name', auth()->user()->teammember_id)
              //   ->where('month', $requestedMonth)
              //   ->update(['casual_leave' => DB::raw('COALESCE(casual_leave, 0) + 1')]);
            } else {
              // DB::table('attendances')
              //   ->where('employee_name', auth()->user()->teammember_id)
              //   ->where('month', $requestedMonth)
              //   ->update(['lwp' => DB::raw('COALESCE(lwp, 0) + 1')]);
            }
          }

          $column = $columnMappings[$day] ?? null;
          if ($column !== null) {
            $attendanceUpdateData[$column] = $lstatus;
          }

          //Update the attendance data for the current date
          // DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
          //   ->where('month', $requestedMonth)->update($attendanceUpdateData);
        }
      }
      // Casual leave end

      elseif ($request->leavetype == 10) {

        $sick = DB::table('leavetypes')->where('name', 'Sick Leave')->where('year', $currentYear)->first();

        //      $availableleave = $sick->noofdays - $takeleavecount ;
        //  dd($availableleave);
        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $requestdays = $to->diffInDays($from) + 1;





        $period = CarbonPeriod::create($request->from, $request->to);
        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }
        // dd($datess);
        // Convert the period to an array of dates
        // $dates = $period->toArray();

        $getholidays = DB::table('holidays')->where('startdate', '>=', $request->from)
          ->where('enddate', '<=', $request->to)->select('startdate')->get();

        if (count($getholidays) != 0) {
          foreach ($getholidays as $date) {
            $hdatess[] = date('Y-m-d', strtotime($date->startdate));
          }
        } else {
          $hdatess[] = 0;
        }
        //dd($hdatess);

        $sl_leave = array_diff($datess, $hdatess);
        $sl_leave_total = count(array_diff($datess, $hdatess));

        $lstatus = "SL/C";


        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];
        foreach ($sl_leave as $requestedDate) {


          $day = date('d', strtotime($requestedDate));
          $requestedMonth = date('F', strtotime($requestedDate));

          if ($day >= 26 && $day <= 31) {
            $requestedDateTime = new DateTime($requestedDate);
            $requestedDateTime->modify('first day of next month');
            $requestedMonth = $requestedDateTime->format('F');
          }

          $appliedSick = DB::table('applyleaves')
            ->where('status', '!=', '2')
            ->where('leavetype', $request->leavetype)
            ->where('createdby', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();

          $countSick = 0;
          $sickDates = [];
          $holidaydates = [];
          foreach ($appliedSick as $sickLeave) {

            $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
            $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
            $period = CarbonPeriod::create($fromDate, $toDate);


            foreach ($period as $date) {
              $sickDates[] = $date->format('Y-m-d');
            }

            $getholidays = DB::table('holidays')->get();


            foreach ($getholidays as $date) {
              $holidaydates[] = date('Y-m-d', strtotime($date->startdate));
            }
            $sickDates = array_unique($sickDates);
          }


          $attendanceRecord = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();
          $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
          $slInAttendance = 0;
          foreach ($attendanceRecord as $item) {
            foreach ($columns as $column) {
              if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
                $slInAttendance++;
              }
            }
          }

          if ($slInAttendance >= $sick->noofdays) {

            $lstatus = 'LWP';
          }

          $attendanceUpdateData = [];
          $attendances = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)
            ->first();

          $attendanceData = [
            'employee_name' => auth()->user()->teammember_id,
            'month' => $requestedMonth,
            'created_at' => Carbon::now()
          ];

          if ($lstatus == 'SL/C') {
            $attendanceData['sick_leave'] = 1;
          } else {
            $attendanceData['lwp'] = 1;
          }

          if ($attendances == null) {
            DB::table('attendances')->insert($attendanceData);
          } else {
            if ($lstatus == 'SL/C') {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['sick_leave' => DB::raw('COALESCE(sick_leave, 0) + 1')]);
            } else {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['lwp' => DB::raw('COALESCE(lwp, 0) + 1')]);
            }
          }


          $column = $columnMappings[$day] ?? null;
          if ($column !== null) {
            $attendanceUpdateData[$column] = $lstatus;
          }

          //Update the attendance data for the current date
          DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)->update($attendanceUpdateData);
        }
      } elseif ($request->leavetype == 11) {
        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $requestdays = $to->diffInDays($from) + 1;
        $period = CarbonPeriod::create($request->from, $request->to);

        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->where('startdate', '>=', $request->from)
          ->where('enddate', '<=', $request->to)->select('startdate')->get();

        if (count($getholidays) != 0) {
          foreach ($getholidays as $date) {
            $hdatess[] = date('Y-m-d', strtotime($date->startdate));
          }
        } else {
          $hdatess[] = 0;
        }

        $exam_leave = array_diff($datess, $hdatess);
        $exam_leave_total = count(array_diff($datess, $hdatess));
        $lstatus = "EL";
        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];

        foreach ($exam_leave as $exam_leave) {
          $day = date('d', strtotime($exam_leave));
          $requestedMonth = date('F', strtotime($exam_leave));
          if ($day >= 26 && $day <= 31) {
            $requestedDateTime = new DateTime($exam_leave);
            $requestedDateTime->modify('first day of next month');
            $requestedMonth = $requestedDateTime->format('F');
          }

          $attendanceUpdateData = [];
          $attendances = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)
            ->first();

          $attendanceData = [
            'employee_name' => auth()->user()->teammember_id,
            'month' => $requestedMonth,
            'created_at' => Carbon::now()
          ];

          if ($lstatus == 'EL') {
            $attendanceData['exam_leave'] = 1;
          } else {
            $attendanceData['lwp'] = 1;
          }

          if ($attendances == null) {
            // DB::table('attendances')->insert($attendanceData);
          } else {
            if ($lstatus == 'EL') {
              // DB::table('attendances')
              //   ->where('employee_name', auth()->user()->teammember_id)
              //   ->where('month', $requestedMonth)
              //   ->update(['exam_leave' => DB::raw('COALESCE(sick_leave, 0) + 1')]);
            } else {
              // DB::table('attendances')
              //   ->where('employee_name', auth()->user()->teammember_id)
              //   ->where('month', $requestedMonth)
              //   ->update(['lwp' => DB::raw('COALESCE(lwp, 0) + 1')]);
            }
          }

          $column = $columnMappings[$day] ?? null;
          if ($column !== null) {
            $attendanceUpdateData[$column] = $lstatus;
          }
          //Update the attendance data for the current date
          // DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
          //   ->where('month', $requestedMonth)->update($attendanceUpdateData);
        }
      }
      // exam leave end

      if ($request->hasFile('report')) {
        $file = $request->file('report');
        $destinationPath = 'backEnd/image/report';
        $name = $file->getClientOriginalName();
        $s = $file->move($destinationPath, $name);
        $data['salaryincomefile'] = $name;
        $data['report'] = $name;
      }

      $id = DB::table('applyleaves')->insertGetId([
        'leavetype'         =>     $request->leavetype,
        'approver'         =>     $request->approver,
        'from'         =>     $request->from,
        'type'         =>     $request->type,
        'examtype'         =>     $request->examtype,
        'otherexam'         =>     $request->otherexam,
        'to'         =>     $request->to,
        'report'         => $data['report'] ?? '',
        'status'         =>    0,
        'reasonleave'         =>     $request->reasonleave,
        'createdby'         =>     auth()->user()->teammember_id,
        'created_at'          =>    date('Y-m-d H:i:s'),
        'updated_at'              =>    date('Y-m-d H:i:s'),
      ]);

      if ($request->teammember_id != null) {
        foreach ($request->teammember_id as $teammember) {
          DB::table('leaveteams')->insert([
            'leave_id'         =>     $id,
            'teammember_id'         =>     $teammember,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>     date('Y-m-d H:i:s'),
          ]);
        }
      }

      $teammemberemail = Teammember::where('id', $request->approver)->first();
      $teammembername = Teammember::where('id', auth()->user()->teammember_id)->first();

      $data = array(
        'id' => $id,
        'leavetype'         =>     $request->leavetype,
        'from'         =>     $request->from,
        'to'         =>     $request->to,
        'reasonleave'         =>     $request->reasonleave,
        'teammembername'         =>    $teammembername->team_member,
        'teamstaffcode'         =>    $teammembername->staffcode,
        'teammemberemail' => $teammemberemail->emailid ?? '',
        'id' => $id ?? ''

      );

      Mail::send('emails.applyleaveform', $data, function ($msg) use ($data) {
        $msg->to($data['teammemberemail']);
        //   $msg->cc('itsupport_delhi@vsa.co.in');
        $msg->subject('VSA Apply Leave Request');
      });

      $output = array('msg' => 'Create Successfully');
      return back()->with('success', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



   // after attendance 
  public function update(Request $request, $id)
  {
    try {
      if ($request->status == 1) {
        $team = DB::table('applyleaves')
          ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
          ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
          ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
          ->where('applyleaves.id', $id)
          ->select('applyleaves.*', 'teammembers.emailid', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name', 'leavetypes.holiday')->first();

        if ($team->leavetype == '8' && $team->type == '1') {
          $to = Carbon::createFromFormat('Y-m-d', $team->to ?? '');
          $from = Carbon::createFromFormat('Y-m-d', $team->from);

          $period = date('Y-m-d', strtotime($team->to));
          $bl_leave_day = date('d', strtotime($period));
          $bl_leave_month = date('F', strtotime($period));

          if ($bl_leave_day >= 26 && $bl_leave_day <= 31) {
            $bl_leave_month = date('F', strtotime($period . ' +1 month'));
          }

          $requestdays = $to->diffInDays($from) + 1;

          $holidaycount = DB::table('holidays')->where('startdate', '>=', $team->from)
            ->where('enddate', '<=', $team->to)
            ->count();

          $totalrqstday = $requestdays - $holidaycount;

          DB::table('leaveapprove')->insert([
            'teammemberid'     =>     $team->createdby,
            'leavetype'     =>     $team->leavetype,
            'totaldays'     =>     $totalrqstday,
            'year'     =>     '2023',
            'created_at'          =>     date('y-m-d'),
            'updated_at'              =>    date('y-m-d'),
          ]);


          $lstatus = "BL/A";

          $attendances = DB::table('attendances')
            ->where('employee_name', $team->createdby)
            ->where('month', $bl_leave_month)->first();


          if ($attendances->birthday_religious == null) {
            $birthday = 0;
          } else {
            $birthday = $attendances->birthday_religious;
          }

          $attendances = DB::table('attendances')->where('employee_name', $team->createdby)
            ->where('month', $bl_leave_month)->first();

          $column = '';
          switch ($bl_leave_day) {
            case '26':
              $column = 'twentysix';
              break;
            case '27':
              $column = 'twentyseven';
              break;
            case '28':
              $column = 'twentyeight';
              break;
            case '29':
              $column = 'twentynine';
              break;
            case '30':
              $column = 'thirty';
              break;
            case '31':
              $column = 'thirtyone';
              break;
            case '01':
              $column = 'one';
              break;
            case '02':
              $column = 'two';
              break;
            case '03':
              $column = 'three';
              break;
            case '04':
              $column = 'four';
              break;
            case '05':
              $column = 'five';
              break;
            case '06':
              $column = 'six';
              break;
            case '07':
              $column = 'seven';
              break;
            case '08':
              $column = 'eight';
              break;
            case '09':
              $column = 'nine';
              break;
            case '10':
              $column = 'ten';
              break;
            case '11':
              $column = 'eleven';
              break;
            case '12':
              $column = 'twelve';
              break;
            case '13':
              $column = 'thirteen';
              break;
            case '14':
              $column = 'fourteen';
              break;
            case '15':
              $column = 'fifteen';
              break;
            case '16':
              $column = 'sixteen';
              break;
            case '17':
              $column = 'seventeen';
              break;
            case '18':
              $column = 'eighteen';
              break;
            case '19':
              $column = 'ninghteen';
              break;
            case '20':
              $column = 'twenty';
              break;
            case '21':
              $column = 'twentyone';
              break;
            case '22':
              $column = 'twentytwo';
              break;
            case '23':
              $column = 'twentythree';
              break;
            case '24':
              $column = 'twentyfour';
              break;
            case '25':
              $column = 'twentyfive';
              break;
          }

          if (!empty($column)) {

            DB::table('attendances')
              ->where('employee_name', $team->createdby)
              ->where('month', $bl_leave_month)
              ->whereRaw("NOT ({$column} REGEXP '^-?[0-9]+$')")
              ->update([
                $column => $lstatus,
              ]);
          }
        } elseif ($team->leavetype == '8' && $team->type == '0') {
          $to = Carbon::createFromFormat('Y-m-d', $team->to ?? '');
          $from = Carbon::createFromFormat('Y-m-d', $team->from);

          $period = date('Y-m-d', strtotime($team->to));
          $bl_leave_day = date('d', strtotime($period));
          $bl_leave_month = date('F', strtotime($period));

          $requestdays = $to->diffInDays($from) + 1;

          $holidaycount = DB::table('holidays')->where('startdate', '>=', $team->from)
            ->where('enddate', '<=', $team->to)
            ->count();

          $totalrqstday = $requestdays - $holidaycount;

          DB::table('leaveapprove')->insert([
            'teammemberid'     =>     $team->createdby,
            'leavetype'     =>     $team->leavetype,
            'type'     =>     $team->type,
            'totaldays'     =>     $totalrqstday,
            'year'     =>     '2023',
            'created_at'          =>     date('y-m-d'),
            'updated_at'              =>    date('y-m-d'),
          ]);



          // dd($period);
          $lstatus = "BL/A";




          $attendances = DB::table('attendances')
            ->where('employee_name', $team->createdby)
            ->where('month', $bl_leave_month)->first();

          // dd($attendances);
          if ($attendances->birthday_religious == null) {
            $birthday = 0;
          } else {
            $birthday = $attendances->birthday_religious;
          }




          $attendances = DB::table('attendances')->where('employee_name', $team->createdby)
            ->where('month', $bl_leave_month)->first();

          $column = '';
          switch ($bl_leave_day) {
            case '26':
              $column = 'twentysix';
              break;
            case '27':
              $column = 'twentyseven';
              break;
            case '28':
              $column = 'twentyeight';
              break;
            case '29':
              $column = 'twentynine';
              break;
            case '30':
              $column = 'thirty';
              break;
            case '31':
              $column = 'thirtyone';
              break;
            case '01':
              $column = 'one';
              break;
            case '02':
              $column = 'two';
              break;
            case '03':
              $column = 'three';
              break;
            case '04':
              $column = 'four';
              break;
            case '05':
              $column = 'five';
              break;
            case '06':
              $column = 'six';
              break;
            case '07':
              $column = 'seven';
              break;
            case '08':
              $column = 'eight';
              break;
            case '09':
              $column = 'nine';
              break;
            case '10':
              $column = 'ten';
              break;
            case '11':
              $column = 'eleven';
              break;
            case '12':
              $column = 'twelve';
              break;
            case '13':
              $column = 'thirteen';
              break;
            case '14':
              $column = 'fourteen';
              break;
            case '15':
              $column = 'fifteen';
              break;
            case '16':
              $column = 'sixteen';
              break;
            case '17':
              $column = 'seventeen';
              break;
            case '18':
              $column = 'eighteen';
              break;
            case '19':
              $column = 'ninghteen';
              break;
            case '20':
              $column = 'twenty';
              break;
            case '21':
              $column = 'twentyone';
              break;
            case '22':
              $column = 'twentytwo';
              break;
            case '23':
              $column = 'twentythree';
              break;
            case '24':
              $column = 'twentyfour';
              break;
            case '25':
              $column = 'twentyfive';
              break;
          }

          if (!empty($column)) {

            DB::table('attendances')
              ->where('employee_name', $team->createdby)
              ->where('month', $bl_leave_month)
              ->whereRaw("NOT ({$column} REGEXP '^-?[0-9]+$')")
              ->update([
                $column => $lstatus,
              ]);
          }
        }
        if ($team->name == 'Casual Leave') {
          $to = Carbon::createFromFormat('Y-m-d', $team->to ?? '');
          $from = Carbon::createFromFormat('Y-m-d', $team->from);
          $requestdays = $to->diffInDays($from) + 1;

          $holidaycount = DB::table('holidays')->where('startdate', '>=', $team->from)
            ->where('enddate', '<=', $team->to)
            ->count();

          $totalrqstday = $requestdays - $holidaycount;
          DB::table('leaveapprove')->insert([
            'teammemberid'     =>     $team->createdby,
            'leavetype'     =>     $team->leavetype,
            'totaldays'     =>     $totalrqstday,
            'year'     =>     '2023',
            'created_at'          =>     date('y-m-d'),
            'updated_at'              =>    date('y-m-d'),
          ]);

          $period = CarbonPeriod::create($team->from, $team->to);
          $datess = [];
          foreach ($period as $date) {
            $datess[] = $date->format('Y-m-d');
          }

          $getholidays = DB::table('holidays')->where('startdate', '>=', $team->from)
            ->where('enddate', '<=', $team->to)->select('startdate')->get();

          if (count($getholidays) != 0) {
            foreach ($getholidays as $date) {
              $hdatess[] = date('Y-m-d', strtotime($date->startdate));
            }
          } else {
            $hdatess[] = 0;
          }

          $cl_leave = array_diff($datess, $hdatess);
          $lstatus = "CL/A";
          foreach ($cl_leave as $cl_leave) {
            $cl_leave_day = date('d', strtotime($cl_leave));
            $cl_leave_month = date('F', strtotime($cl_leave));

            if ($cl_leave_day >= 26 && $cl_leave_day <= 31) {
              $cl_leave_month = date('F', strtotime($cl_leave . ' +1 month'));
            }

            $attendances = DB::table('attendances')->where('employee_name', $team->createdby)
              ->where('month', $cl_leave_month)->first();

            $column = '';
            switch ($cl_leave_day) {
              case '26':
                $column = 'twentysix';
                break;
              case '27':
                $column = 'twentyseven';
                break;
              case '28':
                $column = 'twentyeight';
                break;
              case '29':
                $column = 'twentynine';
                break;
              case '30':
                $column = 'thirty';
                break;
              case '31':
                $column = 'thirtyone';
                break;
              case '01':
                $column = 'one';
                break;
              case '02':
                $column = 'two';
                break;
              case '03':
                $column = 'three';
                break;
              case '04':
                $column = 'four';
                break;
              case '05':
                $column = 'five';
                break;
              case '06':
                $column = 'six';
                break;
              case '07':
                $column = 'seven';
                break;
              case '08':
                $column = 'eight';
                break;
              case '09':
                $column = 'nine';
                break;
              case '10':
                $column = 'ten';
                break;
              case '11':
                $column = 'eleven';
                break;
              case '12':
                $column = 'twelve';
                break;
              case '13':
                $column = 'thirteen';
                break;
              case '14':
                $column = 'fourteen';
                break;
              case '15':
                $column = 'fifteen';
                break;
              case '16':
                $column = 'sixteen';
                break;
              case '17':
                $column = 'seventeen';
                break;
              case '18':
                $column = 'eighteen';
                break;
              case '19':
                $column = 'ninghteen';
                break;
              case '20':
                $column = 'twenty';
                break;
              case '21':
                $column = 'twentyone';
                break;
              case '22':
                $column = 'twentytwo';
                break;
              case '23':
                $column = 'twentythree';
                break;
              case '24':
                $column = 'twentyfour';
                break;
              case '25':
                $column = 'twentyfive';
                break;
            }

            if (!empty($column)) {
              // DB::table('attendances')
              //   ->where('employee_name', $team->createdby)
              //   ->where('month', $cl_leave_month)
              //   ->whereRaw("NOT ({$column} REGEXP '^-?[0-9]+$')")
              //   ->whereRaw("{$column} != 'LWP'")
              //   ->update([
              //     $column => $lstatus,
              //   ]);
            }
          }
        }
        // Casual Leave end
        if ($team->name == 'Exam Leave') {
          $to = Carbon::createFromFormat('Y-m-d', $team->to ?? '');
          $from = Carbon::createFromFormat('Y-m-d', $team->from);
          $requestdays = $to->diffInDays($from) + 1;

          $holidaycount = DB::table('holidays')->where('startdate', '>=', $team->from)
            ->where('enddate', '<=', $team->to)
            ->count();

          $totalrqstday = $requestdays - $holidaycount;
          DB::table('leaveapprove')->insert([
            'teammemberid'     =>     $team->createdby,
            'leavetype'     =>     $team->leavetype,
            'totaldays'     =>     $totalrqstday,
            'year'     =>     '2023',
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>    date('Y-m-d H:i:s'),
          ]);
          $period = CarbonPeriod::create($team->from, $team->to);

          $datess = [];
          foreach ($period as $date) {
            $datess[] = $date->format('Y-m-d');
            //dd($id);
            $ids = DB::table('timesheets')->insertGetId(
              [
                'created_by' => $team->createdby,
                'month'     =>     date('F', strtotime($date->format('Y-m-d'))),
                'date'     =>    $date->format('Y-m-d'),
                'created_at'          =>     date('Y-m-d H:i:s'),
              ]
            );

            $a = DB::table('timesheetusers')->insert([
              'date'     =>    $date->format('Y-m-d'),
              'client_id'     =>    134,
              'workitem'     =>     $team->reasonleave,
              'location'     =>     '',
              //   'billable_status'     =>     $request->billable_status[$i],
              'timesheetid'     =>     $ids,
              'date'     =>    $date->format('Y-m-d'),
              'hour'     =>     0,
              'totalhour' =>      0,
              'assignment_id'     =>     214,
              'partner'     =>     887,
              // adding approver in patner section 
              // 'partner'     =>  $team->approver,
              'createdby' => $team->createdby,
              'created_at'          =>     date('Y-m-d H:i:s'),
              'updated_at'              =>    date('Y-m-d H:i:s'),
            ]);
          }

          $getholidays = DB::table('holidays')->where('startdate', '>=', $team->from)
            ->where('enddate', '<=', $team->to)->select('startdate')->get();

          if (count($getholidays) != 0) {
            foreach ($getholidays as $date) {
              $hdatess[] = date('Y-m-d', strtotime($date->startdate));
            }
          } else {
            $hdatess[] = 0;
          }


          $el_leave = array_diff($datess, $hdatess);
          $exam_leave_total = count(array_diff($datess, $hdatess));
          $lstatus = "EL";
          foreach ($el_leave as $cl_leave) {
            $cl_leave_day = date('d', strtotime($cl_leave));
            $cl_leave_month = date('F', strtotime($cl_leave));
            $cl_leave_year = date('Y', strtotime($cl_leave));

            // if ($cl_leave_day >= 26 && $cl_leave_day <= 31) {
            //   $cl_leave_month = date('F', strtotime($cl_leave . ' +1 month'));
            // }

            $attendances = DB::table('attendances')->where('employee_name', $team->createdby)
              ->where('month', $cl_leave_month)->first();

            if ($attendances == null) {
              DB::table('attendances')->insert([
                'employee_name' => $team->createdby,
                'month' => $cl_leave_month,
                'year' => $cl_leave_year,
                // 'dateofjoining' => $teammember->joining_date,
                'fulldate' => $cl_leave,
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s'),
              ]);
            }

            $attendances = DB::table('attendances')->where('employee_name', $team->createdby)
              ->where('month', $cl_leave_month)->first();
            $examleavecount = $attendances->exam_leave;
            $examleavecountupdate = $attendances->exam_leave += 1;

            $column = '';
            switch ($cl_leave_day) {
              case '26':
                $column = 'twentysix';
                break;
              case '27':
                $column = 'twentyseven';
                break;
              case '28':
                $column = 'twentyeight';
                break;
              case '29':
                $column = 'twentynine';
                break;
              case '30':
                $column = 'thirty';
                break;
              case '31':
                $column = 'thirtyone';
                break;
              case '01':
                $column = 'one';
                break;
              case '02':
                $column = 'two';
                break;
              case '03':
                $column = 'three';
                break;
              case '04':
                $column = 'four';
                break;
              case '05':
                $column = 'five';
                break;
              case '06':
                $column = 'six';
                break;
              case '07':
                $column = 'seven';
                break;
              case '08':
                $column = 'eight';
                break;
              case '09':
                $column = 'nine';
                break;
              case '10':
                $column = 'ten';
                break;
              case '11':
                $column = 'eleven';
                break;
              case '12':
                $column = 'twelve';
                break;
              case '13':
                $column = 'thirteen';
                break;
              case '14':
                $column = 'fourteen';
                break;
              case '15':
                $column = 'fifteen';
                break;
              case '16':
                $column = 'sixteen';
                break;
              case '17':
                $column = 'seventeen';
                break;
              case '18':
                $column = 'eighteen';
                break;
              case '19':
                $column = 'ninghteen';
                break;
              case '20':
                $column = 'twenty';
                break;
              case '21':
                $column = 'twentyone';
                break;
              case '22':
                $column = 'twentytwo';
                break;
              case '23':
                $column = 'twentythree';
                break;
              case '24':
                $column = 'twentyfour';
                break;
              case '25':
                $column = 'twentyfive';
                break;
            }

            if (!empty($column)) {
              DB::table('attendances')
                ->where('employee_name', $team->createdby)
                ->where('month', $cl_leave_month)
                // ->whereRaw("NOT ({$column} REGEXP '^-?[0-9]+$')")
                // ->whereRaw("{$column} != 'LWP'")
                // ->get();
                ->update([
                  $column => $lstatus,
                  'exam_leave' => $examleavecountupdate,
                ]);
            }
          }
          // dd('hi');
        }
        // exam Leave end
        if ($team->name == 'Sick Leave') {
          $to = Carbon::createFromFormat('Y-m-d', $team->to ?? '');
          $from = Carbon::createFromFormat('Y-m-d', $team->from);

          $requestdays = $to->diffInDays($from) + 1;
          // dd($requestdays);
          $holidaycount = DB::table('holidays')->where('startdate', '>=', $team->from)
            ->where('enddate', '<=', $team->to)
            ->count();
          // dd($holidaycount);
          $totalrqstday = $requestdays - $holidaycount;
          // dd($totalrqstday); die;

          DB::table('leaveapprove')->insert([
            'teammemberid'     =>     $team->createdby,
            'leavetype'     =>     $team->leavetype,
            'totaldays'     =>     $totalrqstday,
            'year'     =>     '2023',
            'created_at'          =>     date('y-m-d'),
            'updated_at'              =>    date('y-m-d'),
          ]);




          $period = CarbonPeriod::create($team->from, $team->to);
          $datess = [];
          foreach ($period as $date) {
            $datess[] = $date->format('Y-m-d');
          }


          $getholidays = DB::table('holidays')->where('startdate', '>=', $team->from)
            ->where('enddate', '<=', $team->to)->select('startdate')->get();

          if (count($getholidays) != 0) {
            foreach ($getholidays as $date) {
              $hdatess[] = date('Y-m-d', strtotime($date->startdate));
            }
          } else {
            $hdatess[] = 0;
          }
          $sl_leave = array_diff($datess, $hdatess);

          //  dd( $cl_leave );
          $sl_leave_total = count(array_diff($datess, $hdatess));

          $lstatus = "SL/A";




          $noofdaysaspertimesheet = DB::table('timesheets')
            ->where('created_by', auth()->user()->teammember_id)
            ->where('date', '>=', '2023-04-26')
            ->where('date', '<=', '2023-05-25')
            ->select('timesheets.*')
            ->first();
          // dd($noofdaysaspertimesheet );

          foreach ($sl_leave as $cl_leave) {




            $cl_leave_day = date('d', strtotime($cl_leave));
            $cl_leave_month = date('F', strtotime($cl_leave));

            if ($cl_leave_day >= 26 && $cl_leave_day <= 31) {
              $cl_leave_month = date('F', strtotime($cl_leave . ' +1 month'));
            }


            $attendances = DB::table('attendances')->where('employee_name', $team->createdby)
              ->where('month', $cl_leave_month)->first();

            $column = '';
            switch ($cl_leave_day) {
              case '26':
                $column = 'twentysix';
                break;
              case '27':
                $column = 'twentyseven';
                break;
              case '28':
                $column = 'twentyeight';
                break;
              case '29':
                $column = 'twentynine';
                break;
              case '30':
                $column = 'thirty';
                break;
              case '31':
                $column = 'thirtyone';
                break;
              case '01':
                $column = 'one';
                break;
              case '02':
                $column = 'two';
                break;
              case '03':
                $column = 'three';
                break;
              case '04':
                $column = 'four';
                break;
              case '05':
                $column = 'five';
                break;
              case '06':
                $column = 'six';
                break;
              case '07':
                $column = 'seven';
                break;
              case '08':
                $column = 'eight';
                break;
              case '09':
                $column = 'nine';
                break;
              case '10':
                $column = 'ten';
                break;
              case '11':
                $column = 'eleven';
                break;
              case '12':
                $column = 'twelve';
                break;
              case '13':
                $column = 'thirteen';
                break;
              case '14':
                $column = 'fourteen';
                break;
              case '15':
                $column = 'fifteen';
                break;
              case '16':
                $column = 'sixteen';
                break;
              case '17':
                $column = 'seventeen';
                break;
              case '18':
                $column = 'eighteen';
                break;
              case '19':
                $column = 'ninghteen';
                break;
              case '20':
                $column = 'twenty';
                break;
              case '21':
                $column = 'twentyone';
                break;
              case '22':
                $column = 'twentytwo';
                break;
              case '23':
                $column = 'twentythree';
                break;
              case '24':
                $column = 'twentyfour';
                break;
              case '25':
                $column = 'twentyfive';
                break;
            }

            if (!empty($column)) {

              DB::table('attendances')
                ->where('employee_name', $team->createdby)
                ->where('month', $cl_leave_month)
                ->whereRaw("NOT ({$column} REGEXP '^-?[0-9]+$')")
                ->whereRaw("{$column} != 'LWP'")
                ->update([
                  $column => $lstatus,
                ]);
            }
          }
        }
        // // dd($id);
        // $applyleaveteam = DB::table('leaveteams')
        //   ->leftjoin('teammembers', 'teammembers.id', 'leaveteams.teammember_id')
        //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        //   ->where('leaveteams.leave_id', $id)
        //   ->select('teammembers.emailid')->get();
        // //   dd($applyleaveteam);
        // if ($applyleaveteam != null) {
        //   foreach ($applyleaveteam as $applyleaveteammail) {
        //     $data = array(
        //       'emailid' =>  $applyleaveteammail->emailid,
        //       'team_member' =>  $team->team_member,
        //       'from' =>  $team->from,
        //       'to' =>  $team->to,
        //     );

        //     Mail::send('emails.applyleaveteam', $data, function ($msg) use ($data) {
        //       $msg->to($data['emailid']);
        //       $msg->subject('VSA Leave Approved');
        //     });
        //   }
        // }
        $data = array(
          'emailid' =>  $team->emailid,
          'id' =>  $id,
          'from' =>  $team->from,
          'to' =>  $team->to,
        );

        Mail::send('emails.applyleavestatus', $data, function ($msg) use ($data) {
          $msg->to($data['emailid']);
          // $msg->cc('priyankasharma@kgsomani.com');
          $msg->subject('VSA Leave Approved');
        });
      }

      if ($request->status == 2) {
        $team = DB::table('applyleaves')
          ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
          ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
          ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
          ->where('applyleaves.id', $id)
          ->select('applyleaves.*', 'teammembers.emailid', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->first();

        $data = array(
          'emailid' =>  $team->emailid,
          'id' =>  $id,
          'from' =>  $team->from,
          'to' =>  $team->to,
        );

        Mail::send('emails.applyleavereject', $data, function ($msg) use ($data) {
          $msg->to($data['emailid']);
          // $msg->cc('priyankasharma@kgsomani.com');
          $msg->subject('VSA Leave Reject');
        });

        $period = CarbonPeriod::create($team->from, $team->to);
        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
          DB::table('timesheets')->where('date', $date->format('Y-m-d'))
            ->where('created_by', $team->createdby)->delete();
          DB::table('timesheetusers')->where('createdby', $team->createdby)
            ->where('date', $date->format('Y-m-d'))->delete();
        }

        $getholidays = DB::table('holidays')->where('startdate', '>=', $team->from)
          ->where('enddate', '<=', $team->to)->select('startdate')->get();

        if (count($getholidays) != 0) {
          foreach ($getholidays as $date) {
            $hdatess[] = date('Y-m-d', strtotime($date->startdate));
          }
        } else {
          $hdatess[] = 0;
        }

        $leave = array_diff($datess, $hdatess);
        $leave_total = count(array_diff($datess, $hdatess));
        $lstatus = NULL;

        foreach ($leave as $cl_leave) {
          $cl_leave_day = date('d', strtotime($cl_leave));
          $cl_leave_month = date('F', strtotime($cl_leave));

          if ($cl_leave_day >= 26 && $cl_leave_day <= 31) {
            $cl_leave_month = date('F', strtotime($cl_leave . ' +1 month'));
          }

          $attendances = DB::table('attendances')->where('employee_name', $team->createdby)
            ->where('month', $cl_leave_month)->first();

          $column = '';
          switch ($cl_leave_day) {
            case '26':
              $column = 'twentysix';
              break;
            case '27':
              $column = 'twentyseven';
              break;
            case '28':
              $column = 'twentyeight';
              break;
            case '29':
              $column = 'twentynine';
              break;
            case '30':
              $column = 'thirty';
              break;
            case '31':
              $column = 'thirtyone';
              break;
            case '01':
              $column = 'one';
              break;
            case '02':
              $column = 'two';
              break;
            case '03':
              $column = 'three';
              break;
            case '04':
              $column = 'four';
              break;
            case '05':
              $column = 'five';
              break;
            case '06':
              $column = 'six';
              break;
            case '07':
              $column = 'seven';
              break;
            case '08':
              $column = 'eight';
              break;
            case '09':
              $column = 'nine';
              break;
            case '10':
              $column = 'ten';
              break;
            case '11':
              $column = 'eleven';
              break;
            case '12':
              $column = 'twelve';
              break;
            case '13':
              $column = 'thirteen';
              break;
            case '14':
              $column = 'fourteen';
              break;
            case '15':
              $column = 'fifteen';
              break;
            case '16':
              $column = 'sixteen';
              break;
            case '17':
              $column = 'seventeen';
              break;
            case '18':
              $column = 'eighteen';
              break;
            case '19':
              $column = 'ninghteen';
              break;
            case '20':
              $column = 'twenty';
              break;
            case '21':
              $column = 'twentyone';
              break;
            case '22':
              $column = 'twentytwo';
              break;
            case '23':
              $column = 'twentythree';
              break;
            case '24':
              $column = 'twentyfour';
              break;
            case '25':
              $column = 'twentyfive';
              break;
          }

          // if (!empty($column)) {
          //   $columnValue = DB::table('attendances')
          //     ->where('employee_name', $team->createdby)
          //     ->where('month', $cl_leave_month)
          //     ->whereRaw("NOT ({$column} REGEXP '^-?[0-9]+$')")
          //     ->value($column);

          //   if ($columnValue == "SL/C" || $columnValue == "SL/A") {
          //     DB::table('attendances')
          //       ->where('employee_name', $team->createdby)
          //       ->where('month', $cl_leave_month)
          //       ->decrement('sick_leave');
          //   }

          //   if ($columnValue == "EL/C" || $columnValue == "EL/A") {
          //     DB::table('attendances')
          //       ->where('employee_name', $team->createdby)
          //       ->where('month', $cl_leave_month)
          //       ->decrement('exam_leave');
          //   }
          //   if ($columnValue == "BL/C" || $columnValue == "BL/A") {
          //     DB::table('attendances')
          //       ->where('employee_name', $team->createdby)
          //       ->where('month', $cl_leave_month)
          //       ->decrement('birthday_religious');
          //   }
          //   if ($columnValue == "LWP") {
          //     DB::table('attendances')
          //       ->where('employee_name', $team->createdby)
          //       ->where('month', $cl_leave_month)
          //       ->decrement('LWP');
          //   }
          //   DB::table('attendances')
          //     ->where('employee_name', $team->createdby)
          //     ->where('month', $cl_leave_month)
          //     ->whereRaw("NOT ({$column} REGEXP '^-?[0-9]+$')")
          //     ->update([
          //       $column => $lstatus
          //     ]);
          // }

        }
      }
      $data = $request->except(['_token', 'teammember_id']);
      $data['updatedby'] = auth()->user()->teammember_id;
      Applyleave::find($id)->update($data);
      $output = array('msg' => 'Updated Successfully');
      return redirect('applyleave')->with('success', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



   public function examleaverequest(Request $request, $id)
  {
    try {
      // start exam leave 
      if ($request->status == 1) {
        $team = DB::table('leaverequest')
          ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
          ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
          ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
          ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
          ->where('leaverequest.id', $id)
          ->select('applyleaves.*', 'teammembers.emailid', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name', 'leavetypes.holiday', 'leaverequest.id as examrequestId', 'leaverequest.from_date')
          ->first();

        // dd($id);
        if ($team->name == 'Exam Leave') {
          $from = Carbon::createFromFormat('Y-m-d', $team->from);
          $to = Carbon::createFromFormat('Y-m-d', $team->to ?? '');
          // came during exam leave
          $camefromexam = Carbon::createFromFormat('Y-m-d', $team->from_date);

          $removedays = $to->diffInDays($camefromexam) + 1;

          $nowtotalleave = $from->diffInDays($camefromexam);
          // it si only serching data from dtabase 
          $finddatafromleaverequest = $to->diffInDays($from) + 1;

          // Update date in to  column in applyleaves table 
          $updatedcamedate = $camefromexam->copy()->subDay()->format('Y-m-d');

          // dd($updatedcamedate);
          if ($nowtotalleave == 0) {
            DB::table('applyleaves')
              ->where('from', $team->from)
              ->where('to', $team->to)
              ->where('createdby', $team->createdby)
              ->delete();

            DB::table('leaverequest')
              ->where('id', $team->examrequestId)
              ->delete();

            DB::table('leaveapprove')
              ->where('teammemberid', $team->createdby)
              ->where('totaldays', $finddatafromleaverequest)
              ->latest()
              ->delete();
          } else {
            DB::table('applyleaves')
              ->where('from', $team->from)
              ->where('to', $team->to)
              ->where('createdby', $team->createdby)
              ->update([
                'to' => $updatedcamedate,
              ]);

            // for approved
            DB::table('leaverequest')
              ->where('id', $team->examrequestId)
              ->update([
                'status' => 1,
              ]);

            // update total leave after came during exam
            DB::table('leaveapprove')
              ->where('teammemberid', $team->createdby)
              ->where('totaldays', $finddatafromleaverequest)
              ->latest()
              ->update([
                'totaldays' => $nowtotalleave,
                'updated_at' => now(),
              ]);
          }
          // get date
          $period = CarbonPeriod::create($team->from_date, $team->to);

          $datess = [];
          foreach ($period as $date) {
            $datess[] = $date->format('Y-m-d');

            $deletedIds = DB::table('timesheets')
              ->where('created_by', $team->createdby)
              ->whereIn('date', $datess)
              ->pluck('id');

            DB::table('timesheets')
              ->where('created_by', $team->createdby)
              ->whereIn('date', $datess)
              ->delete();

            $a = DB::table('timesheetusers')
              ->whereIn('timesheetid', $deletedIds)
              ->delete();
          }

          // Attendance code start hare 
          $el_leave = $datess;
          $lstatus = null;

          foreach ($el_leave as $cl_leave) {
            $cl_leave_day = date('d', strtotime($cl_leave));
            $cl_leave_month = date('F', strtotime($cl_leave));

            // if ($cl_leave_day >= 26 && $cl_leave_day <= 31) {
            //   $cl_leave_month = date('F', strtotime($cl_leave . ' +1 month'));
            // }

            $attendances = DB::table('attendances')->where('employee_name', $team->createdby)
              ->where('month', $cl_leave_month)->first();
            $examleavecount = $attendances->exam_leave;
            $examleavecountupdate = $attendances->exam_leave -= 1;

            $column = '';
            switch ($cl_leave_day) {
              case '26':
                $column = 'twentysix';
                break;
              case '27':
                $column = 'twentyseven';
                break;
              case '28':
                $column = 'twentyeight';
                break;
              case '29':
                $column = 'twentynine';
                break;
              case '30':
                $column = 'thirty';
                break;
              case '31':
                $column = 'thirtyone';
                break;
              case '01':
                $column = 'one';
                break;
              case '02':
                $column = 'two';
                break;
              case '03':
                $column = 'three';
                break;
              case '04':
                $column = 'four';
                break;
              case '05':
                $column = 'five';
                break;
              case '06':
                $column = 'six';
                break;
              case '07':
                $column = 'seven';
                break;
              case '08':
                $column = 'eight';
                break;
              case '09':
                $column = 'nine';
                break;
              case '10':
                $column = 'ten';
                break;
              case '11':
                $column = 'eleven';
                break;
              case '12':
                $column = 'twelve';
                break;
              case '13':
                $column = 'thirteen';
                break;
              case '14':
                $column = 'fourteen';
                break;
              case '15':
                $column = 'fifteen';
                break;
              case '16':
                $column = 'sixteen';
                break;
              case '17':
                $column = 'seventeen';
                break;
              case '18':
                $column = 'eighteen';
                break;
              case '19':
                $column = 'ninghteen';
                break;
              case '20':
                $column = 'twenty';
                break;
              case '21':
                $column = 'twentyone';
                break;
              case '22':
                $column = 'twentytwo';
                break;
              case '23':
                $column = 'twentythree';
                break;
              case '24':
                $column = 'twentyfour';
                break;
              case '25':
                $column = 'twentyfive';
                break;
            }

            if (!empty($column)) {
              if ($nowtotalleave == 0) {
                DB::table('attendances')
                  ->where('employee_name', $team->createdby)
                  ->where('month', $cl_leave_month)
                  ->update([
                    $column => $lstatus,
                    'exam_leave' => $examleavecountupdate,
                  ]);
              } else {
                DB::table('attendances')
                  ->where('employee_name', $team->createdby)
                  ->where('month', $cl_leave_month)
                  ->update([
                    $column => $lstatus,
                    'exam_leave' => $examleavecountupdate,
                  ]);
              }
            }
          }
          // Attendance code start hare 
        }
        if ($team->name == 'Casual Leave') {
          $from = Carbon::createFromFormat('Y-m-d', $team->from);
          $to = Carbon::createFromFormat('Y-m-d', $team->to ?? '');
          // came during exam leave
          $camefromexam = Carbon::createFromFormat('Y-m-d', $team->from_date);

          $removedays = $to->diffInDays($camefromexam) + 1;

          $nowtotalleave = $from->diffInDays($camefromexam);
          // it si only serching data from dtabase 
          $finddatafromleaverequest = $to->diffInDays($from) + 1;

          // Update date in to  column in applyleaves table 
          $updatedcamedate = $camefromexam->copy()->subDay()->format('Y-m-d');
          // $updatedcamedate = $camefromexam->copy()->format('Y-m-d');
          if ($nowtotalleave == 0) {
            DB::table('applyleaves')
              ->where('from', $team->from)
              ->where('to', $team->to)
              ->where('createdby', $team->createdby)
              ->delete();

            DB::table('leaverequest')
              ->where('id', $team->examrequestId)
              ->delete();

            DB::table('leaveapprove')
              ->where('teammemberid', $team->createdby)
              ->where('totaldays', $finddatafromleaverequest)
              ->latest()
              ->delete();
          } else {
            DB::table('applyleaves')
              ->where('from', $team->from)
              ->where('to', $team->to)
              ->where('createdby', $team->createdby)
              ->update([
                'to' => $updatedcamedate,
              ]);

            // DB::table('applyleaves')
            // ->where('id', $team->id)
            // ->update([
            //   'to' => $team->from_date,
            // ]);


            // for approved
            DB::table('leaverequest')
              ->where('id', $team->examrequestId)
              ->update([
                'status' => 1,
              ]);

            // update total leave after came during exam
            DB::table('leaveapprove')
              ->where('teammemberid', $team->createdby)
              ->where('totaldays', $finddatafromleaverequest)
              ->latest()
              ->update([
                'totaldays' => $nowtotalleave,
                'updated_at' => now(),
              ]);
          }
          // get date
          $period = CarbonPeriod::create($team->from_date, $team->to);

          $datess = [];
          foreach ($period as $date) {
            $datess[] = $date->format('Y-m-d');

            $deletedIds = DB::table('timesheets')
              ->where('created_by', $team->createdby)
              ->whereIn('date', $datess)
              ->pluck('id');

            DB::table('timesheets')
              ->where('created_by', $team->createdby)
              ->whereIn('date', $datess)
              ->delete();

            $a = DB::table('timesheetusers')
              ->whereIn('timesheetid', $deletedIds)
              ->delete();
          }
          // Attendance code start hare 
          $el_leave = $datess;
          $lstatus = null;

          foreach ($el_leave as $cl_leave) {
            $cl_leave_day = date('d', strtotime($cl_leave));
            $cl_leave_month = date('F', strtotime($cl_leave));

            $attendances = DB::table('attendances')->where('employee_name', $team->createdby)
              ->where('month', $cl_leave_month)->first();

            $casulaleavecount = $attendances->casual_leave;
            $casualleavecountupdate = $attendances->casual_leave -= 1;


            $column = '';
            switch ($cl_leave_day) {
              case '26':
                $column = 'twentysix';
                break;
              case '27':
                $column = 'twentyseven';
                break;
              case '28':
                $column = 'twentyeight';
                break;
              case '29':
                $column = 'twentynine';
                break;
              case '30':
                $column = 'thirty';
                break;
              case '31':
                $column = 'thirtyone';
                break;
              case '01':
                $column = 'one';
                break;
              case '02':
                $column = 'two';
                break;
              case '03':
                $column = 'three';
                break;
              case '04':
                $column = 'four';
                break;
              case '05':
                $column = 'five';
                break;
              case '06':
                $column = 'six';
                break;
              case '07':
                $column = 'seven';
                break;
              case '08':
                $column = 'eight';
                break;
              case '09':
                $column = 'nine';
                break;
              case '10':
                $column = 'ten';
                break;
              case '11':
                $column = 'eleven';
                break;
              case '12':
                $column = 'twelve';
                break;
              case '13':
                $column = 'thirteen';
                break;
              case '14':
                $column = 'fourteen';
                break;
              case '15':
                $column = 'fifteen';
                break;
              case '16':
                $column = 'sixteen';
                break;
              case '17':
                $column = 'seventeen';
                break;
              case '18':
                $column = 'eighteen';
                break;
              case '19':
                $column = 'ninghteen';
                break;
              case '20':
                $column = 'twenty';
                break;
              case '21':
                $column = 'twentyone';
                break;
              case '22':
                $column = 'twentytwo';
                break;
              case '23':
                $column = 'twentythree';
                break;
              case '24':
                $column = 'twentyfour';
                break;
              case '25':
                $column = 'twentyfive';
                break;
            }
            // if (!empty($column)) {
            //   if ($nowtotalleave == 0) {
            //     DB::table('attendances')
            //       ->where('employee_name', $team->createdby)
            //       ->where('month', $cl_leave_month)
            //       ->update([
            //         $column => $lstatus,
            //         'casual_leave' => $casualleavecountupdate,
            //       ]);
            //   } else {

            //     DB::table('attendances')
            //       ->where('employee_name', $team->createdby)
            //       ->where('month', $cl_leave_month)
            //       ->update([
            //         $column => $lstatus,
            //         'casual_leave' => $casualleavecountupdate,
            //       ]);
            //   }
            // }
          }
          // Attendance code end hare 
        }
        // pxpx

        // For approving mail
        // $applyleaveteam = DB::table('leaverequest')
        //   ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        //   ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        //   ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        //   ->where('leaverequest.id', $id)
        //   ->select('applyleaves.*', 'teammembers.emailid', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name', 'leavetypes.holiday', 'leaverequest.id as examrequestId', 'leaverequest.from_date')
        //   ->get();

        // if ($applyleaveteam != null) {
        //   foreach ($applyleaveteam as $applyleaveteammail) {
        //     $data = array(
        //       'emailid' =>  $applyleaveteammail->emailid,
        //       'team_member' =>  $team->team_member,
        //       'from' =>  $team->from,
        //       'to' =>  $team->to,
        //     );

        //     Mail::send('emails.applyleaveteam', $data, function ($msg) use ($data) {
        //       $msg->to($data['emailid']);
        //       $msg->subject('VSA Leave Approved');
        //     });
        //   }
        // }
        $data = array(
          'emailid' =>  $team->emailid,
          'id' =>  $id,
          'from' =>  $team->from,
          'to' =>  $team->to,
        );
        // Exam Leave mail
        if ($team->name == 'Exam Leave') {
          Mail::send('emails.duringexamleavestatus', $data, function ($msg) use ($data) {
            $msg->to($data['emailid']);
            $msg->subject('VSA Exam Leave request Approved');
          });
        }
        // Casual leave mail
        else {
          Mail::send('emails.duringexamleavestatus', $data, function ($msg) use ($data) {
            $msg->to($data['emailid']);
            $msg->subject('VSA Casual leave request Approved');
          });
        }
      }
      if ($request->status == 2) {
        $team = DB::table('leaverequest')
          ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
          ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
          ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
          ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
          ->where('leaverequest.id', $id)
          ->select('applyleaves.*', 'teammembers.emailid', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name', 'leavetypes.holiday', 'leaverequest.id as examrequestId', 'leaverequest.from_date')
          ->first();

        DB::table('leaverequest')
          ->where('id', $team->examrequestId)
          ->update([
            'status' => 2,
          ]);

        $data = array(
          'emailid' =>  $team->emailid,
          'id' =>  $id,
          'from' =>  $team->from,
          'to' =>  $team->to,
        );

        // Exam Leave mail
        if ($team->name == 'Exam Leave') {
          Mail::send('emails.duringexamleavereject', $data, function ($msg) use ($data) {
            $msg->to($data['emailid']);
            // $msg->cc('priyankasharma@kgsomani.com');
            $msg->subject('VSA Exam Leave Request Reject');
          });
        }
        // Casual leave mail
        else {
          Mail::send('emails.duringexamleavereject', $data, function ($msg) use ($data) {
            $msg->to($data['emailid']);
            // $msg->cc('priyankasharma@kgsomani.com');
            $msg->subject('VSA Casual leave Request Reject');
          });
        }
      }

      $output = array('msg' => 'Updated Successfully');
      return redirect('examleaverequestlist')->with('success', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

   // after attendance 
  public function  timesheetreject($id)
  {

    try {
      $timesheetdata = DB::table('timesheetusers')->where('id', $id)->first();
      DB::table('timesheets')->where('id', $timesheetdata->timesheetid)->update([
        'status'   => 2,
      ]);
      DB::table('timesheetusers')->where('id', $id)->update([
        'status'   => 2,
        'rejectedby'   =>   auth()->user()->teammember_id,

      ]);
      // timesheet rejected mail
      $data = DB::table('teammembers')
        ->leftjoin('timesheetusers', 'timesheetusers.createdby', 'teammembers.id')
        ->where('timesheetusers.id', $id)
        ->first();

      $emailData = [
        'emailid' => $data->emailid,
        'teammember_name' => $data->team_member,
      ];

      Mail::send('emails.timesheetrejected', $emailData, function ($msg) use ($emailData) {
        $msg->to([$emailData['emailid']]);
        $msg->subject('Timesheet rejected');
      });
      // timesheet rejected mail end hare

      // Attendance code start hare 
      $hdatess = Carbon::parse($timesheetdata->date)->format('Y-m-d');
      $day = Carbon::parse($hdatess)->format('d');
      $month = Carbon::parse($hdatess)->format('F');
      $yeardata = Carbon::parse($hdatess)->format('Y');

      $dates = [
        '01' => 'one',
        '02' => 'two',
        '03' => 'three',
        '04' => 'four',
        '05' => 'five',
        '06' => 'six',
        '07' => 'seven',
        '08' => 'eight',
        '09' => 'nine',
        '10' => 'ten',
        '11' => 'eleven',
        '12' => 'twelve',
        '13' => 'thirteen',
        '14' => 'fourteen',
        '15' => 'fifteen',
        '16' => 'sixteen',
        '17' => 'seventeen',
        '18' => 'eighteen',
        '19' => 'ninghteen',
        '20' => 'twenty',
        '21' => 'twentyone',
        '22' => 'twentytwo',
        '23' => 'twentythree',
        '24' => 'twentyfour',
        '25' => 'twentyfive',
        '26' => 'twentysix',
        '27' => 'twentyseven',
        '28' => 'twentyeight',
        '29' => 'twentynine',
        '30' => 'thirty',
        '31' => 'thirtyone',
      ];
      $column = $dates[$day];

      // check attendenace record exist or not 
      $attendances = DB::table('attendances')
        ->where('employee_name', $timesheetdata->createdby)
        ->where('month', $month)
        ->first();

      if ($attendances != null) {
        if (property_exists($attendances, $column)) {
          $checkwording = DB::table('attendances')
            ->where('id', $attendances->id)
            ->value($column);

          $updatewording = 'R';

          // Get which column want to update 
          $totalCountmapping = [
            'P' => 'no_of_days_present',
            'CL' => 'casual_leave',
            'EL' => 'exam_leave',
            'T' => 'travel',
            'OH' => 'offholidays',
            'W' => 'sundaycount',
            'H' => 'holidays'
          ];

          if (isset($totalCountmapping[$checkwording])) {
            // Get Total count column name 
            $totalcountColumn = $totalCountmapping[$checkwording];
            // Get value and - 1 valve
            $totalcountupdate = $attendances->$totalcountColumn - 1;
            // Update the attendance record
            DB::table('attendances')
              ->where('id', $attendances->id)
              ->update([
                $column => $updatewording,
                $totalcountColumn => $totalcountupdate,
              ]);
          }
        }
      }
      // Attendance code end hare 
      $output = array('msg' => 'Rejected Successfully');
      return back()->with('statuss', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }
  




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

   // after attendance
  public function timesheeteditstore(Request $request)
  {

    $oldtimesheetsubmiteddata = DB::table('timesheetusers')
      ->where('timesheetid', $request->timesheetid)
      ->where('createdby', $request->createdby) // Assuming you are storing user ID
      ->get();

    // Calculate the total hours from previously submitted timesheets (status = 1)
    $SubmittedTimesheetHours = $oldtimesheetsubmiteddata->whereIn('status', [1, 3])->sum('hour');

    // Get the new rejected hours from the request
    $RejectedTimesheetHours = $request->input('hour');

    // Cast rejected hours to integer to ensure it's a numeric value
    $RejectedTimesheetHours = (int)$RejectedTimesheetHours;

    // Calculate the total hours by adding both submitted and rejected hours
    $totalHours = $SubmittedTimesheetHours + $RejectedTimesheetHours;
    // dd($totalHours);


    // Check if the total hours exceed the limit of 12
    if (!is_numeric($totalHours) || $totalHours > 12) {

      $output = ['msg' => 'The total hours cannot be greater than 12'];
      return redirect('timesheetreject/edit/' . $request->timesheetid)->with('statuss', $output);
    }


    if (!is_numeric($request->assignment_id)) {
      $assignment = Assignmentmapping::where('assignmentgenerate_id', $request->assignment_id)
        ->select('assignment_id')
        ->first();
      // ->toArray();
      // $assignment_id = $assignment[0]['assignment_id'];
      $assignment_id = $assignment->assignment_id;
      $assignmentgenerateId = $request->assignment_id;
      $oldtimesheetdata = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      // update total hour 

      if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {

        $gettotalteamhour = DB::table('assignmentmappings')
          ->leftJoin(
            'assignmentteammappings',
            'assignmentteammappings.assignmentmapping_id',
            'assignmentmappings.id',
          )
          ->where(
            'assignmentmappings.assignmentgenerate_id',
            $oldtimesheetdata->assignmentgenerate_id
          )
          ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
          ->select('assignmentteammappings.*')
          ->first();



        $gettotalteamhournew = DB::table('assignmentmappings')
          ->leftJoin(
            'assignmentteammappings',
            'assignmentteammappings.assignmentmapping_id',
            'assignmentmappings.id',
          )
          ->where(
            'assignmentmappings.assignmentgenerate_id',
            $request->assignment_id
          )
          ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
          ->select('assignmentteammappings.*')
          ->first();




        if ($gettotalteamhour) {
          if ($gettotalteamhour->teamhour == null) {
            $gettotalteamhour->teamhour = 0;
          }
          $finalresult =  $gettotalteamhour->teamhour - $request->hour;
          $totalteamhourupdate = DB::table('assignmentteammappings')
            ->where('id', $gettotalteamhour->id)
            // ->get();
            ->update(['teamhour' =>  $finalresult]);
        }
        if ($gettotalteamhournew) {
          if ($gettotalteamhournew->teamhour == null) {
            $gettotalteamhournew->teamhour = 0;
          }
          $finalresult =  $gettotalteamhournew->teamhour + $request->hour;
          $totalteamhourupdate = DB::table('assignmentteammappings')
            ->where('id', $gettotalteamhournew->id)
            // ->get();
            ->update(['teamhour' =>  $finalresult]);
        }
      }

      if (auth()->user()->role_id == 13) {
        $assignmentdata = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $assignmentgenerateId)
          ->first();
        $assignmentdataold = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $oldtimesheetdata->assignmentgenerate_id)
          ->first();

        // old assignment hour subtract 
        if ($assignmentdataold->leadpartner == auth()->user()->teammember_id) {
          if ($assignmentdataold->leadpartnerhour == null) {
            $assignmentdataold->leadpartnerhour = 0;
          }
          $finalresultleadpatner =  $assignmentdataold->leadpartnerhour + $oldtimesheetdata->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdataold->id)
            // ->get();
            ->update(['leadpartnerhour' => $finalresultleadpatner]);
        }
        if ($assignmentdataold->otherpartner == auth()->user()->teammember_id) {
          if ($assignmentdataold->otherpartnerhour == null) {
            $assignmentdataold->otherpartnerhour = 0;
          }
          $finalresultotherpatner =  $assignmentdataold->otherpartnerhour - $oldtimesheetdata->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdataold->id)
            // ->get();
            ->update(['otherpartnerhour' => $finalresultotherpatner]);
        }

        // new assignment hour add
        if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
          if ($assignmentdata->leadpartnerhour == null) {
            $assignmentdata->leadpartnerhour = 0;
          }
          $finalresultleadpatner =  $assignmentdata->leadpartnerhour + $request->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdata->id)
            // ->get();
            ->update(['leadpartnerhour' => $finalresultleadpatner]);
        }
        if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
          if ($assignmentdata->otherpartnerhour == null) {
            $assignmentdata->otherpartnerhour = 0;
          }
          $finalresultotherpatner =  $assignmentdata->otherpartnerhour + $request->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdata->id)
            // ->get();
            ->update(['otherpartnerhour' => $finalresultotherpatner]);
        }
      }
    }

    if (is_numeric($request->assignment_id)) {
      $assignment_id = $request->assignment_id;
      $getassignmentgenerateId = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      $assignmentgenerateId = $getassignmentgenerateId->assignmentgenerate_id;

      $oldtimesheetdata = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      // update total hour 
      if ($oldtimesheetdata->hour != $request->hour) {
        if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
          $gettotalteamhour = DB::table('assignmentmappings')
            ->leftJoin(
              'assignmentteammappings',
              'assignmentteammappings.assignmentmapping_id',
              'assignmentmappings.id',
            )
            ->where(
              'assignmentmappings.assignmentgenerate_id',
              $oldtimesheetdata->assignmentgenerate_id
            )
            ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->select('assignmentteammappings.*')
            ->first();
          if ($gettotalteamhour) {
            $totalteamhour = $gettotalteamhour->teamhour;
            $subtractoldhour =  $totalteamhour - $oldtimesheetdata->hour;
            $finalresult =  $subtractoldhour + $request->hour;

            $totalteamhourupdate = DB::table('assignmentteammappings')
              ->where('id', $gettotalteamhour->id)
              // ->get();
              ->update(['teamhour' =>  $finalresult]);
          }
        }
        if (auth()->user()->role_id == 13) {
          $assignmentdata = DB::table('assignmentmappings')
            ->where('assignmentgenerate_id', $oldtimesheetdata->assignmentgenerate_id)
            ->first();

          if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
            $subtractoldhour =  $assignmentdata->leadpartnerhour - $oldtimesheetdata->hour;
            $finalresultleadpatner =  $subtractoldhour + $request->hour;
            $totalteamhourupdate = DB::table('assignmentmappings')
              ->where('id', $assignmentdata->id)
              // ->get();
              ->update(['leadpartnerhour' => $finalresultleadpatner]);
          }
          if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
            $subtractoldhour =  $assignmentdata->otherpartnerhour - $oldtimesheetdata->hour;
            $finalresultotherpatner =  $subtractoldhour + $request->hour;

            $totalteamhourupdate = DB::table('assignmentmappings')
              ->where('id', $assignmentdata->id)
              // ->get();
              ->update(['otherpartnerhour' => $finalresultotherpatner]);
          }
        }
      }
    }

    try {
      $timesheetdataupdate = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();

      // dd($assignmentgenerateId);
      DB::table('timesheets')->where('id', $timesheetdataupdate->timesheetid)->update([
        'status'   =>   3,
      ]);

      DB::table('timesheetusers')->where('id', $request->timesheetusersid)->update([
        'status'   =>   3,
        'client_id'   =>  $request->client_id,
        'assignmentgenerate_id'   =>  $assignmentgenerateId,
        'assignment_id'   =>   $assignment_id,
        'partner'   =>  $request->partner,
        'workitem'   =>   $request->workitem,
        'createdby'   =>   $request->createdby,
        'location'   =>   $request->location,
        'hour'   =>   $request->hour,
      ]);

      // Attendance code start hare 
      $hdatess = Carbon::parse($request->date)->format('Y-m-d');
      $day = Carbon::parse($hdatess)->format('d');
      $month = Carbon::parse($hdatess)->format('F');
      $yeardata = Carbon::parse($hdatess)->format('Y');

      $dates = [
        '01' => 'one',
        '02' => 'two',
        '03' => 'three',
        '04' => 'four',
        '05' => 'five',
        '06' => 'six',
        '07' => 'seven',
        '08' => 'eight',
        '09' => 'nine',
        '10' => 'ten',
        '11' => 'eleven',
        '12' => 'twelve',
        '13' => 'thirteen',
        '14' => 'fourteen',
        '15' => 'fifteen',
        '16' => 'sixteen',
        '17' => 'seventeen',
        '18' => 'eighteen',
        '19' => 'ninghteen',
        '20' => 'twenty',
        '21' => 'twentyone',
        '22' => 'twentytwo',
        '23' => 'twentythree',
        '24' => 'twentyfour',
        '25' => 'twentyfive',
        '26' => 'twentysix',
        '27' => 'twentyseven',
        '28' => 'twentyeight',
        '29' => 'twentynine',
        '30' => 'thirty',
        '31' => 'thirtyone',
      ];

      $column = $dates[$day];

      // check attendenace record exist or not 
      $attendances = DB::table('attendances')
        ->where('employee_name', $request->createdby)
        ->where('month', $month)
        ->first();


      if ($attendances && property_exists($attendances, $column)) {
        $checkwording = DB::table('attendances')
          ->where('id', $attendances->id)
          ->value($column);

        if ($checkwording == 'R') {
          $client = $request->client_id;
          // $assignmentid = $request->assignment_id;
          if (is_numeric($request->assignment_id)) {
            $assignmentid = $request->assignment_id;
          } else {
            $assignmentid = $assignment_id;
          }

          // Determine update wording based on client and assignment conditions
          // $updatewording = match (true) {
          //   // Travel
          //   $client == 32 => 'T',
          //   // Off holidays
          //   $client == 33 && str_replace(['1st ', '2nd ', '3rd ', '4th ', '5th '], '', $request->workitem) == 'Saturday' => 'OH',
          //   // Other holidays from calendar
          //   $client == 33 => 'H',
          //   // Casual leave
          //   $client == 134 && $assignmentid == 215 => 'CL',
          //   // Exam leave
          //   $client == 134 && $assignmentid == 214 => 'EL',
          //     // Default presence
          //   default => 'P',
          // };


          if ($client == 32) {
            $updatewording = 'T'; // Travel
          } elseif ($client == 33 && str_replace(['1st ', '2nd ', '3rd ', '4th ', '5th '], '', $request->workitem) == 'Saturday') {
            $updatewording = 'OH'; // Off holidays
          } elseif ($client == 33) {
            $updatewording = 'H'; // Other holidays from calendar
          } elseif ($client == 134 && $assignmentid == 215) {
            $updatewording = 'CL'; // Casual leave
          } elseif ($client == 134 && $assignmentid == 214) {
            $updatewording = 'EL'; // Exam leave
          } else {
            $updatewording = 'P'; // Default presence
          }

          // Mapping for total count columns
          $totalCountMapping = [
            'P' => 'no_of_days_present',
            'CL' => 'casual_leave',
            'EL' => 'exam_leave',
            'T' => 'travel',
            'OH' => 'offholidays',
            'W' => 'sundaycount',
            'H' => 'holidays'
          ];

          // Update the total count and attendance record if applicable
          if (isset($totalCountMapping[$updatewording])) {
            $totalcountColumn = $totalCountMapping[$updatewording];
            $totalcountupdate = $attendances->$totalcountColumn + 1;
            DB::table('attendances')
              ->where('id', $attendances->id)
              ->update([
                $column => $updatewording,
                $totalcountColumn => $totalcountupdate,
              ]);
          }
        }
      }

      // dd('updated', 1);
      // Attendance code end hare 

      if ($request->status == 2) {
        DB::table('timesheetupdatelogs')->insert([
          'timesheetusers_id'   =>  $request->timesheetusersid,
          'status'   =>   3,
          'created_at' => now(),
          'updated_at' => now(),
        ]);
      }
      $output = array('msg' => 'Updated Successfully');
      // return back()->with('statuss', $output);
      return redirect()->to('rejectedlist')->with('statuss', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php


      public function update(Request $request, $id)
    {
        $request->validate([
            'team_member' => "required"
        ]);

        try {

            if ($request->leavingdate != null) {
                if ($request->rejoining_date == null) {
                    $timesheetsave = DB::table('timesheetusers')
                        ->where('createdby', $id)
                        ->where('status', 0)
                        ->orderBy('date', 'ASC')
                        ->get();
                    // dd($timesheetsave, 31);

                    // Chunk the $timesheetsave data for one week
                    $weeksData = $timesheetsave->chunk(6);
                    foreach ($weeksData as $weekData) {

                        foreach ($weekData as $timesheet) {
                            $startdate = Carbon::parse($timesheet->date);
                            $nextSaturday = $startdate->copy()->next(Carbon::SATURDAY);

                            $startdateformat = $startdate->format('Y-m-d');
                            $nextSaturdayformat = $nextSaturday->format('Y-m-d');

                            DB::table('timesheetusers')
                                ->where('timesheetid', $timesheet->timesheetid)
                                ->update([
                                    'status' => 1,
                                    'updated_at' => now(),
                                ]);

                            DB::table('timesheets')
                                ->where('id', $timesheet->timesheetid)
                                ->update([
                                    'status' => 1,
                                    'updated_at' => now(),
                                ]);

                            // Attendance code start hare 
                            $hdatess = Carbon::parse($timesheet->date)->format('Y-m-d');
                            $day = Carbon::parse($hdatess)->format('d');
                            $month = Carbon::parse($hdatess)->format('F');
                            $yeardata = Carbon::parse($hdatess)->format('Y');

                            $dates = [
                                '01' => 'one',
                                '02' => 'two',
                                '03' => 'three',
                                '04' => 'four',
                                '05' => 'five',
                                '06' => 'six',
                                '07' => 'seven',
                                '08' => 'eight',
                                '09' => 'nine',
                                '10' => 'ten',
                                '11' => 'eleven',
                                '12' => 'twelve',
                                '13' => 'thirteen',
                                '14' => 'fourteen',
                                '15' => 'fifteen',
                                '16' => 'sixteen',
                                '17' => 'seventeen',
                                '18' => 'eighteen',
                                '19' => 'ninghteen',
                                '20' => 'twenty',
                                '21' => 'twentyone',
                                '22' => 'twentytwo',
                                '23' => 'twentythree',
                                '24' => 'twentyfour',
                                '25' => 'twentyfive',
                                '26' => 'twentysix',
                                '27' => 'twentyseven',
                                '28' => 'twentyeight',
                                '29' => 'twentynine',
                                '30' => 'thirty',
                                '31' => 'thirtyone',
                            ];

                            $column = $dates[$day];

                            // check attendenace record exist or not 
                            $attendances = DB::table('attendances')
                                ->where('employee_name', $timesheet->createdby)
                                ->where('month', $month)
                                ->first();

                            if ($attendances == null) {
                                DB::table('attendances')->insert([
                                    'employee_name' => $timesheet->createdby,
                                    'month' => $month,
                                    'year' => $yeardata,
                                    // 'dateofjoining' => $teammember->joining_date,
                                    'fulldate' => date('Y-m-d'),
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s'),
                                ]);
                            }


                            $attendances = DB::table('attendances')
                                ->where('employee_name', $timesheet->createdby)
                                ->where('month', $month)
                                ->first();

                            if ($attendances && property_exists($attendances, $column)) {

                                $client = $timesheet->client_id;
                                $assignmentid = $timesheet->assignment_id;
                                // $updatewording = match (true) {
                                //     // Travel
                                //     $client == 32 => 'T',
                                //     // Off holidays
                                //     $client == 33 && str_replace(['1st ', '2nd ', '3rd ', '4th ', '5th '], '', $timesheet->workitem) == 'Saturday' => 'OH',
                                //     // Other holidays from calendar
                                //     $client == 33 => 'H',
                                //     // Casual leave
                                //     $client == 134 && $assignmentid == 215 => 'CL',
                                //     // Exam leave
                                //     $client == 134 && $assignmentid == 214 => 'EL',
                                //         // Default presence
                                //     default => 'P',
                                // };

                                if ($client == 32) {
                                    $updatewording = 'T'; // Travel
                                } elseif ($client == 33 && str_replace(['1st ', '2nd ', '3rd ', '4th ', '5th '], '', $timesheet->workitem) == 'Saturday') {
                                    $updatewording = 'OH'; // Off holidays
                                } elseif ($client == 33) {
                                    $updatewording = 'H'; // Other holidays from calendar
                                } elseif ($client == 134 && $assignmentid == 215) {
                                    $updatewording = 'CL'; // Casual leave
                                } elseif ($client == 134 && $assignmentid == 214) {
                                    $updatewording = 'EL'; // Exam leave
                                } else {
                                    $updatewording = 'P'; // Default presence
                                }
                            }

                            $totalCountMapping = [
                                'P' => 'no_of_days_present',
                                'CL' => 'casual_leave',
                                'EL' => 'exam_leave',
                                'T' => 'travel',
                                'OH' => 'offholidays',
                                'W' => 'sundaycount',
                                'H' => 'holidays'
                            ];

                            // Update the total count and attendance record if applicable
                            if (isset($totalCountMapping[$updatewording])) {
                                $totalcountColumn = $totalCountMapping[$updatewording];
                                $totalcountupdate = $attendances->$totalcountColumn + 1;

                                DB::table('attendances')
                                    ->where('id', $attendances->id)
                                    ->update([
                                        $column => $updatewording,
                                        $totalcountColumn => $totalcountupdate,
                                    ]);
                            }
                            // Attendance code end hare 
                        }

                        // update sunday data in attendance
                        $prevSunday = $startdate->copy()->previous(Carbon::SUNDAY);
                        $day1 = Carbon::parse($prevSunday)->format('d');
                        $month1 = $prevSunday->format('F');
                        $yeardata = $prevSunday->format('Y');
                        $fulldate = $prevSunday->format('Y-m-d');

                        $numberWords = [
                            '1' => 'one',
                            '2' => 'two',
                            '3' => 'three',
                            '4' => 'four',
                            '5' => 'five',
                            '6' => 'six',
                            '7' => 'seven',
                            '8' => 'eight',
                            '9' => 'nine',
                            '10' => 'ten',
                            '11' => 'eleven',
                            '12' => 'twelve',
                            '13' => 'thirteen',
                            '14' => 'fourteen',
                            '15' => 'fifteen',
                            '16' => 'sixteen',
                            '17' => 'seventeen',
                            '18' => 'eighteen',
                            '19' => 'nineteen',
                            '20' => 'twenty',
                            '21' => 'twentyone',
                            '22' => 'twentytwo',
                            '23' => 'twentythree',
                            '24' => 'twentyfour',
                            '25' => 'twentyfive',
                            '26' => 'twentysix',
                            '27' => 'twentyseven',
                            '28' => 'twentyeight',
                            '29' => 'twentynine',
                            '30' => 'thirty',
                            '31' => 'thirtyone'
                        ];

                        $dayWord = $numberWords[(int)$day1];

                        $getdateformated = $prevSunday->format('Y-m-d');

                        $getholidaysss = DB::table('holidays')
                            ->where('startdate', '=', $getdateformated)
                            ->orWhere('enddate', '=', $getdateformated)
                            ->first();

                        if ($getholidaysss != null) {
                            $updateddata = 'H';
                        } else {
                            $updateddata = 'W';
                        }

                        $attendances = DB::table('attendances')
                            ->where('employee_name', $timesheet->createdby)
                            ->where('month', $month1)
                            ->first();

                        if ($attendances == null) {
                            DB::table('attendances')->insert([
                                'employee_name' => $timesheet->createdby,
                                'month' => $month1,
                                'year' => $yeardata,
                                // 'dateofjoining' => $teammember->joining_date,
                                'fulldate' => $fulldate,
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s'),
                            ]);
                        }

                        $attendances = DB::table('attendances')
                            ->where('employee_name', $timesheet->createdby)
                            ->where('month', $month1)
                            ->first();

                        $totalCountMapping = [
                            'P' => 'no_of_days_present',
                            'CL' => 'casual_leave',
                            'EL' => 'exam_leave',
                            'T' => 'travel',
                            'OH' => 'offholidays',
                            'W' => 'sundaycount',
                            'H' => 'holidays'
                        ];

                        $prevcheck = DB::table('attendances')
                            ->where('employee_name', $timesheet->createdby)
                            ->where('month', $month1)
                            ->whereNotNull($dayWord)
                            ->first();


                        if ($prevcheck == null && isset($totalCountMapping[$updateddata])) {
                            $totalcountColumn = $totalCountMapping[$updateddata];
                            $sundaycountget = DB::table('attendances')
                                ->where('employee_name', $timesheet->createdby)
                                ->where('month', $month1)
                                ->first();

                            if ($sundaycountget) {
                                $totalcountupdate = $sundaycountget->$totalcountColumn + 1;
                                DB::table('attendances')
                                    ->where('id', $sundaycountget->id)
                                    ->update([
                                        $dayWord => $updateddata,
                                        $totalcountColumn => $totalcountupdate,
                                    ]);
                                // $updateddata = $getholidaysss ? 'H' : 'W';
                            }
                        }
                        // update sunday data in attendance end hare

                        // Insert data into the timesheetreport table for the current week
                        $startdate = Carbon::parse($weekData->first()->date);
                        $nextSaturday = $startdate->copy()->next(Carbon::SATURDAY);

                        $startdateformat = $startdate->format('Y-m-d');
                        $nextSaturdayformat = $nextSaturday->format('Y-m-d');

                        $week = date('d-m-Y', strtotime($startdateformat)) . ' to ' . date('d-m-Y', strtotime($nextSaturdayformat));

                        $co = DB::table('timesheetusers')
                            ->where('createdby', $id)
                            ->whereBetween('date', [$startdateformat, $nextSaturdayformat])
                            ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                            ->groupBy('partner')
                            ->get();
                        // dd($co);

                        foreach ($co as $codata) {
                            DB::table('timesheetreport')->insert([
                                'teamid'       =>     $id,
                                'week'       =>     $week,
                                'totaldays'       =>     $codata->row_count,
                                'totaltime' =>  $codata->total_hours,
                                'partnerid'  => $codata->partner,
                                'startdate'  => $startdateformat,
                                'enddate'  => $nextSaturdayformat,
                                'created_at'                =>      date('y-m-d H:i:s'),
                            ]);
                        }
                    }
                }
            }

            //dd($request, 31);
            $data = $request->except(['_token', 'qualification', 'document_file']);
            if ($request->hasFile('cancelcheque')) {
                $file = $request->file('cancelcheque');
                $destinationPath = 'backEnd/image/teammember/cancelcheque';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['cancelcheque'] = $name;
            }
            if ($request->hasFile('profilepic')) {
                $avatar = $request->file('profilepic');
                $filename = time() . rand(1, 100) . '.' . $avatar->getClientOriginalExtension();
                Image::make($avatar)->resize(800, 600)->save('backEnd/image/teammember/profilepic/' . $filename);
                $data['profilepic'] = $filename;
            }
            if ($request->hasFile('appointment_letter')) {
                $file = $request->file('appointment_letter');
                $extension = $file->getClientOriginalExtension();
                $filename = time() . '.' . $extension;
                $file->move('backEnd/image/teammember/appointmentletter/', $filename);
                $data['appointment_letter'] = $filename;
            }
            if ($request->hasFile('nda')) {
                $file = $request->file('nda');
                $extension = $file->getClientOriginalExtension();
                $filename = time() . '.' . $extension;
                $file->move('backEnd/image/teammember/nda/', $filename);
                $data['nda'] = $filename;
            }
            if ($request->hasFile('panupload')) {
                $file = $request->file('panupload');
                $destinationPath = 'backEnd/image/teammember/panupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['panupload'] = $name;
            }
            if ($request->hasFile('addressupload')) {
                $file = $request->file('addressupload');
                $destinationPath = 'backEnd/image/teammember/addressupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['addressupload'] = $name;
            }
            if ($request->hasFile('aadharupload')) {
                $file = $request->file('aadharupload');
                $destinationPath = 'backEnd/image/teammember/aadharupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['aadharupload'] = $name;
            }

            // Teammember::find($id)->update($data);
            if ($request->leavingdate != null && $request->status == 1) {
                $oldstatusvalue = Teammember::find($id);
                if ($oldstatusvalue->status == 1 && $oldstatusvalue->rejoining_date == null) {
                    $data = $request->except(['_token', 'qualification', 'document_file', 'status']);
                    $emilid = $data['emailid'];
                    $data['status'] = '0';
                    Teammember::find($id)->update($data);
                    DB::table('users')->where('email', $emilid)->update([
                        'status'         =>  0,
                        'remember_token' => null
                    ]);
                } else {
                    $data = $request->except(['_token', 'qualification', 'document_file']);
                    $emilid = $data['emailid'];
                    Teammember::find($id)->update($data);
                    $oldstatususer = User::where('email', $emilid)->first();
                    if ($oldstatususer->status == 0) {
                        DB::table('users')->where('email', $emilid)->update([
                            'status'         =>  1,
                        ]);
                    }
                }
            } else {
                Teammember::find($id)->update($data);
            }

            if ($request->document_file != null) {
                $qualifications = $request->qualification;
                $documentFiles = $request->document_file;

                for ($i = 0; $i < count($qualifications); $i++) {
                    // Process each qualification and document file entry
                    $documentFile = $documentFiles[$i];
                    if ($documentFile) {
                        $documentFileName = time() . $documentFile->getClientOriginalName();
                        $documentFilePath = 'backEnd/image/teammember/document_file';
                        $documentFile->move($documentFilePath, $documentFileName);

                        DB::table('teammember_document_files')->insert([
                            'teamember_id' => $id,
                            'qualification' => $qualifications[$i],
                            'document_file' => $documentFileName,
                            'created_at' => now(),
                            'updated_at' => now(),
                        ]);
                    }
                }
            }

            DB::table('users')->where('teammember_id', $id)->update([
                'role_id'         =>  $request->role_id,
                'email'         =>  $request->emailid,
            ]);
            $actionName = class_basename($request->route()->getActionname());
            $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
            $id = auth()->user()->teammember_id;
            DB::table('activitylogs')->insert([
                'user_id' => $id,
                'ip_address' => $request->ip(),
                'activitytitle' => $pagename,
                'description' => ' Team Member Data Edit' . ' ' . '( ' . $request->team_member . ' )',
                'created_at' => date('y-m-d'),
                'updated_at' => date('y-m-d')
            ]);
            $output = array('msg' => 'Updated Successfully');
            return redirect('teammember')->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }








22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php


       public function timesheetsubmission(Request $request)
    {
        try {

            $checksavetimesheet = DB::table('timesheetusers')
                ->where('createdby', auth()->user()->teammember_id)
                ->where('status', 0)
                ->first();

            if ($checksavetimesheet == null) {
                $output = array('msg' => "You have not saved any timesheets. Please save your timesheet.");
                return back()->with('statuss', $output);
            }

            $latesttimesheetreport =  DB::table('timesheetreport')
                ->where('teamid', auth()->user()->teammember_id)
                ->orderBy('id', 'desc')
                ->first();

            // $latesttimesheetreport is not null 
            if ($latesttimesheetreport !== null) {
                // dd('hi 1');
                $timesheetreportenddate = Carbon::parse($latesttimesheetreport->enddate);

                // find next sturday 
                $nextSaturday = $timesheetreportenddate->copy()->next(Carbon::SATURDAY);
                $formattedNextSaturday = $nextSaturday->format('Y-m-d');
                $formattedNextSaturday1 = $timesheetreportenddate->format('d-m-Y');

                // find next week timesheet filled or not 
                $nextweektimesheet = DB::table('timesheetusers')
                    ->where('createdby', auth()->user()->teammember_id)
                    ->whereIn('status', [0, 1])
                    ->where('date', $formattedNextSaturday)
                    ->first();

                // Fetch the rejoining data
                $rejoiningcheck = DB::table('teammembers')
                    ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                    ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
                    ->where('teammembers.id', auth()->user()->teammember_id)
                    ->select(
                        'teammembers.team_member',
                        'teammembers.staffcode',
                        'teammembers.joining_date',
                        'teamrolehistory.newstaff_code',
                        'teamrolehistory.rejoiningdate',
                        'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
                    )
                    ->first();


                // Initialize the variable
                $rejoiningchecktimesheet = null;

                // Check if any rejoining date is set
                $rejoiningDate = $rejoiningcheck->rejoiningdate ?? $rejoiningcheck->samepostrejoiningdate;

                // Check if the rejoining date is set
                if ($rejoiningDate) {
                    $rejoining = Carbon::parse($rejoiningDate);
                    $nextweek = Carbon::parse($formattedNextSaturday);

                    // Check if the rejoining date is before next week's Saturday
                    if ($rejoining < $nextweek) {
                        $rejoiningchecktimesheet = DB::table('timesheetusers')
                            ->where('createdby', auth()->user()->teammember_id)
                            ->whereIn('status', [0, 1])
                            ->where('date', $formattedNextSaturday)
                            ->first();
                    }
                }

                // Determine the next week's timesheet status


                if ($nextweektimesheet == null && $rejoiningchecktimesheet == null && $rejoiningDate == null) {
                    $output = array('msg' => "Fill the Week timesheet After this week: $formattedNextSaturday1");
                    return back()->with('statuss', $output);
                } else {
                    $usertimesheetfirstdate =  DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();

                    $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                    if ($usertimesheetfirstdate) {

                        $firstDate = new DateTime($usertimesheetfirstdate->date);
                        $dayOfWeek = $firstDate->format('w');
                        $daysToAdd = 0;

                        if ($dayOfWeek !== '0') {
                            $daysToAdd = 7 - $dayOfWeek;
                        } else {
                            $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                            return back()->with('success', $output);
                        }

                        if ($dayOfWeek > 0) {
                            $daysToSubtract = $dayOfWeek - 1;
                        } else {
                            $daysToSubtract = $dayOfWeek;
                        }

                        $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                        $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                    }

                    $get_six_Data = DB::table('timesheetusers')
                        ->where('status', '0')
                        ->where('createdby', auth()->user()->teammember_id)
                        ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                        ->orderBy('date', 'ASC')
                        ->get();



                    $lastdate = $get_six_Data->max('date');



                    //copy dates in retrievedDates array in datetime format
                    $retrievedDates = [];

                    foreach ($get_six_Data as $entry) {
                        $date = new DateTime($entry->date);
                        $retrievedDates[] = $date->format('Y-m-d');
                    }

                    $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday
                    $firstDate = new DateTime($presentWeekMonday);
                    $upcomingSundayDate = new DateTime($upcomingSunday);

                    // Clone $firstDate so that it is not modified
                    $currentDate = clone $firstDate;

                    while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                        $expectedDates[] = $currentDate->format('Y-m-d');


                        $currentDate->modify("+1 day");
                    }

                    $missingDates = array_diff($expectedDates, $retrievedDates);

                    if (!empty($missingDates)) {
                        $missingDatesString = implode(', ', $missingDates);
                        $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                        return back()->with('success', $output);
                    } else {
                        foreach ($get_six_Data as $getsixdata) {

                            // Convert the requested date to a Carbon instance
                            $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);

                            if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {
                                $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                                // Find the nearest next Saturday to the requested date
                                $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                                // Format the dates in 'Y-m-d' format
                                $previousMondayFormatted = $getsixdata->date;
                                $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                                $nextSaturdayFormatted = $lastdate;


                                $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));
                                $co = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                    ->groupBy('partner')
                                    ->get();

                                foreach ($co as $codata) {
                                    DB::table('timesheetreport')->insert([
                                        'teamid'       =>     auth()->user()->teammember_id,
                                        'week'       =>     $week,
                                        'totaldays'       =>     $codata->row_count,
                                        'totaltime' =>  $codata->total_hours,
                                        'partnerid'  => $codata->partner,
                                        'startdate'  => $previousMondayFormatted,
                                        'enddate'  => $nextSaturdayFormatted,
                                        // 'created_at'                =>       date('y-m-d'),
                                        'created_at'                =>      date('y-m-d H:i:s'),
                                    ]);
                                }

                                $totaldays = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('date')
                                    ->groupBy('date')
                                    ->get();

                                $totaldaysCount = $totaldays->count();
                                $latesttimesheetreport = DB::table('timesheetreport')
                                    ->where('teamid', auth()->user()->teammember_id)
                                    ->where('startdate', $previousMondayFormatted)
                                    ->first();

                                if ($latesttimesheetreport) {
                                    DB::table('timesheetreport')
                                        ->where('id', $latesttimesheetreport->id)
                                        ->update(['dayscount' => $totaldaysCount]);
                                }
                            }

                            DB::table('timesheetusers')->where('timesheetid', $getsixdata->timesheetid)->update([
                                'status'         =>     1,
                                'updated_at'              =>   date('y-m-d H:i:s'),
                            ]);
                            DB::table('timesheets')->where('id', $getsixdata->timesheetid)->update([
                                'status'         =>     1,
                                'updated_at'              =>   date('y-m-d H:i:s'),
                            ]);

                            // Attendance code start hare 
                            $hdatess = Carbon::parse($getsixdata->date)->format('Y-m-d');
                            $day = Carbon::parse($hdatess)->format('d');
                            $month = Carbon::parse($hdatess)->format('F');
                            $yeardata = Carbon::parse($hdatess)->format('Y');

                            $dates = [
                                '26' => 'twentysix',
                                '27' => 'twentyseven',
                                '28' => 'twentyeight',
                                '29' => 'twentynine',
                                '30' => 'thirty',
                                '31' => 'thirtyone',
                                '01' => 'one',
                                '02' => 'two',
                                '03' => 'three',
                                '04' => 'four',
                                '05' => 'five',
                                '06' => 'six',
                                '07' => 'seven',
                                '08' => 'eight',
                                '09' => 'nine',
                                '10' => 'ten',
                                '11' => 'eleven',
                                '12' => 'twelve',
                                '13' => 'thirteen',
                                '14' => 'fourteen',
                                '15' => 'fifteen',
                                '16' => 'sixteen',
                                '17' => 'seventeen',
                                '18' => 'eighteen',
                                '19' => 'ninghteen',
                                '20' => 'twenty',
                                '21' => 'twentyone',
                                '22' => 'twentytwo',
                                '23' => 'twentythree',
                                '24' => 'twentyfour',
                                '25' => 'twentyfive',
                            ];

                            $column = $dates[$day];
                            // check attendenace record exist or not 
                            $attendances = DB::table('attendances')
                                ->where('employee_name', auth()->user()->teammember_id)
                                ->where('month', $month)
                                ->first();

                            if ($attendances == null) {
                                $teammember = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();
                                DB::table('attendances')->insert([
                                    'employee_name' => $teammember->id,
                                    'month' => $month,
                                    'year' => $yeardata,
                                    'dateofjoining' => $teammember->joining_date,
                                    'fulldate' => date('Y-m-d'),
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s'),
                                ]);
                            }

                            $attendances = DB::table('attendances')
                                ->where('employee_name', auth()->user()->teammember_id)
                                ->where('month', $month)
                                ->first();

                            if ($attendances != null && property_exists($attendances, $column)) {

                                $client = $getsixdata->client_id;
                                $assignmentid = $getsixdata->assignment_id;

                                // $updatewording = match (true) {
                                //     // Travel
                                //     $client == 32 => 'T',
                                //     // Off holidays
                                //     $client == 33 && str_replace(['1st ', '2nd ', '3rd ', '4th ', '5th '], '', $getsixdata->workitem) == 'Saturday' => 'OH',
                                //     // Other holidays from calendar
                                //     $client == 33 => 'H',
                                //     // when submit timesheet before joining date
                                //     $assignmentid == 213 && $getsixdata->workitem == 'NA' => null,
                                //     // Casual leave
                                //     $client == 134 && $assignmentid == 215 => 'CL',
                                //     // Exam leave
                                //     $client == 134 && $assignmentid == 214 => 'EL',
                                //         // Default presence
                                //     default => 'P',
                                // };

                                if ($client == 32) {
                                    $updatewording = 'T'; // Travel
                                } elseif ($client == 33 && str_replace(['1st ', '2nd ', '3rd ', '4th ', '5th '], '', $getsixdata->workitem) == 'Saturday') {
                                    $updatewording = 'OH'; // Off holidays
                                } elseif ($client == 33) {
                                    $updatewording = 'H'; // Other holidays from calendar
                                } elseif ($assignmentid == 213 && $getsixdata->workitem == 'NA') {
                                    $updatewording = null; // Casual leave
                                } elseif ($client == 134 && $assignmentid == 215) {
                                    $updatewording = 'CL'; // Casual leave
                                } elseif ($client == 134 && $assignmentid == 214) {
                                    $updatewording = 'EL'; // Exam leave
                                } else {
                                    $updatewording = 'P'; // Default presence
                                }
                            }

                            $totalCountMapping = [
                                'P' => 'no_of_days_present',
                                'CL' => 'casual_leave',
                                'EL' => 'exam_leave',
                                'T' => 'travel',
                                'OH' => 'offholidays',
                                'W' => 'sundaycount',
                                'H' => 'holidays',
                                null => 'beforejoiningcount'
                            ];

                            // Update the total count and attendance record if applicable
                            if (isset($totalCountMapping[$updatewording])) {
                                $totalcountColumn = $totalCountMapping[$updatewording];
                                $totalcountupdate = $attendances->$totalcountColumn + 1;

                                // DB::table('attendances')
                                //     ->where('id', $attendances->id)
                                //     ->update([
                                //         $column => $updatewording,
                                //         $totalcountColumn => $totalcountupdate,
                                //     ]);

                                // $totalcountupdate = $attendances->$totalcountColumn ? $attendances->$totalcountColumn + 1 : 1;



                                if ($totalcountColumn != "exam_leave") {

                                    $iftwotimesheetinday = DB::table('attendances')
                                        ->where('id', $attendances->id)
                                        ->value($column);

                                    if ($iftwotimesheetinday == "P") {
                                        $updatewording = "P";
                                        $totalcountupdate = $attendances->$totalcountColumn + 0;
                                    } elseif ($iftwotimesheetinday == 'T') {
                                        $updatewording = "P";
                                        $totalcountupdate = $attendances->$totalcountColumn + 0;
                                    }

                                    DB::table('attendances')
                                        ->where('id', $attendances->id)
                                        ->update([
                                            $column => $updatewording,
                                            $totalcountColumn => $totalcountupdate,
                                        ]);
                                }
                            }
                            // Attendance code end hare  
                        }


                        // update sunday data in attendance
                        $lastdateFormate = Carbon::createFromFormat('Y-m-d', $lastdate);
                        $prevSunday = $lastdateFormate->copy()->previous(Carbon::SUNDAY);
                        $day1 = Carbon::parse($prevSunday)->format('d');
                        $month1 = $prevSunday->format('F');

                        $numberWords = [
                            '1' => 'one',
                            '2' => 'two',
                            '3' => 'three',
                            '4' => 'four',
                            '5' => 'five',
                            '6' => 'six',
                            '7' => 'seven',
                            '8' => 'eight',
                            '9' => 'nine',
                            '10' => 'ten',
                            '11' => 'eleven',
                            '12' => 'twelve',
                            '13' => 'thirteen',
                            '14' => 'fourteen',
                            '15' => 'fifteen',
                            '16' => 'sixteen',
                            '17' => 'seventeen',
                            '18' => 'eighteen',
                            '19' => 'nineteen',
                            '20' => 'twenty',
                            '21' => 'twentyone',
                            '22' => 'twentytwo',
                            '23' => 'twentythree',
                            '24' => 'twentyfour',
                            '25' => 'twentyfive',
                            '26' => 'twentysix',
                            '27' => 'twentyseven',
                            '28' => 'twentyeight',
                            '29' => 'twentynine',
                            '30' => 'thirty',
                            '31' => 'thirtyone'
                        ];

                        $dayWord = $numberWords[(int)$day1];
                        if (!in_array($prevSunday, $retrievedDates)) {
                            $getdateformated = $prevSunday->format('Y-m-d');
                            $getholidaysss = DB::table('holidays')
                                ->where('startdate', '=', $getdateformated)
                                ->orWhere('enddate', '=', $getdateformated)
                                ->first();

                            if ($getholidaysss != null) {
                                $updateddata = 'H';
                            } else {
                                $updateddata = 'W';
                            }

                            $totalCountMapping = [
                                'P' => 'no_of_days_present',
                                'CL' => 'casual_leave',
                                'EL' => 'exam_leave',
                                'T' => 'travel',
                                'OH' => 'offholidays',
                                'W' => 'sundaycount',
                                'H' => 'holidays'
                            ];

                            $prevcheck = DB::table('attendances')
                                ->where('employee_name', auth()->user()->teammember_id)
                                ->where('month', $month1)
                                ->whereNotNull($dayWord)
                                ->first();

                            if ($prevcheck == null && isset($totalCountMapping[$updateddata])) {
                                $totalcountColumn = $totalCountMapping[$updateddata];
                                $sundaycountget = DB::table('attendances')
                                    ->where('employee_name', auth()->user()->teammember_id)
                                    ->where('month', $month1)
                                    ->first();

                                if ($sundaycountget) {
                                    $totalcountupdate = $sundaycountget->$totalcountColumn + 1;
                                    DB::table('attendances')
                                        ->where('id', $sundaycountget->id)
                                        ->update([
                                            $dayWord => $updateddata,
                                            $totalcountColumn => $totalcountupdate,
                                        ]);
                                    // $updateddata = $getholidaysss ? 'H' : 'W';
                                }
                            }
                        }
                        // update sunday data in attendance end hare
                    }
                    $output = array('msg' => "Timesheet Submit Successfully From " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));
                    return back()->with('success', $output);
                }
            } else {
                $usertimesheetfirstdate =  DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();
                $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                if ($usertimesheetfirstdate) {
                    $firstDate = new DateTime($usertimesheetfirstdate->date);
                    $dayOfWeek = $firstDate->format('w');
                    $daysToAdd = 0;

                    if ($dayOfWeek !== '0') {
                        $daysToAdd = 7 - $dayOfWeek;
                    } else {
                        $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                        return back()->with('success', $output);
                    }

                    if ($dayOfWeek > 0) {
                        $daysToSubtract = $dayOfWeek - 1;
                    } else {
                        $daysToSubtract = $dayOfWeek;
                    }

                    $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                    $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                }


                // $get_six_Data = DB::table('timesheets')
                //     ->where('status', '0')
                //     ->where('created_by', auth()->user()->teammember_id)
                //     ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                //     ->orderBy('date', 'ASC')
                //     ->get();


                $get_six_Data = DB::table('timesheetusers')
                    ->where('status', '0')
                    ->where('createdby', auth()->user()->teammember_id)
                    ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                    ->orderBy('date', 'ASC')
                    ->get();


                $lastdate = $get_six_Data->max('date');

                $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                foreach ($get_six_Data as $entry) {
                    $date = new DateTime($entry->date);
                    $retrievedDates[] = $date->format('Y-m-d');
                }

                $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday
                $firstDate = new DateTime($presentWeekMonday);
                $upcomingSundayDate = new DateTime($upcomingSunday);
                // Clone $firstDate so that it is not modified
                $currentDate = clone $firstDate;

                while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                    $expectedDates[] = $currentDate->format('Y-m-d');
                    $currentDate->modify("+1 day");
                }

                $missingDates = array_diff($expectedDates, $retrievedDates);

                if (!empty($missingDates)) {
                    $missingDatesString = implode(', ', $missingDates);
                    $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                    return back()->with('success', $output);
                } else {
                    foreach ($get_six_Data as $getsixdata) {
                        // Convert the requested date to a Carbon instance
                        $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);

                        if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {
                            $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);
                            // Find the nearest next Saturday to the requested date
                            $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);
                            // Format the dates in 'Y-m-d' format
                            $previousMondayFormatted = $getsixdata->date;
                            $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                            $nextSaturdayFormatted = $lastdate;

                            $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));
                            $co = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                ->groupBy('partner')
                                ->get();

                            foreach ($co as $codata) {
                                DB::table('timesheetreport')->insert([
                                    'teamid'       =>     auth()->user()->teammember_id,
                                    'week'       =>     $week,
                                    'totaldays'       =>     $codata->row_count,
                                    'totaltime' =>  $codata->total_hours,
                                    'partnerid'  => $codata->partner,
                                    'startdate'  => $previousMondayFormatted,
                                    'enddate'  => $nextSaturdayFormatted,
                                    // 'created_at'                =>       date('y-m-d'),
                                    'created_at'                =>      date('y-m-d H:i:s'),
                                ]);
                            }

                            $totaldays = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('date')
                                ->groupBy('date')
                                ->get();

                            $totaldaysCount = $totaldays->count();
                            $latesttimesheetreport = DB::table('timesheetreport')
                                ->where('teamid', auth()->user()->teammember_id)
                                ->where('startdate', $previousMondayFormatted)
                                ->first();

                            if ($latesttimesheetreport) {
                                DB::table('timesheetreport')
                                    ->where('id', $latesttimesheetreport->id)
                                    ->update(['dayscount' => $totaldaysCount]);
                            }
                        }

                        // DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                        //     'status'         =>     1,
                        //     'updated_at'              =>    date('y-m-d'),
                        // ]);
                        // DB::table('timesheets')->where('id', $getsixdata->id)->update([
                        //     'status'         =>     1,
                        //     'updated_at'              =>    date('y-m-d'),
                        // ]);

                        DB::table('timesheetusers')->where('timesheetid', $getsixdata->timesheetid)->update([
                            'status'         =>     1,
                            'updated_at'              =>   date('y-m-d H:i:s'),
                        ]);
                        DB::table('timesheets')->where('id', $getsixdata->timesheetid)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d H:i:s'),
                        ]);

                        // Attendance code start hare 
                        $hdatess = Carbon::parse($getsixdata->date)->format('Y-m-d');
                        $day = Carbon::parse($hdatess)->format('d');
                        $month = Carbon::parse($hdatess)->format('F');
                        $yeardata = Carbon::parse($hdatess)->format('Y');

                        $dates = [
                            '26' => 'twentysix',
                            '27' => 'twentyseven',
                            '28' => 'twentyeight',
                            '29' => 'twentynine',
                            '30' => 'thirty',
                            '31' => 'thirtyone',
                            '01' => 'one',
                            '02' => 'two',
                            '03' => 'three',
                            '04' => 'four',
                            '05' => 'five',
                            '06' => 'six',
                            '07' => 'seven',
                            '08' => 'eight',
                            '09' => 'nine',
                            '10' => 'ten',
                            '11' => 'eleven',
                            '12' => 'twelve',
                            '13' => 'thirteen',
                            '14' => 'fourteen',
                            '15' => 'fifteen',
                            '16' => 'sixteen',
                            '17' => 'seventeen',
                            '18' => 'eighteen',
                            '19' => 'ninghteen',
                            '20' => 'twenty',
                            '21' => 'twentyone',
                            '22' => 'twentytwo',
                            '23' => 'twentythree',
                            '24' => 'twentyfour',
                            '25' => 'twentyfive',
                        ];

                        $column = $dates[$day];
                        // check attendenace record exist or not 
                        $attendances = DB::table('attendances')
                            ->where('employee_name', auth()->user()->teammember_id)
                            ->where('month', $month)
                            ->first();

                        if ($attendances == null) {
                            $teammember = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();
                            DB::table('attendances')->insert([
                                'employee_name' => $teammember->id,
                                'month' => $month,
                                'year' => $yeardata,
                                'dateofjoining' => $teammember->joining_date,
                                'fulldate' => date('Y-m-d'),
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s'),
                            ]);
                        }

                        $attendances = DB::table('attendances')
                            ->where('employee_name', auth()->user()->teammember_id)
                            ->where('month', $month)
                            ->first();



                        if ($attendances != null && property_exists($attendances, $column)) {

                            $client = $getsixdata->client_id;
                            $assignmentid = $getsixdata->assignment_id;

                            // $updatewording = match (true) {
                            //     // Travel
                            //     $client == 32 => 'T',
                            //     // Off holidays
                            //     $client == 33 && str_replace(['1st ', '2nd ', '3rd ', '4th ', '5th '], '', $getsixdata->workitem) == 'Saturday' => 'OH',
                            //     // Other holidays from calendar
                            //     $client == 33 => 'H',
                            //     // when submit timesheet before joining date
                            //     $assignmentid == 213 && $getsixdata->workitem == 'NA' => null,
                            //     // Casual leave
                            //     $client == 134 && $assignmentid == 215 => 'CL',
                            //     // Exam leave
                            //     $client == 134 && $assignmentid == 214 => 'EL',
                            //         // Default presence
                            //     default => 'P',
                            // };

                            if ($client == 32) {
                                $updatewording = 'T'; // Travel
                            } elseif ($client == 33 && str_replace(['1st ', '2nd ', '3rd ', '4th ', '5th '], '', $getsixdata->workitem) == 'Saturday') {
                                $updatewording = 'OH'; // Off holidays
                            } elseif ($client == 33) {
                                $updatewording = 'H'; // Other holidays from calendar
                            } elseif ($assignmentid == 213 && $getsixdata->workitem == 'NA') {
                                $updatewording = null; // Casual leave
                            } elseif ($client == 134 && $assignmentid == 215) {
                                $updatewording = 'CL'; // Casual leave
                            } elseif ($client == 134 && $assignmentid == 214) {
                                $updatewording = 'EL'; // Exam leave
                            } else {
                                $updatewording = 'P'; // Default presence
                            }
                        }

                        $totalCountMapping = [
                            'P' => 'no_of_days_present',
                            'CL' => 'casual_leave',
                            'EL' => 'exam_leave',
                            'T' => 'travel',
                            'OH' => 'offholidays',
                            'W' => 'sundaycount',
                            'H' => 'holidays',
                            null => 'beforejoiningcount'
                        ];

                        // Update the total count and attendance record if applicable
                        // if (isset($totalCountMapping[$updatewording])) {
                        //     $totalcountColumn = $totalCountMapping[$updatewording];
                        //     $totalcountupdate = $attendances->$totalcountColumn + 1;

                        //     DB::table('attendances')
                        //         ->where('id', $attendances->id)
                        //         ->update([
                        //             $column => $updatewording,
                        //             $totalcountColumn => $totalcountupdate,
                        //         ]);
                        // }

                        if (isset($totalCountMapping[$updatewording])) {

                            $totalcountColumn = $totalCountMapping[$updatewording];
                            $totalcountupdate = $attendances->$totalcountColumn + 1;

                            // DB::table('attendances')
                            //     ->where('id', $attendances->id)
                            //     ->update([
                            //         $column => $updatewording,
                            //         $totalcountColumn => $totalcountupdate,
                            //     ]);

                            // $totalcountupdate = $attendances->$totalcountColumn ? $attendances->$totalcountColumn + 1 : 1;


                            if ($totalcountColumn != "exam_leave") {
                                $iftwotimesheetinday = DB::table('attendances')
                                    ->where('id', $attendances->id)
                                    ->value($column);

                                if ($iftwotimesheetinday == "P") {
                                    $updatewording = "P";
                                    $totalcountupdate = $attendances->$totalcountColumn + 0;
                                } elseif ($iftwotimesheetinday == 'T') {
                                    $updatewording = "P";
                                    $totalcountupdate = $attendances->$totalcountColumn + 0;
                                }

                                DB::table('attendances')
                                    ->where('id', $attendances->id)
                                    ->update([
                                        $column => $updatewording,
                                        $totalcountColumn => $totalcountupdate,
                                    ]);
                            }
                        }

                        // Attendance code end hare  
                    }
                    // dd($attendances);
                    // update sunday data in attendance
                    $lastdateFormate = Carbon::createFromFormat('Y-m-d', $lastdate);
                    $prevSunday = $lastdateFormate->copy()->previous(Carbon::SUNDAY);
                    $day1 = Carbon::parse($prevSunday)->format('d');
                    $month1 = $prevSunday->format('F');

                    $numberWords = [
                        '1' => 'one',
                        '2' => 'two',
                        '3' => 'three',
                        '4' => 'four',
                        '5' => 'five',
                        '6' => 'six',
                        '7' => 'seven',
                        '8' => 'eight',
                        '9' => 'nine',
                        '10' => 'ten',
                        '11' => 'eleven',
                        '12' => 'twelve',
                        '13' => 'thirteen',
                        '14' => 'fourteen',
                        '15' => 'fifteen',
                        '16' => 'sixteen',
                        '17' => 'seventeen',
                        '18' => 'eighteen',
                        '19' => 'nineteen',
                        '20' => 'twenty',
                        '21' => 'twentyone',
                        '22' => 'twentytwo',
                        '23' => 'twentythree',
                        '24' => 'twentyfour',
                        '25' => 'twentyfive',
                        '26' => 'twentysix',
                        '27' => 'twentyseven',
                        '28' => 'twentyeight',
                        '29' => 'twentynine',
                        '30' => 'thirty',
                        '31' => 'thirtyone'
                    ];

                    $dayWord = $numberWords[(int)$day1];
                    if (!in_array($prevSunday, $retrievedDates)) {
                        $getdateformated = $prevSunday->format('Y-m-d');
                        $getholidaysss = DB::table('holidays')
                            ->where('startdate', '=', $getdateformated)
                            ->orWhere('enddate', '=', $getdateformated)
                            ->first();

                        if ($getholidaysss != null) {
                            $updateddata = 'H';
                        } else {
                            $updateddata = 'W';
                        }

                        $totalCountMapping = [
                            'P' => 'no_of_days_present',
                            'CL' => 'casual_leave',
                            'EL' => 'exam_leave',
                            'T' => 'travel',
                            'OH' => 'offholidays',
                            'W' => 'sundaycount',
                            'H' => 'holidays'
                        ];

                        $prevcheck = DB::table('attendances')
                            ->where('employee_name', auth()->user()->teammember_id)
                            ->where('month', $month1)
                            ->whereNotNull($dayWord)
                            ->first();

                        if ($prevcheck == null && isset($totalCountMapping[$updateddata])) {
                            $totalcountColumn = $totalCountMapping[$updateddata];
                            $sundaycountget = DB::table('attendances')
                                ->where('employee_name', auth()->user()->teammember_id)
                                ->where('month', $month1)
                                ->first();

                            if ($sundaycountget) {
                                $totalcountupdate = $sundaycountget->$totalcountColumn + 1;
                                DB::table('attendances')
                                    ->where('id', $sundaycountget->id)
                                    ->update([
                                        $dayWord => $updateddata,
                                        $totalcountColumn => $totalcountupdate,
                                    ]);
                                // $updateddata = $getholidaysss ? 'H' : 'W';
                            }
                        }
                    }
                    // update sunday data in attendance end hare
                }

                $output = array('msg' => "Timesheet Submit Successfully From " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));
                return back()->with('success', $output);
            }
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Console\Commands\CalculateAttendance.php

       public function handle()
    {

        $currentDate = now()->subDay(); // Get the previous day from the current date
        $currentMonth = $currentDate->format('F');
        $currentYear = $currentDate->format('Y');
        // Define the start of the current month (1st day of the month)
        $attendanceStartDate = Carbon::create($currentYear, $currentDate->format('m'), 1);
        // Define the end of the current month (last day of the month)
        $attendanceEndDate = Carbon::create($currentYear, $currentDate->format('m'))->endOfMonth();
        // Calculate total days in the period (from 26th of prev month to 25th of current month)
        $totalDays = $attendanceStartDate->diffInDays($attendanceEndDate) + 1;

        $teammembers = Attendance::join('teammembers', 'teammembers.id', 'attendances.employee_name')
            ->where('attendances.month', $currentMonth)
            ->whereYear('attendances.created_at', $currentYear)
            // ->whereNotNull('teammembers.joining_date')
            ->get();

        foreach ($teammembers as $team) {
            $keysToFilter = [
                'twentysix',
                'twentyseven',
                'twentyeight',
                'twentynine',
                'thirty',
                'thirtyone',
                'one',
                'two',
                'three',
                'four',
                'five',
                'six',
                'seven',
                'eight',
                'nine',
                'ten',
                'eleven',
                'twelve',
                'thirteen',
                'fourteen',
                'fifteen',
                'sixteen',
                'seventeen',
                'eighteen',
                'ninghteen',
                'twenty',
                'twentyone',
                'twentytwo',
                'twentythree',
                'twentyfour',
                'twentyfive'
            ];

            $days = array_intersect_key($team->toArray(), array_flip($keysToFilter));

            $dayspresent = 0;
            $casualLeaveCount = 0;
            $examLeaveCount = 0;
            $travelCount = 0;
            $offholidaysCount = 0;
            $sundayCount = 0;
            $holidaysCount = 0;

            foreach ($days as $key => $value) {
                if ($value == 'P') {
                    $dayspresent++;
                } else if ($value == 'CL') {
                    $casualLeaveCount++;
                } else if ($value == 'EL') {
                    $examLeaveCount++;
                } else if ($value == 'T') {
                    $travelCount++;
                } else if ($value == 'OH') {
                    $offholidaysCount++;
                } else if ($value == 'W') {
                    $sundayCount++;
                } else if ($value == 'H') {
                    $holidaysCount++;
                }
            }

            $dayspresentcount = $dayspresent;
            $casualLeave = $casualLeaveCount;
            $examLeave =  $examLeaveCount;
            $travel =  $travelCount;
            $offholidays =  $offholidaysCount;
            $sunday =  $sundayCount;
            $holidays =  $holidaysCount;

            $attendanceData = [
                'total_no_of_days' => $totalDays,
                'no_of_days_present' => $dayspresentcount,
                'casual_leave' => $casualLeave,
                'exam_leave' => $examLeave,
                'travel' => $travel,
                'offholidays' => $offholidays,
                'sundaycount' => $sunday,
                'holidays' => $holidays,
            ];

            DB::table('attendances')->where('employee_name', $team->employee_name)
                ->where('month', $currentMonth)
                ->where('year', $currentYear)
                ->update($attendanceData);
        }

        return "Attendance updated";
    }







     protected $signature = 'attendance:calculate';

    protected $description = 'Calculate attendance on the last date of every months';

    public function __construct()
    {
        parent::__construct();
    }
	
	
	
	
	  Route::get('/calculate-attendance', [HomeController::class, 'calculateAttendance']);




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\HomeController.php

  public function calculateAttendance()
  {

    // $exitCode = Artisan::call('attendance:calculate')->daily();
    $exitCode = Artisan::call('attendance:calculate')->lastDayOfMonth('18:00')->emailOutputTo('shahidraza@capitall.io');

    return  redirect('/');
  }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Console\Kernel.php

        $schedule->command('attendance:calculate')->lastDayOfMonth('18:00')->emailOutputTo('shahidraza@capitall.io');





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
regarding table 
add attendance table 

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\timesheetController.php


   public function store(Request $request)
  {
    try {
      $Newteammeber = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->first();

      // check promotion data
      $pormotionandrejoiningdata = DB::table('teammembers')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
        ->where('teammembers.id', auth()->user()->teammember_id)
        ->select(
          'teammembers.team_member',
          'teammembers.staffcode',
          'teammembers.joining_date',
          'teamrolehistory.newstaff_code',
          'teamrolehistory.rejoiningdate',
          'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
        )
        ->first();


      $joining_date = $pormotionandrejoiningdata->joining_date ?
        Carbon::parse($pormotionandrejoiningdata->joining_date)->format('d-m-Y') : null;

      $rejoining_date = null;
      if ($pormotionandrejoiningdata->rejoiningdate || $pormotionandrejoiningdata->samepostrejoiningdate) {
        $rejoining_date = Carbon::parse($pormotionandrejoiningdata->rejoiningdate ?? $pormotionandrejoiningdata->samepostrejoiningdate)
          ->format('d-m-Y');
        $rejoiningDateformate = Carbon::parse($rejoining_date);
      }

      $requestDate = Carbon::parse($request->date);
      $joiningDate = Carbon::parse($joining_date);

      if ($Newteammeber == null || $rejoining_date != null) {

        if ($rejoining_date != null && $requestDate < $rejoiningDateformate) {
          $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $rejoining_date);
          return redirect('timesheet/mylist')->with('statuss', $output);
        }

        if ($requestDate < $joiningDate) {
          $output = array('msg' => 'You can not fill timesheet before joining date :' . $joining_date);
          return redirect('timesheet/mylist')->with('statuss', $output);
        }

        if ($Newteammeber == null) {
          // Get previuse sunday from joining date
          $joining_timestamp = strtotime($joining_date);
          $day_of_week = date('w', $joining_timestamp);
          $days_to_subtract = $day_of_week;
          $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);

          $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
          // Get all dates beetween two dates 
          $startDate = Carbon::parse($previous_sunday_date);
          $endDate = Carbon::parse($joining_date);
          $period = CarbonPeriod::create($startDate, $endDate);
        }
        //this code related rejoining teammember 
        else {
          $joining_timestamp = strtotime($rejoining_date);
          $day_of_week = date('w', $joining_timestamp);
          $days_to_subtract = $day_of_week;
          $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);
          $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
          // Get all dates beetween two dates 
          $startDate = Carbon::parse($previous_sunday_date);
          $endDate = Carbon::parse($rejoining_date);
          $period = CarbonPeriod::create($startDate, $endDate);
        }

        // store all date in $result vairable
        $result = [];
        foreach ($period as $key => $date) {
          if ($key !== 0 && $key !== count($period) - 1) {
            $result[] = $date->toDateString();
          }
        }

        foreach ($result as $date) {
          $prevcheck = DB::table('timesheets')->where('date', $date)
            ->where('created_by', auth()->user()->teammember_id)
            ->first();

          if (($Newteammeber == null && $prevcheck == null) || ($rejoining_date != null && $prevcheck == null)) {
            $id = DB::table('timesheets')->insertGetId(
              [
                'created_by' => auth()->user()->teammember_id,
                'month'     =>   date('F', strtotime($date)),
                'date'     =>    date('Y-m-d', strtotime($date)),
                'created_at'          =>     date('Y-m-d H:i:s'),
              ]
            );
            DB::table('timesheetusers')->insert([
              'date'     =>   date('Y-m-d', strtotime($date)),
              'client_id'     =>     29,
              'workitem'     =>     'NA',
              'location'     =>     'NA',
              'timesheetid'     =>     $id,
              'date'     =>     date('Y-m-d', strtotime($date)),
              'hour'     =>     0,
              'totalhour' =>      0,
              'assignment_id'     =>     213,
              'partner'     =>     887,
              'createdby' => auth()->user()->teammember_id,
              'created_at'          =>     date('Y-m-d H:i:s'),
              'updated_at'              =>    date('Y-m-d H:i:s'),
            ]);
          }
        }
      }

      // dd($pormotionandrejoiningdata);
      if ($requestDate >= $joiningDate) {

        if ($rejoining_date != null && $requestDate < $rejoiningDateformate) {
          $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $rejoining_date);
          return redirect('timesheet')->with('success', $output);
        }
        $data = $request->except(['_token', 'teammember_id', 'amount']);

        // check allready submited
        if (date('w', strtotime($request->date)) == 0) {
          $previousSaturday = date('Y-m-d', strtotime('-1 day', strtotime($request->date)));
          $previousSaturdayFilled = DB::table('timesheetusers')
            ->where('createdby', auth()->user()->teammember_id)
            ->where('date', $previousSaturday)
            ->where('status', 1)
            ->first();

          if ($previousSaturdayFilled != null) {
            $output = array('msg' => 'You already submitted for this week');
            return back()->with('success', $output);
          }
        }

        // check hour
        $hours = $request->input('totalhour');
        if (!is_numeric($hours) || $hours > 12) {
          $output = array('msg' => 'The total hours cannot be greater than 12');
          return back()->with('success', $output);
        }

        $previouschck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 1)
          ->first();

        if ($previouschck != null) {
          $output = array('msg' => 'You already submitted for this week');
          return back()->with('success', $output);
        }

        $previoussavechck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 0)
          ->first();

        if ($previoussavechck != null) {
          $output = array('msg' => 'You already submitted for this date');
          return back()->with('success', $output);
        }

        $currentDate = Carbon::now()->format('d-m-Y');
        if ($currentDate == $request->date && Carbon::now()->hour < 18) {
          $output = array('msg' => 'You can only fill today timesheet after 6:00 pm');
          return back()->with('success', $output);
        }

        $leaves = DB::table('applyleaves')
          ->where('applyleaves.createdby', auth()->user()->teammember_id)
          ->where('status', '!=', 2)
          ->select('applyleaves.from', 'applyleaves.to')
          ->get();

        foreach ($leaves as $leave) {
          //Convert each data from table to Y-m-d format to compare
          $days = CarbonPeriod::create(
            date('Y-m-d', strtotime($leave->from)),
            date('Y-m-d', strtotime($leave->to))
          );

          foreach ($days as $day) {
            $leavess[] = $day->format('Y-m-d');
          }
        }

        $currentday = date('Y-m-d', strtotime($request->date));

        if (count($leaves) != 0) {
          foreach ($leavess as $leave) {
            if ($leave == $currentday) {
              $output = array('msg' => 'You Have Leave for the Day (' . date('d-m-Y', strtotime($leave)) . ')');
              return redirect('timesheet')->with('statuss', $output);
            }
          }
        }
        // insert data in timesheet from request and get id 
        $id = DB::table('timesheets')->insertGetId(
          [
            'created_by' => auth()->user()->teammember_id,
            'month'     =>    date('F', strtotime($request->date)),
            'date'     =>    date('Y-m-d', strtotime($request->date)),
            'created_at'          =>     date('Y-m-d H:i:s'),
          ]
        );

        $count = count($request->assignment_id);
        for ($i = 0; $i < $count; $i++) {
          $assignment =  DB::table('assignmentmappings')->where('assignmentgenerate_id', $request->assignment_id[$i])->first();

          $a = DB::table('timesheetusers')->insert([
            'date'     =>     $request->date,
            'client_id'     =>     $request->client_id[$i],
            'assignmentgenerate_id'     =>     $request->assignment_id[$i],
            'workitem'     =>     $request->workitem[$i],
            'location'     =>     $request->location[$i],
            //   'billable_status'     =>     $request->billable_status[$i],
            'timesheetid'     =>     $id,
            'date'     =>     date('Y-m-d', strtotime($request->date)),
            'hour'     =>     $request->hour[$i],
            'totalhour' =>      $request->totalhour,
            'assignment_id'     =>     $assignment->assignment_id,
            'partner'     =>     $request->partner[$i],
            'createdby' => auth()->user()->teammember_id,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>    date('Y-m-d H:i:s'),
          ]);

          if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
            // dd($request);
            $gettotalteamhour = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $request->assignment_id[$i]
              )
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              ->first();

            if ($gettotalteamhour) {
              $gettotalteamhour = $gettotalteamhour->teamhour;
              $finalresult =  $gettotalteamhour + $request->hour[$i];
              $totalteamhourupdate = DB::table('assignmentmappings')
                ->leftJoin(
                  'assignmentteammappings',
                  'assignmentteammappings.assignmentmapping_id',
                  'assignmentmappings.id',
                )
                ->where(
                  'assignmentmappings.assignmentgenerate_id',
                  $request->assignment_id[$i]
                )
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                // ->get();
                ->update(['teamhour' =>  $finalresult]);
            }
          }

          if (auth()->user()->role_id == 13) {
            $assignmentdata = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $request->assignment_id[$i])
              ->first();
            $finalresultleadpatner =  $assignmentdata->leadpartnerhour + $request->hour[$i];
            $finalresultotherpatner =  $assignmentdata->otherpartnerhour + $request->hour[$i];

            if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
              $update = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->assignment_id[$i])
                ->where('leadpartner', auth()->user()->teammember_id)
                ->update(['leadpartnerhour' => $finalresultleadpatner]);
            }
            if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
              $update = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->assignment_id[$i])
                ->where('otherpartner', auth()->user()->teammember_id)
                ->update(['otherpartnerhour' => $finalresultotherpatner]);
            }
          }
        }
      } else {
        $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $joining_date);
        return redirect('timesheet')->with('success', $output);
      }

      $output = array('msg' => 'Create Successfully');
      if (auth()->user()->role_id == 14 || auth()->user()->role_id == 13 || auth()->user()->role_id == 15) {
        return redirect('timesheet/mylist')->with('success', $output);
      } else {
        return redirect('timesheet')->with('success', $output);
      }
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }



attendance module end hare uploaded on vsalive all code from vsademo


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222


 $assignmentid == 213 && $getsixdata->workitem == 'NA' => null,
resources\views\backEnd\applyleave\adminrevertleave.blade.php
replace all code hare 




i have worked after comming home on 08-10-24 below code uploaded only vsalive
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\index.blade.php
All code replace


  <!--Third party Styles(used by this page)-->
  <link href="{{ url('backEnd/plugins/select2/dist/css/select2.min.css') }}" rel="stylesheet">
  <link href="{{ url('backEnd/plugins/select2-bootstrap4/dist/select2-bootstrap4.min.css') }}" rel="stylesheet">
  <link href="{{ url('backEnd/plugins/jquery.sumoselect/sumoselect.min.css') }}" rel="stylesheet">

  @extends('backEnd.layouts.layout') @section('backEnd_content')
      <!--Content Header (Page header)-->
      <div class="content-header row align-items-center m-0">
          <nav aria-label="breadcrumb" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
          </nav>
          <div class="col-sm-8 header-title p-0">
              <div class="media">
                  <div class="header-icon text-success mr-3"><i class="typcn typcn-puzzle-outline"></i></div>
                  <div class="media-body">
                      <h1 class="font-weight-bold">Attendance Report</h1>
                      <small>Team Workbook List</small>
                  </div>
              </div>
          </div>
      </div>
      <!--/.Content Header (Page header)-->
      <div class="body-content">
          <div class="card mb-4">

              <div class="card-body">
                  @component('backEnd.components.alert')
                  @endcomponent
                  {{-- filtering functionality --}}
                  <form method="post" action="{{ url('attendance-filter') }}" enctype="multipart/form-data">
                      @csrf
                      <div class="row">
                          <!-- Teammember Filter -->
                          <div class="col-md-4 col-sm-6 mb-3">
                              <div class="form-group">
                                  <strong><label for="teammemberId">Employee Name</label></strong>
                                  <select class="language form-control" id="teammemberId" name="teammemberId">
                                      <option value="">Please Select One</option>
                                      @php
                                          $displayedValues = [];
                                      @endphp
                                      @foreach ($teammembers as $teammember)
                                          @if (!in_array($teammember->staffcode, $displayedValues))
                                              <option value="{{ $teammember->id }}"
                                                  {{ old('teammemberId') == $teammember->id ? 'selected' : '' }}>
                                                  {{ $teammember->team_member }}
                                                  ({{ $teammember->newstaff_code ?? ($teammember->staffcode ?? '') }})
                                              </option>
                                              @php
                                                  $displayedValues[] = $teammember->staffcode;
                                              @endphp
                                          @endif
                                      @endforeach
                                  </select>
                              </div>
                          </div>

                          <!-- Start Date Filter -->
                          <div class="col-md-3 col-sm-6 mb-3">
                              <div class="form-group">
                                  <strong><label for="startdate">Start Date <span
                                              class="text-danger">*</span></label></strong>
                                  <input required type="date" class="form-control" id="startdate" name="startdate"
                                      value="{{ old('startdate') }}">
                              </div>
                          </div>

                          <!-- End Date Filter -->
                          <div class="col-md-3 col-sm-6 mb-3">
                              <div class="form-group">
                                  <strong><label for="enddate">End Date <span class="text-danger">*</span></label></strong>
                                  <input required type="date" class="form-control" id="enddate" name="enddate"
                                      value="{{ old('enddate') }}">
                              </div>
                          </div>

                          <!-- Search Button -->
                          <div class="col-md-2 col-sm-6 mb-3">
                              <div class="form-group">
                                  <label for="search">&nbsp;</label>
                                  <button type="submit" class="btn btn-success btn-block">Search</button>
                              </div>
                          </div>
                      </div>
                  </form>
              </div>

          </div>
      </div>
  @endsection


  {{-- Include jQuery --}}
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

  <script>
      $(document).ready(function() {
          var startDateInput = $('#startdate');
          var endDateInput = $('#enddate');

          // Function to compare start and end dates
          function compareDates() {
              var startDate = new Date(startDateInput.val());
              var endDate = new Date(endDateInput.val());

              if (startDate > endDate) {
                  alert('End date should be greater than or equal to the Start date');
                  endDateInput.val(''); // Clear the end date input
              }
          }

          // Function to validate the year length
          function validateYear(input) {
              var date = new Date(input.val());
              var year = date.getFullYear();

              if (year.toString().length > 4) {
                  alert('Enter four digits for the year');
                  input.val(''); // Clear the invalid date
              }
          }

          //   // Attach event listeners
          startDateInput.on('input', compareDates);
          endDateInput.on('blur', compareDates);

          startDateInput.on('change', function() {
              validateYear(startDateInput);
          });

          endDateInput.on('change', function() {
              validateYear(endDateInput);
          });
      });
  </script>






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AttendanceController.php


 public function adminattendancereport(Request $request)
    {
        $teamnid = $request->input('teammemberId');
        $startdate = $request->input('startdate');
        $enddate = $request->input('enddate');
        // All teammember 
        $teammembers = DB::table('teammembers')
            ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->whereIn('teammembers.role_id', [14, 15, 13, 11])
            ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
            ->orderBy('team_member', 'ASC')
            ->get();

        // only attendance user 
        // $teammembers = DB::table('attendances')
        //     ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'attendances.employee_name')
        //     ->leftJoin('teammembers', 'teammembers.id', '=', 'attendances.employee_name')
        //     ->whereIn('teammembers.role_id', [14, 15, 13, 11])
        //     ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
        //     ->distinct()
        //     ->orderBy('teammembers.team_member', 'ASC')
        //     ->get();

        // $query  = DB::table('attendances')
        //     ->leftjoin('teammembers', 'teammembers.id', 'attendances.employee_name')
        //     ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        //     ->select('attendances.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.employment_status', 'roles.rolename', 'teammembers.joining_date');

        $query  = DB::table('attendances')
            ->leftjoin('teammembers', 'teammembers.id', 'attendances.employee_name')
            ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
            ->select('attendances.*', 'teammembers.team_member', 'teammembers.staffcode', 'teamrolehistory.newstaff_code', 'teammembers.employment_status', 'roles.rolename', 'teammembers.joining_date');

        if ($teamnid) {
            $query->where('attendances.employee_name', $teamnid);
        }

        //akshay code
        if ($startdate && $enddate) {
            // Convert the start and end dates to full month names
            $startMonth = Carbon::parse($startdate)->format('F'); // e.g., "January"
            $endMonth = Carbon::parse($enddate)->format('F');     // e.g., "December"

            // Map months to numbers for correct comparison
            $months = [
                'January' => 1,
                'February' => 2,
                'March' => 3,
                'April' => 4,
                'May' => 5,
                'June' => 6,
                'July' => 7,
                'August' => 8,
                'September' => 9,
                'October' => 10,
                'November' => 11,
                'December' => 12,
            ];

            $startMonthNumber = $months[$startMonth];
            $endMonthNumber = $months[$endMonth];

            // Filter by month names by converting the stored string month to its respective number
            $query->whereBetween(DB::raw("FIELD(attendances.month, 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')"), [$startMonthNumber, $endMonthNumber]);
        }

        //and akshay code 

        // if ($startdate) {
        //     $query->where('applyleaves.leavetype', $startdate);
        // }

        $attendanceDatas = $query->get();
        $request->flash();

        // dd($attendanceDatas);
        return view('backEnd.attendance.adminattendance', compact('attendanceDatas', 'teammembers'));
    }
	
	

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\adminattendance.blade.php


{{-- selec input box style --}}
<link href="{{ url('backEnd/plugins/select2/dist/css/select2.min.css') }}" rel="stylesheet">
<link href="{{ url('backEnd/plugins/select2-bootstrap4/dist/select2-bootstrap4.min.css') }}" rel="stylesheet">
<link href="{{ url('backEnd/plugins/jquery.sumoselect/sumoselect.min.css') }}" rel="stylesheet">
{{-- selec input box style end hare --}}

{{-- Datatable style --}}
<link href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css" rel="stylesheet">
<link href="https://cdn.datatables.net/buttons/1.7.1/css/buttons.dataTables.min.css" rel="stylesheet">
{{-- Datatable style end --}}

@extends('backEnd.layouts.layout') @section('backEnd_content')
    <div class="content-header row align-items-center m-0">
        <nav aria-label="breadcrumb" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
        </nav>
        <div class="col-sm-8 header-title p-0">
            <div class="media">
                <div class="header-icon text-success mr-3"><i class="typcn typcn-puzzle-outline"></i></div>
                <div class="media-body">
                    <h1 class="font-weight-bold">Attendance Report</h1>
                    <small>Team Workbook List</small>
                </div>
            </div>
        </div>
    </div>

    <div class="body-content">
        <div class="card mb-4">
            <div class="card-body">
                @component('backEnd.components.alert')
                @endcomponent
                <div class="table-responsive">
                    <form method="post" action="{{ url('attendance-filter') }}" enctype="multipart/form-data">
                        @csrf
                        <div class="row">
                            <!-- Teammember Filter -->
                            <div class="col-md-4 col-sm-6 mb-3">
                                <div class="form-group">
                                    <strong><label for="teammemberId">Employee Name</label></strong>
                                    <select class="language form-control" id="teammemberId" name="teammemberId">
                                        <option value="">Please Select One</option>
                                        @php
                                            $displayedValues = [];
                                        @endphp
                                        @foreach ($teammembers as $teammember)
                                            @if (!in_array($teammember->staffcode, $displayedValues))
                                                <option value="{{ $teammember->id }}"
                                                    {{ old('teammemberId') == $teammember->id ? 'selected' : '' }}>
                                                    {{ $teammember->team_member }}
                                                    ({{ $teammember->newstaff_code ?? ($teammember->staffcode ?? '') }})
                                                </option>
                                                @php
                                                    $displayedValues[] = $teammember->staffcode;
                                                @endphp
                                            @endif
                                        @endforeach
                                    </select>
                                </div>
                            </div>

                            <!-- Start Date Filter -->
                            <div class="col-md-3 col-sm-6 mb-3">
                                <div class="form-group">
                                    <strong><label for="startdate">Start Date <span
                                                class="text-danger">*</span></label></strong>
                                    <input required type="date" class="form-control" id="startdate" name="startdate"
                                        value="{{ old('startdate') }}">
                                </div>
                            </div>

                            <!-- End Date Filter -->
                            <div class="col-md-3 col-sm-6 mb-3">
                                <div class="form-group">
                                    <strong><label for="enddate">End Date <span
                                                class="text-danger">*</span></label></strong>
                                    <input required type="date" class="form-control" id="enddate" name="enddate"
                                        value="{{ old('enddate') }}">
                                </div>
                            </div>

                            <!-- Search Button -->
                            <div class="col-md-2 col-sm-6 mb-3">
                                <div class="form-group">
                                    <label for="search">&nbsp;</label>
                                    <button type="submit" class="btn btn-success btn-block">Search</button>
                                </div>
                            </div>
                        </div>
                    </form>
                    <table id="examplee" class="display nowrap">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Employee Name</th>
                                <th>Staff Code</th>
                                <th>Role</th>
                                <th>Month</th>
                                <th>01</th>
                                <th>02</th>
                                <th>03</th>
                                <th>04</th>
                                <th>05</th>
                                <th>06</th>
                                <th>07</th>
                                <th>08</th>
                                <th>09</th>
                                <th>10</th>
                                <th>11</th>
                                <th>12</th>
                                <th>13</th>
                                <th>14</th>
                                <th>15</th>
                                <th>16</th>
                                <th>17</th>
                                <th>18</th>
                                <th>19</th>
                                <th>20</th>
                                <th>21</th>
                                <th>22</th>
                                <th>23</th>
                                <th>24</th>
                                <th>25</th>
                                <th>26</th>
                                <th>27</th>
                                <th>28</th>
                                <th>29</th>
                                <th>30</th>
                                <th>31</th>
                                <th>Total Number of days</th>
                                {{-- <th>No of days Present</th> --}}
                                <th>Total Working days</th>
                                <th>Total Casual Leave</th>
                                {{-- <th>Sick Leave (SL)</th> --}}
                                {{-- <th>Exam Leave (EL)</th> --}}
                                <th>Total Exam Leave</th>
                                <th>Total Travel</th>
                                <th>Total Offholidays</th>
                                <th>Total Weekend</th>
                                <th>Total Holidays</th>
                                {{-- <th>Absent</th> --}}
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($attendanceDatas as $attendanceData)
                                <tr>
                                    <td style="display: none;">{{ $attendanceData->id }}</td>
                                    <td>{{ $attendanceData->team_member }}</td>
                                    <td class="text-center">
                                        {{ $attendanceData->newstaff_code ?? ($attendanceData->staffcode ?? '') }}</td>
                                    <td>{{ $attendanceData->rolename }}</td>
                                    <td> {{ $attendanceData->month }}</td>
                                    <td> {{ $attendanceData->one ?? '…....' }}</td>
                                    <td> {{ $attendanceData->two ?? '…....' }}</td>
                                    <td> {{ $attendanceData->three ?? '…....' }}</td>
                                    <td> {{ $attendanceData->four ?? '…....' }}</td>
                                    <td> {{ $attendanceData->five ?? '…....' }}</td>
                                    <td> {{ $attendanceData->six ?? '…....' }}</td>
                                    <td> {{ $attendanceData->seven ?? '…....' }}</td>
                                    <td> {{ $attendanceData->eight ?? '…....' }}</td>
                                    <td> {{ $attendanceData->nine ?? '…....' }}</td>
                                    <td> {{ $attendanceData->ten ?? '…....' }}</td>
                                    <td> {{ $attendanceData->eleven ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twelve ?? '…....' }}</td>
                                    <td> {{ $attendanceData->thirteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->fourteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->fifteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->sixteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->seventeen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->eighteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->ninghteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twenty ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyone ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentytwo ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentythree ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyfour ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyfive ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentysix ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyseven ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyeight ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentynine ?? '…....' }}</td>
                                    <td> {{ $attendanceData->thirty ?? '…....' }}</td>
                                    <td> {{ $attendanceData->thirtyone ?? '…....' }}</td>

                                    <td class="text-center"> {{ $attendanceData->total_no_of_days ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->no_of_days_present ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->casual_leave ?? '0' }}</td>
                                    {{-- <td> {{ $attendanceData->sick_leave ?? '0' }}</td> --}}
                                    <td class="text-center"> {{ $attendanceData->exam_leave ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->travel ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->offholidays ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->sundaycount ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->holidays ?? '0' }}</td>
                                    {{-- <td> {{ $attendanceData->absent ?? '' }}</td> --}}
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
@endsection
{{-- 
<script src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/dataTables.buttons.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.print.min.js"></script>
<script>
    $(document).ready(function() {
        $('#examplee').DataTable({
            "pageLength": 100,
            dom: 'Bfrtip',
            "order": [
                [0, "desc"]
            ],


            buttons: [

                {
                    extend: 'copyHtml5',
                    exportOptions: {
                        columns: [0, ':visible']
                    }
                },
                {
                    extend: 'excelHtml5',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                {
                    extend: 'pdfHtml5',
                    exportOptions: {
                        columns: [0, 1, 2, 5]
                    }
                },
                'colvis'
            ]
        });
    });
</script> --}}



<script src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/dataTables.buttons.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.print.min.js"></script>

<script>
    $(document).ready(function() {
        $('#examplee').DataTable({
            "pageLength": 100,
            dom: 'Bfrtip',
            "order": [
                [0, "desc"]
            ],
            columnDefs: [{
                targets: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
                    39, 40, 41, 42, 43
                ],
                orderable: false
            }],

            buttons: [{
                    extend: 'excelHtml5',
                    filename: 'Team Attendance',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                'colvis'
            ]
        });
    });
</script>


{{-- Include jQuery --}}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function() {
        var startDateInput = $('#startdate');
        var endDateInput = $('#enddate');

        // Function to compare start and end dates
        function compareDates() {
            var startDate = new Date(startDateInput.val());
            var endDate = new Date(endDateInput.val());

            if (startDate > endDate) {
                alert('End date should be greater than or equal to the Start date');
                endDateInput.val(''); // Clear the end date input
            }
        }

        // Function to validate the year length
        function validateYear(input) {
            var date = new Date(input.val());
            var year = date.getFullYear();

            if (year.toString().length > 4) {
                alert('Enter four digits for the year');
                input.val(''); // Clear the invalid date
            }
        }

        //   // Attach event listeners
        startDateInput.on('input', compareDates);
        endDateInput.on('blur', compareDates);

        startDateInput.on('change', function() {
            validateYear(startDateInput);
        });

        endDateInput.on('change', function() {
            validateYear(endDateInput);
        });
    });
</script>







22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


 public function totalworkingdays(Request $request, $teamid)
  {
    $attendanceDates = DB::table('attendances')
      ->where('employee_name', $teamid)
      ->select(DB::raw('MIN(created_at) as startDate, MAX(created_at) as endDate'))
      ->first();

    // $attendancesstartDate = Carbon::parse($attendanceDates->startDate)->format('Y-m-d H:i:s');
    $attendancesstartDate = Carbon::parse($attendanceDates->startDate)->subSecond(30)->format('Y-m-d H:i:s');
    // $attendancesendDate = Carbon::parse($attendanceDates->endDate)->addMinutes(2)->format('Y-m-d H:i:s');

    // find last date of this date $attendanceDates->endDate
    $attendancesendDate = Carbon::parse($attendanceDates->endDate)->endOfMonth()->setTime(23, 59, 0)->format('Y-m-d H:i:s');

    // dd($attendancesstartDate);
    $query = DB::table('timesheetusers')
      ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
      ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
      ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
      ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
      ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
      ->select(
        'timesheetusers.*',
        'assignments.assignment_name',
        'clients.client_name',
        'clients.client_code',
        'teammembers.team_member',
        'teammembers.staffcode',
        'patnerid.team_member as patnername',
        'patnerid.staffcode as patnerstaffcode',
        'assignmentbudgetings.assignmentname',
        'teamrolehistory.newstaff_code',
        'assignmentbudgetings.created_at as assignmentcreateddate'
      )
      ->where('timesheetusers.createdby', $teamid)
      ->whereIn('timesheetusers.status', [1, 2, 3])
      ->whereBetween('timesheetusers.updated_at', [$attendancesstartDate, $attendancesendDate])
      // hide offholidays and travel timesheet
      // ->whereNotIn('timesheetusers.assignmentgenerate_id', ['OFF100004'])
      ->whereNotIn('timesheetusers.assignmentgenerate_id', ['OFF100004', 'OFF100003'])
      // ->whereNotNull('timesheetusers.assignmentgenerate_id')
      // hide  casual leave and exam leave timesheet
      ->whereNotIn('timesheetusers.client_id', [134])
      ->orderBy('timesheetusers.date', 'DESC');

    // Apply role-specific filters if necessary
    if (auth()->user()->role_id == 13) {
      // Add any specific conditions or modifications for role_id 13 if needed.
    }

    $timesheetData = $query->get();
    // dd($timesheetData);
    return view('backEnd.timesheet.totalworkingdays', compact('timesheetData'));
  }


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\index.blade.php
