
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
VS-200,201,202,203,204,192,186,195   done on  vsademo and vsalive



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php


    public function update(Request $request, $id)
    {
        $request->validate([
            'team_member' => "required"
        ]);

        try {

            if ($request->leavingdate != null) {
                if ($request->rejoining_date == null) {
                    // update cross sign after exit date of users 
                    // Delete timesheet records after the exit date
                    $checksavetimesheet = DB::table('timesheetusers')
                        ->where('createdby', $id)
                        ->where('date', '>', $request->leavingdate)
                        ->where('status', 0)
                        // ->delete();
                        ->first();

                    if ($checksavetimesheet) {
                        $output = array('msg' => 'Please delete save timesheet after leaving date');
                        return back()->with('statuss', $output);
                    }

                    $exitDate = Carbon::parse($request->leavingdate);
                    $exitMonth = $exitDate->format('F');
                    $exitYear = $exitDate->year;
                    $dayOfExit = $exitDate->day;
                    $totalDaysInExitMonth = $exitDate->daysInMonth;

                    // Check if the attendance record exists for the exit month
                    $exitmonthattendances = DB::table('attendances')
                        ->where('employee_name', $id)
                        ->where('month', $exitMonth)
                        ->first();

                    // If not, insert a new record
                    if (!$exitmonthattendances) {
                        DB::table('attendances')->insert([
                            'employee_name' => $id,
                            'month' => $exitMonth,
                            'year' => $exitYear,
                            'fulldate' => $exitDate->format('Y-m-d'),
                            'created_at' => now(),
                            'updated_at' => now(),
                        ]);

                        // Fetch the newly inserted attendance record
                        $exitmonthattendances = DB::table('attendances')
                            ->where('employee_name', $id)
                            ->where('month', $exitMonth)
                            ->first();
                    }

                    // Map day numbers to column names
                    $daysToColumns = [
                        1 => 'one',
                        2 => 'two',
                        3 => 'three',
                        4 => 'four',
                        5 => 'five',
                        6 => 'six',
                        7 => 'seven',
                        8 => 'eight',
                        9 => 'nine',
                        10 => 'ten',
                        11 => 'eleven',
                        12 => 'twelve',
                        13 => 'thirteen',
                        14 => 'fourteen',
                        15 => 'fifteen',
                        16 => 'sixteen',
                        17 => 'seventeen',
                        18 => 'eighteen',
                        19 => 'ninghteen',
                        20 => 'twenty',
                        21 => 'twentyone',
                        22 => 'twentytwo',
                        23 => 'twentythree',
                        24 => 'twentyfour',
                        25 => 'twentyfive',
                        26 => 'twentysix',
                        27 => 'twentyseven',
                        28 => 'twentyeight',
                        29 => 'twentynine',
                        30 => 'thirty',
                        31 => 'thirtyone'
                    ];

                    // Prepare the update data
                    $updateData = [];
                    foreach ($daysToColumns as $day => $column) {
                        if ($day > $dayOfExit && $day <= $totalDaysInExitMonth) {
                            $updateData[$column] = 'X';
                            // $updateData[$column] = null;
                        }
                    }

                    // Update the attendance record
                    if (!empty($updateData)) {
                        DB::table('attendances')
                            ->where('id', $exitmonthattendances->id)
                            ->update($updateData);
                    }
                    // update cross sign after exit date of users end hare 
                    $timesheetsave = DB::table('timesheetusers')
                        ->where('createdby', $id)
                        ->where('status', 0)
                        ->orderBy('date', 'ASC')
                        ->get();


                    // Chunk the $timesheetsave data for one week
                    $weeksData = $timesheetsave->chunk(6);
                    foreach ($weeksData as $weekData) {

                        foreach ($weekData as $timesheet) {
                            $startdate = Carbon::parse($timesheet->date);
                            $nextSaturday = $startdate->copy()->next(Carbon::SATURDAY);

                            $startdateformat = $startdate->format('Y-m-d');
                            $nextSaturdayformat = $nextSaturday->format('Y-m-d');

                            DB::table('timesheetusers')
                                ->where('timesheetid', $timesheet->timesheetid)
                                ->update([
                                    'status' => 1,
                                    'updated_at' => now(),
                                ]);

                            DB::table('timesheets')
                                ->where('id', $timesheet->timesheetid)
                                ->update([
                                    'status' => 1,
                                    'updated_at' => now(),
                                ]);

                            // Attendance code start hare 
                            $hdatess = Carbon::parse($timesheet->date)->format('Y-m-d');
                            $day = Carbon::parse($hdatess)->format('d');
                            $month = Carbon::parse($hdatess)->format('F');
                            $yeardata = Carbon::parse($hdatess)->format('Y');

                            $dates = [
                                '01' => 'one',
                                '02' => 'two',
                                '03' => 'three',
                                '04' => 'four',
                                '05' => 'five',
                                '06' => 'six',
                                '07' => 'seven',
                                '08' => 'eight',
                                '09' => 'nine',
                                '10' => 'ten',
                                '11' => 'eleven',
                                '12' => 'twelve',
                                '13' => 'thirteen',
                                '14' => 'fourteen',
                                '15' => 'fifteen',
                                '16' => 'sixteen',
                                '17' => 'seventeen',
                                '18' => 'eighteen',
                                '19' => 'ninghteen',
                                '20' => 'twenty',
                                '21' => 'twentyone',
                                '22' => 'twentytwo',
                                '23' => 'twentythree',
                                '24' => 'twentyfour',
                                '25' => 'twentyfive',
                                '26' => 'twentysix',
                                '27' => 'twentyseven',
                                '28' => 'twentyeight',
                                '29' => 'twentynine',
                                '30' => 'thirty',
                                '31' => 'thirtyone',
                            ];

                            $column = $dates[$day];

                            // check attendenace record exist or not 
                            $attendances = DB::table('attendances')
                                ->where('employee_name', $timesheet->createdby)
                                ->where('month', $month)
                                ->first();

                            if ($attendances == null) {
                                DB::table('attendances')->insert([
                                    'employee_name' => $timesheet->createdby,
                                    'month' => $month,
                                    'year' => $yeardata,
                                    // 'dateofjoining' => $teammember->joining_date,
                                    'fulldate' => date('Y-m-d'),
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s'),
                                ]);
                            }


                            $attendances = DB::table('attendances')
                                ->where('employee_name', $timesheet->createdby)
                                ->where('month', $month)
                                ->first();

                            if ($attendances && property_exists($attendances, $column)) {

                                $client = $timesheet->client_id;
                                $assignmentid = $timesheet->assignment_id;
                                // $updatewording = match (true) {
                                //     // Travel
                                //     $client == 32 => 'T',
                                //     // Off holidays
                                //     $client == 33 && str_replace(['1st ', '2nd ', '3rd ', '4th ', '5th '], '', $timesheet->workitem) == 'Saturday' => 'OH',
                                //     // Other holidays from calendar
                                //     $client == 33 => 'H',
                                //     // Casual leave
                                //     $client == 134 && $assignmentid == 215 => 'CL',
                                //     // Exam leave
                                //     $client == 134 && $assignmentid == 214 => 'EL',
                                //         // Default presence
                                //     default => 'P',
                                // };

                                if ($client == 32) {
                                    $updatewording = 'T'; // Travel
                                } elseif ($client == 33 && str_replace(['1st ', '2nd ', '3rd ', '4th ', '5th '], '', $timesheet->workitem) == 'Saturday') {
                                    $updatewording = 'OH'; // Off holidays
                                } elseif ($client == 33) {
                                    $updatewording = 'H'; // Other holidays from calendar
                                } elseif ($client == 134 && $assignmentid == 215) {
                                    $updatewording = 'CL'; // Casual leave
                                } elseif ($client == 134 && $assignmentid == 214) {
                                    $updatewording = 'EL'; // Exam leave
                                } else {
                                    $updatewording = 'P'; // Default presence
                                }
                            }

                            $totalCountMapping = [
                                'P' => 'no_of_days_present',
                                'CL' => 'casual_leave',
                                'EL' => 'exam_leave',
                                'T' => 'travel',
                                'OH' => 'offholidays',
                                'W' => 'sundaycount',
                                'H' => 'holidays'
                            ];

                            // Update the total count and attendance record if applicable
                            if (isset($totalCountMapping[$updatewording])) {
                                $totalcountColumn = $totalCountMapping[$updatewording];
                                $totalcountupdate = $attendances->$totalcountColumn + 1;

                                DB::table('attendances')
                                    ->where('id', $attendances->id)
                                    ->update([
                                        $column => $updatewording,
                                        $totalcountColumn => $totalcountupdate,
                                    ]);
                            }
                            // Attendance code end hare 
                        }

                        // update sunday data in attendance
                        $prevSunday = $startdate->copy()->previous(Carbon::SUNDAY);
                        $day1 = Carbon::parse($prevSunday)->format('d');
                        $month1 = $prevSunday->format('F');
                        $yeardata = $prevSunday->format('Y');
                        $fulldate = $prevSunday->format('Y-m-d');

                        $numberWords = [
                            '1' => 'one',
                            '2' => 'two',
                            '3' => 'three',
                            '4' => 'four',
                            '5' => 'five',
                            '6' => 'six',
                            '7' => 'seven',
                            '8' => 'eight',
                            '9' => 'nine',
                            '10' => 'ten',
                            '11' => 'eleven',
                            '12' => 'twelve',
                            '13' => 'thirteen',
                            '14' => 'fourteen',
                            '15' => 'fifteen',
                            '16' => 'sixteen',
                            '17' => 'seventeen',
                            '18' => 'eighteen',
                            '19' => 'nineteen',
                            '20' => 'twenty',
                            '21' => 'twentyone',
                            '22' => 'twentytwo',
                            '23' => 'twentythree',
                            '24' => 'twentyfour',
                            '25' => 'twentyfive',
                            '26' => 'twentysix',
                            '27' => 'twentyseven',
                            '28' => 'twentyeight',
                            '29' => 'twentynine',
                            '30' => 'thirty',
                            '31' => 'thirtyone'
                        ];

                        $dayWord = $numberWords[(int)$day1];

                        $getdateformated = $prevSunday->format('Y-m-d');

                        $getholidaysss = DB::table('holidays')
                            ->where('startdate', '=', $getdateformated)
                            ->orWhere('enddate', '=', $getdateformated)
                            ->first();

                        if ($getholidaysss != null) {
                            $updateddata = 'H';
                        } else {
                            $updateddata = 'W';
                        }

                        $attendances = DB::table('attendances')
                            ->where('employee_name', $timesheet->createdby)
                            ->where('month', $month1)
                            ->first();

                        if ($attendances == null) {
                            DB::table('attendances')->insert([
                                'employee_name' => $timesheet->createdby,
                                'month' => $month1,
                                'year' => $yeardata,
                                // 'dateofjoining' => $teammember->joining_date,
                                'fulldate' => $fulldate,
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s'),
                            ]);
                        }

                        $attendances = DB::table('attendances')
                            ->where('employee_name', $timesheet->createdby)
                            ->where('month', $month1)
                            ->first();

                        $totalCountMapping = [
                            'P' => 'no_of_days_present',
                            'CL' => 'casual_leave',
                            'EL' => 'exam_leave',
                            'T' => 'travel',
                            'OH' => 'offholidays',
                            'W' => 'sundaycount',
                            'H' => 'holidays'
                        ];

                        $prevcheck = DB::table('attendances')
                            ->where('employee_name', $timesheet->createdby)
                            ->where('month', $month1)
                            ->whereNotNull($dayWord)
                            ->first();


                        if ($prevcheck == null && isset($totalCountMapping[$updateddata])) {
                            $totalcountColumn = $totalCountMapping[$updateddata];
                            $sundaycountget = DB::table('attendances')
                                ->where('employee_name', $timesheet->createdby)
                                ->where('month', $month1)
                                ->first();

                            if ($sundaycountget) {
                                $totalcountupdate = $sundaycountget->$totalcountColumn + 1;
                                DB::table('attendances')
                                    ->where('id', $sundaycountget->id)
                                    ->update([
                                        $dayWord => $updateddata,
                                        $totalcountColumn => $totalcountupdate,
                                    ]);
                                // $updateddata = $getholidaysss ? 'H' : 'W';
                            }
                        }
                        // update sunday data in attendance end hare

                        // Insert data into the timesheetreport table for the current week
                        $startdate = Carbon::parse($weekData->first()->date);
                        $nextSaturday = $startdate->copy()->next(Carbon::SATURDAY);

                        $startdateformat = $startdate->format('Y-m-d');
                        $nextSaturdayformat = $nextSaturday->format('Y-m-d');

                        $week = date('d-m-Y', strtotime($startdateformat)) . ' to ' . date('d-m-Y', strtotime($nextSaturdayformat));

                        $co = DB::table('timesheetusers')
                            ->where('createdby', $id)
                            ->whereBetween('date', [$startdateformat, $nextSaturdayformat])
                            ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                            ->groupBy('partner')
                            ->get();
                        // dd($co);

                        foreach ($co as $codata) {
                            DB::table('timesheetreport')->insert([
                                'teamid'       =>     $id,
                                'week'       =>     $week,
                                'totaldays'       =>     $codata->row_count,
                                'totaltime' =>  $codata->total_hours,
                                'partnerid'  => $codata->partner,
                                'startdate'  => $startdateformat,
                                'enddate'  => $nextSaturdayformat,
                                'created_at'                =>      date('y-m-d H:i:s'),
                            ]);
                        }
                    }
                }
            }

            $data = $request->except(['_token', 'qualification', 'document_file']);
            if ($request->hasFile('cancelcheque')) {
                $file = $request->file('cancelcheque');
                $destinationPath = 'backEnd/image/teammember/cancelcheque';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['cancelcheque'] = $name;
            }
            if ($request->hasFile('profilepic')) {
                $avatar = $request->file('profilepic');
                $filename = time() . rand(1, 100) . '.' . $avatar->getClientOriginalExtension();
                Image::make($avatar)->resize(800, 600)->save('backEnd/image/teammember/profilepic/' . $filename);
                $data['profilepic'] = $filename;
            }
            if ($request->hasFile('appointment_letter')) {
                $file = $request->file('appointment_letter');
                $extension = $file->getClientOriginalExtension();
                $filename = time() . '.' . $extension;
                $file->move('backEnd/image/teammember/appointmentletter/', $filename);
                $data['appointment_letter'] = $filename;
            }
            if ($request->hasFile('nda')) {
                $file = $request->file('nda');
                $extension = $file->getClientOriginalExtension();
                $filename = time() . '.' . $extension;
                $file->move('backEnd/image/teammember/nda/', $filename);
                $data['nda'] = $filename;
            }
            if ($request->hasFile('panupload')) {
                $file = $request->file('panupload');
                $destinationPath = 'backEnd/image/teammember/panupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['panupload'] = $name;
            }
            if ($request->hasFile('addressupload')) {
                $file = $request->file('addressupload');
                $destinationPath = 'backEnd/image/teammember/addressupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['addressupload'] = $name;
            }
            if ($request->hasFile('aadharupload')) {
                $file = $request->file('aadharupload');
                $destinationPath = 'backEnd/image/teammember/aadharupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['aadharupload'] = $name;
            }

            // Teammember::find($id)->update($data);
            if ($request->leavingdate != null && $request->status == 1) {
                $oldstatusvalue = Teammember::find($id);
                if ($oldstatusvalue->status == 1 && $oldstatusvalue->rejoining_date == null) {
                    $data = $request->except(['_token', 'qualification', 'document_file', 'status']);
                    $emilid = $data['emailid'];
                    $data['status'] = '0';
                    Teammember::find($id)->update($data);
                    DB::table('users')->where('email', $emilid)->update([
                        'status'         =>  0,
                        'remember_token' => null
                    ]);
                } else {
                    $data = $request->except(['_token', 'qualification', 'document_file']);
                    $emilid = $data['emailid'];
                    Teammember::find($id)->update($data);
                    $oldstatususer = User::where('email', $emilid)->first();
                    if ($oldstatususer->status == 0) {
                        DB::table('users')->where('email', $emilid)->update([
                            'status'         =>  1,
                        ]);
                    }
                }
            } else {
                Teammember::find($id)->update($data);
            }

            if ($request->document_file != null) {
                $qualifications = $request->qualification;
                $documentFiles = $request->document_file;

                for ($i = 0; $i < count($qualifications); $i++) {
                    // Process each qualification and document file entry
                    $documentFile = $documentFiles[$i];
                    if ($documentFile) {
                        $documentFileName = time() . $documentFile->getClientOriginalName();
                        $documentFilePath = 'backEnd/image/teammember/document_file';
                        $documentFile->move($documentFilePath, $documentFileName);

                        DB::table('teammember_document_files')->insert([
                            'teamember_id' => $id,
                            'qualification' => $qualifications[$i],
                            'document_file' => $documentFileName,
                            'created_at' => now(),
                            'updated_at' => now(),
                        ]);
                    }
                }
            }

            DB::table('users')->where('teammember_id', $id)->update([
                'role_id'         =>  $request->role_id,
                'email'         =>  $request->emailid,
            ]);
            $actionName = class_basename($request->route()->getActionname());
            $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
            $id = auth()->user()->teammember_id;
            DB::table('activitylogs')->insert([
                'user_id' => $id,
                'ip_address' => $request->ip(),
                'activitytitle' => $pagename,
                'description' => ' Team Member Data Edit' . ' ' . '( ' . $request->team_member . ' )',
                'created_at' => date('y-m-d'),
                'updated_at' => date('y-m-d')
            ]);
            $output = array('msg' => 'Updated Successfully');
            return redirect('teammember')->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Console\Commands\CreateAttendance.php


<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Attendance;
use App\Models\Teammember;
use Carbon\Carbon;
use Illuminate\Support\Facades\Log;

class CreateAttendance extends Command
{

    protected $signature = 'attendance:create';

    protected $description = 'Create attendance on the first date of every months';

    public function __construct()
    {
        parent::__construct();
    }

    public function handle()
    {
        //current date
        $currentDate = now();
        // $currentDate = Carbon::parse('2024-10-16 13:30:00');
        if ($currentDate->day == 1) {
            $teammembers = Teammember::where('status', 1)
                ->whereNotIn('role_id', ['11'])
                ->select('id', 'team_member', 'joining_date', 'role_id')
                ->get();

            $currentMonth = $currentDate->format('F');
            $currentYear = $currentDate->year;
            // dd($teammembers);
            foreach ($teammembers as $teammember) {
                // Check if the attendance record already exists for the employee and month
                $attendanceexist = Attendance::where('employee_name', $teammember->id)
                    ->where('month', $currentMonth)
                    ->first();

                if ($attendanceexist == null) {
                    Attendance::create([
                        'employee_name' => $teammember->id,
                        'month' => $currentMonth,
                        'year' => $currentYear,
                        'dateofjoining' => $teammember->joining_date,
                        'fulldate' => $currentDate->format('Y-m-d'),
                        'created_at' => now(),
                        'updated_at' => now(),
                    ]);
                }
            }
        }
    }
}





app\Console\Kernel.php

   Commands\CreateAttendance::class,
   
    $schedule->command('attendance:create')->daily()->withoutOverlapping();
	
	
	
	
app\Http\Controllers\HomeController.php


  public function createAttendance()
  {
    // $exitCode = Artisan::call('attendance:calculate')->daily();
    $exitCode = Artisan::call('attendance:create')->daily()->withoutOverlapping();
    return  redirect('/');
  }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
Route::get('/create-attendance', [HomeController::class, 'createAttendance']);





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php


       public function create(Request $request)
    {
        // $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')
        //     ->orderBy('team_member', 'asc')->get();
        // dd($partner);

        $partner = Teammember::where('role_id', '=', 13)
            ->where('status', '=', 1)
            ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->with('title')
            ->orderBy('team_member', 'asc')
            ->select('teammembers.*', 'teamrolehistory.newstaff_code')
            ->get();

        $teammember = Teammember::where('status', '1')->whereIn('role_id', [14, 15])->with('title', 'role')
            ->orderBy('team_member', 'asc')->get();
        //dd($teammember);
        if ($request->ajax()) {


            if (isset($request->category_id)) {
                echo "<option>Please Select One</option>";

                $assignments = Assignment::leftJoin('assignmentbudgetings', function ($join) {
                    $join->on('assignments.id', '=', 'assignmentbudgetings.assignment_id');
                })->leftJoin('assignmentmappings', function ($join) {
                    $join->on('assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id');
                })
                    ->where('assignmentbudgetings.client_id', $request->category_id)
                    // get data only that is not matches assignmentmappings.assignmentgenerate_id from assignmentbudgetings table
                    ->whereNull('assignmentmappings.assignmentgenerate_id')
                    ->select('assignments.*', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentbudgetings.duedate', 'assignmentbudgetings.assignmentname')
                    ->get();

                foreach ($assignments as $sub) {
                    echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name  . '( ' . $sub->assignmentgenerate_id . ' )' . '( ' . $sub->assignmentname . ' )' . "</option>";
                }
            }
        } else {
            if (auth()->user()->role_id == 11 || auth()->user()->role_id == 12) {
                $client = Client::where('status', 1)->latest()->get();

                $assignment = Assignment::where('status', '1')
                    ->whereNotIn('id',  [214, 215])->orderBy('assignment_name')->get();

                $clientss = Client::activeClient()->orderBy('client_name')->orWhere('clients.leadpartner', auth()->user()->teammember_id)->orWhere('clients.createdbyadmin_id', auth()->user()->id)->orWhere('clients.updatedbyadmin_id', auth()->user()->id)->select('clients.*')->get();

                return view('backEnd.assignmentmapping.create', compact('client', 'teammember', 'partner', 'assignment', 'clientss'));
            } else {
                $client = DB::table('assignmentbudgetings')
                    ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                    ->Where('assignmentbudgetings.created_by', auth()->user()->id)
                    ->select('clients.client_name', 'clients.id')
                    ->distinct()->get();


                $assignment = Assignment::where('status', '1')
                    ->whereNotIn('id',  [214, 215])->orderBy('assignment_name')->get();

                $clientss = Client::activeClient()->orderBy('client_name')->orWhere('clients.leadpartner', auth()->user()->teammember_id)->orWhere('clients.createdbyadmin_id', auth()->user()->id)->orWhere('clients.updatedbyadmin_id', auth()->user()->id)->select('clients.*')->get();

                //	DB::table('clients')->
                //  orWhere('clients.leadpartner',auth()->user()->teammember_id)->
                //  orWhere('clients.createdbyadmin_id',auth()->user()->id)->
                //	 orWhere('clients.updatedbyadmin_id',auth()->user()->id)->
                //   select('clients.client_name','clients.id')->get();

                return view('backEnd.assignmentmapping.create', compact('client', 'teammember', 'partner', 'assignment', 'clientss'));
            }
        }
    }


2222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\form.blade.php
replace all code hare 


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\create.blade.php


  <!--Third party Styles(used by this page)-->
  <link href="{{ url('backEnd/plugins/select2/dist/css/select2.min.css') }}" rel="stylesheet">
  <link href="{{ url('backEnd/plugins/select2-bootstrap4/dist/select2-bootstrap4.min.css') }}" rel="stylesheet">
  <link href="{{ url('backEnd/plugins/jquery.sumoselect/sumoselect.min.css') }}" rel="stylesheet">

  @extends('backEnd.layouts.layout') @section('backEnd_content')
      <div class="body-content">
          <div class="row">
              <div class="col-md-12 col-lg-12">
                  <div class="card mb-4">
                      <div class="card-header" style="background: #37A000">
                          <div class="d-flex justify-content-between align-items-center">
                              <div>
                                  <h6 style="color:white;" class="fs-17 font-weight-600 mb-0">Add Assignment Mapping</h6>
                              </div>
                          </div>
                      </div>
                      <div class="card-body">
                          <form method="post" id="Myform" action="{{ route('assignmentmapping.store') }}"
                              enctype="multipart/form-data">
                              @csrf
                              @component('backEnd.components.alert')
                              @endcomponent
                              @include('backEnd.assignmentmapping.form')
                          </form>

                          <hr class="my-4">

                      </div>
                  </div>
              </div>
          </div>
      </div>
      <!--/.body content-->
  @endsection


  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>


  <script>
      $(document).ready(function() {
          $("#key").change(function() {
              var air_id = $(this).val();
              $("#teammemberrole").val(air_id);
          });
      });
  </script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

  <script type="text/javascript">
      $(document).ready(function() {
          var maxField = 60; // Input fields increment limitation
          var addButton = $('.add_buttonn'); // Add button selector
          var wrapper = $('.field_wrapper'); // Input field wrapper
          var x = 1; // Initial field counter

          // Store team member names for easy lookup
          var teamMembers = {};
          @foreach ($teammember as $teammemberData)
              teamMembers['{{ $teammemberData->id }}'] =
                  '{{ $teammemberData->team_member }} ({{ $teammemberData->role->rolename }}) ({{ $teammemberData->staffcode }})';
          @endforeach

          // Function to update options based on selected team members
          function updateDropdowns() {
              var selectedValues = [];

              // Get all selected team member IDs
              $('.language').each(function() {
                  var selectedValue = $(this).val();
                  if (selectedValue) {
                      selectedValues.push(selectedValue);
                  }
              });

              // Update each dropdown's options
              $('.language').each(function() {
                  var dropdown = $(this);
                  var currentValue = dropdown.val();

                  dropdown.find('option').each(function() {
                      var optionValue = $(this).val();

                      // If optionValue is selected in another dropdown, remove it from this dropdown
                      if (optionValue && selectedValues.includes(optionValue) && optionValue !==
                          currentValue) {
                          $(this).remove(); // Remove selected option
                      }
                  });
              });
          }

          // Initialize Select2 for the first select box
          $('.language').select2();

          // Update dropdowns on page load
          updateDropdowns();

          // Trigger update when any dropdown changes
          $(wrapper).on('change', '.language', function() {
              updateDropdowns();
          });

          // Once add button is clicked
          $(addButton).click(function() {
              if (x < maxField) {
                  x++; // Increment field counter

                  var fieldHTML = '<div class="row row-sm"><div class="col-6"><div class="form-group">' +
                      '<label class="font-weight-600">Name *</label>' +
                      '<select required class="language form-control" id="teammember_' + x +
                      '" name="teammember_id[]">' +
                      '<option value="">Please Select One</option>' +
                      '@foreach ($teammember as $teammemberData)' +
                      '<option value="{{ $teammemberData->id }}">' +
                      '{{ $teammemberData->team_member }} ({{ $teammemberData->role->rolename }}) ({{ $teammemberData->staffcode }})</option>' +
                      '@endforeach</select></div></div>' +
                      '<div class="col-5"><div class="form-group">' +
                      '<label class="font-weight-600">Type *</label>' +
                      '<select required class="form-control key" name="type[]" id="type_' + x + '">' +
                      '<option value="">Please Select One</option>' +
                      '<option value="0">Team Leader</option>' +
                      '<option value="2">Staff</option></select></div></div>' +
                      '<a style="margin-top: 36px;" href="javascript:void(0);" class="remove_button">' +
                      '<img src="{{ url('backEnd/image/remove-icon.png') }}" /></a></div></div>';

                  $(wrapper).append(fieldHTML); // Add field html

                  // Initialize Select2 for the newly added select box
                  $('#teammember_' + x).select2();

                  // Update dropdowns after adding a new one
                  updateDropdowns();
              }
          });

          // Once remove button is clicked
          $(wrapper).on('click', '.remove_button', function(e) {
              e.preventDefault();

              // Get the selected value of the dropdown being removed
              var removedValue = $(this).closest('.row').find('.language').val();

              // Remove field html
              $(this).closest('.row').remove();
              x--; // Decrement field counter

              // Re-add the removed value to all dropdowns if it was selected
              if (removedValue) {
                  $('.language').each(function() {
                      var dropdown = $(this);
                      // Check if option already exists
                      if (!dropdown.find('option[value="' + removedValue + '"]').length) {
                          dropdown.append('<option value="' + removedValue + '">' + teamMembers[
                              removedValue] + '</option>');
                      }
                  });
              }

              // Update dropdowns after removing the field
              updateDropdowns();
          });
      });
  </script>
  <script>
      $(function() {
          $('#category').on('change', function() {
              var category_id = $(this).val();

              $.ajax({
                  type: "GET",
                  url: "{{ url('assignmentmapping/create') }}",
                  data: "category_id=" + category_id,
                  success: function(res) {

                      $('#subcategory_id').html(res);


                  },
                  error: function() {

                  },
              });
          });
      });
  </script>








22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php


    public function store(Request $request)
    {
        $request->validate([
            'client_id' => "required",
            'assignment_id' => "required",
            'teammember_id.*' => "required",
            'assignmentname' => "required",
            'type.*' => "required"
        ]);

        $client_id = $request->input('client_id');
        $assignment_id = $request->input('assignment_id');
        $assignmentname = $request->input('assignmentname');

        if ($client_id && $assignment_id && $assignmentname) {

            $data = $request->except(['_token', 'periodstart', 'periodend', 'roleassignment', 'esthours', 'stdcost', 'estcost', 'fees', 'leadpartner', 'otherpartner', 'teammember_id', 'type']);
            $data['created_by'] = auth()->user()->id;

            $clientcode = DB::table('clients')->where('id', $client_id)->value('client_name');
            $assignmentgenerateid = strtoupper(substr($clientcode, 0, 3));

            // Generate unique assignment number
            $assignmentnumbers = DB::table('assignmentbudgetings')->max('assignmentnumber');

            $assignmentnumbers = $assignmentnumbers ? $assignmentnumbers + 1 : 100001;

            $assignmentgenerate = $assignmentgenerateid . $assignmentnumbers;


            if (DB::table('assignmentmappings')->where('assignmentgenerate_id', $assignmentgenerate)->exists()) {
                return back()->with('success', ['msg' => 'You have already created assignment.']);
            }

            // Insert into assignmentbudgetings
            DB::table('assignmentbudgetings')->insert([
                'client_id' => $client_id,
                'assignment_id' => $assignment_id,
                'assignmentname' => $assignmentname,
                'duedate' => $data['duedate'],
                'created_by' => $data['created_by'],
                'assignmentgenerate_id' => $assignmentgenerate,
                'assignmentnumber' => $assignmentnumbers,
                'created_at' => now(),
                'updated_at' => now()
            ]);

            // Insert into assignmentmappings
            $id = DB::table('assignmentmappings')->insertGetId([
                'assignmentgenerate_id' => $assignmentgenerate,
                'periodstart' => $request->periodstart,
                'periodend' => $request->periodend,
                'year' => Carbon::parse($request->periodend)->year,
                'roleassignment' => $request->roleassignment,
                'assignment_id' => $assignment_id,
                'esthours' => $request->esthours,
                'independenceform' => 2,
                'leadpartner' => $request->leadpartner,
                'otherpartner' => $request->otherpartner,
                'stdcost' => $request->stdcost,
                'estcost' => $request->estcost,
                'filecreationdate' => now()->format('Y-m-d'),
                'modifieddate' => now()->format('Y-m-d'),
                'auditcompletiondate' => now()->format('Y-m-d'),
                'documentationdate' => now()->format('Y-m-d'),
                'created_at' => now(),
                'updated_at' => now()
            ]);

            $assignment_name = Assignment::where('id', $request->assignment_id)->select('assignment_name')->pluck('assignment_name')->first();

            $assignmentbudgetingDatas = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $assignmentgenerate)
                ->select(
                    'assignmentmappings.*',
                )
                ->first();

            // Insert into assignmentteammappings
            if ($request->teammember_id != '0') {
                foreach ($request->teammember_id as $key => $teammember_id) {
                    DB::table('assignmentteammappings')->insert([
                        'assignmentmapping_id' => $id,
                        'type' => $request->type[$key],
                        'teammember_id' => $teammember_id,
                        'created_at' => now(),
                        'updated_at' => now()
                    ]);
                }

                $clientname = DB::table('clients')->where('id', $client_id)->first(['client_name', 'client_code']);
                $teamemailpartner = DB::table('teammembers')->where('id', $request->leadpartner)->first(['emailid', 'team_member', 'staffcode']);
                $teamemailotherpartner = DB::table('teammembers')->where('id', $request->otherpartner)->first(['emailid', 'team_member', 'staffcode']);

                $teamleader = DB::table('assignmentteammappings')
                    ->where('assignmentmapping_id', $id)
                    ->where('assignmentteammappings.type', 0)
                    ->join('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
                    ->select('teammembers.team_member', 'teammembers.staffcode')
                    ->get();

                $teamemails = DB::table('teammembers')->whereIn('id', $request->teammember_id)->pluck('emailid');

                // Mail for employees
                foreach ($teamemails as $emailid) {
                    $this->sendAssignmentEmail([
                        'assignmentid' => $assignmentgenerate,
                        'clientname' => $clientname->client_name,
                        'clientcode' => $clientname->client_code,
                        'assignmentname' => $assignmentname,
                        'assignment_name' => Assignment::where('id', $assignment_id)->value('assignment_name'),
                        'emailid' => $emailid,
                        'otherpatner' => $teamemailotherpartner,
                        'assignmentpartner' => $teamemailpartner,
                        'teamleader' => $teamleader,
                        'periodend' => $assignmentbudgetingDatas->periodend,
                        'assignmentgenerate' => $assignmentgenerate,
                    ]);
                }

                // Mail for leadpartner
                if ($request->leadpartner) {
                    $this->sendAssignmentEmail([
                        'assignmentid' => $assignmentgenerate,
                        'clientname' => $clientname->client_name,
                        'clientcode' => $clientname->client_code,
                        'assignmentname' => $assignmentname,
                        'assignment_name' => Assignment::where('id', $assignment_id)->value('assignment_name'),
                        'emailid' => $teamemailpartner->emailid,
                        'otherpatner' => $teamemailotherpartner,
                        'assignmentpartner' => $teamemailpartner,
                        'teamleader' => $teamleader,
                        'periodend' => $assignmentbudgetingDatas->periodend,
                        'assignmentgenerate' => $assignmentgenerate,
                    ]);
                }

                // Mail for otherpartner
                if ($request->otherpartner) {
                    $this->sendAssignmentEmail([
                        'assignmentid' => $assignmentgenerate,
                        'clientname' => $clientname->client_name,
                        'clientcode' => $clientname->client_code,
                        'assignmentname' => $assignmentname,
                        'assignment_name' => Assignment::where('id', $assignment_id)->value('assignment_name'),
                        'emailid' => $teamemailotherpartner->emailid,
                        'otherpatner' => $teamemailotherpartner,
                        'assignmentpartner' => $teamemailpartner,
                        'teamleader' => $teamleader,
                        'periodend' => $assignmentbudgetingDatas->periodend,
                        'assignmentgenerate' => $assignmentgenerate,
                    ]);
                }
            }
            // Log activity
            $actionName = class_basename($request->route()->getActionName());
            $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
            $id = auth()->user()->teammember_id;

            DB::table('activitylogs')->insert([
                'user_id' => $id,
                'ip_address' => $request->ip(),
                'activitytitle' => $pagename,
                'description' => 'New Assignment Mapping Added ( ' . Assignment::where('id', $assignment_id)->value('assignment_name') . ' )',
                'created_at' => now(),
                'updated_at' => now()
            ]);

            $output = [
                'msg' => "Created Successfully <strong>Client Name:</strong> {$clientname->client_name} <strong>Assignment:</strong> {$assignment_name} <strong>Assignment Name:</strong> {$assignmentname} <strong>Assignment Id:</strong> {$assignmentgenerate}"
            ];
            return redirect('assignmentbudgeting')->with('success', $output);
        }
    }






updated on vsa live all above 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php






















