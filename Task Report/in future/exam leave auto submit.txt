Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Console\Commands\SubmittedExamleaveTimesheet.php
replace handle() function 


    public function handle()
    {

        // $nextweektimesheet = DB::table('timesheetusers')
        //     ->where('createdby', 847)
        //     ->whereBetween('date', ['2024-03-11', '2024-03-20'])
        //     // ->get();
        //     ->update(['status' => 0]);


        // $nextweektimesheet = DB::table('timesheets')
        //     ->where('created_by', 847)
        //     ->whereBetween('date', ['2024-03-11', '2024-03-20'])
        //     // ->get();
        //     ->update(['status' => 0]);

        // // dd('hi');

        // $nextweektimesheet = DB::table('timesheetreport')
        //     ->where('teamid', 847)
        //     ->where('startdate', '2024-03-11')
        //     // ->get();
        //     ->delete();

        // // dd($nextweektimesheet);

        // dd('hi');

        if ('Friday' == date('l', time())) {

            $usertimesheetfirstdate =  DB::table('timesheetusers')
                ->where('status', '0')
                ->where('assignment_id', 214)
                // ->where('createdby', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();
                ->where('createdby', 847)->orderBy('date', 'ASC')->first();

            $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

            if ($usertimesheetfirstdate) {
                $firstDate = new DateTime($usertimesheetfirstdate->date);
                $dayOfWeek = $firstDate->format('w');

                $daysToAdd = 0;

                if ($dayOfWeek !== '0') {
                    $daysToAdd = 7 - $dayOfWeek;
                }

                if ($dayOfWeek > 0) {
                    $daysToSubtract = $dayOfWeek - 1;
                } else {
                    $daysToSubtract = $dayOfWeek;
                }
                $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');
                $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
            }

            $get_six_Data = DB::table('timesheetusers')
                ->where('status', '0')
                ->where('assignment_id', 214)
                // ->where('created_by', auth()->user()->teammember_id)
                ->where('createdby', 847)
                ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                ->orderBy('date', 'ASC')
                ->get();

            $lastdate = $get_six_Data->max('date');

            $retrievedDates = [];
            foreach ($get_six_Data as $entry) {
                $date = new DateTime($entry->date);
                $retrievedDates[] = $date->format('Y-m-d');
            }

            $firstDate = new DateTime($presentWeekMonday);
            $upcomingSundayDate = new DateTime($upcomingSunday);
            $currentDate = clone $firstDate;

            $expectedDates = [];
            while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                $expectedDates[] = $currentDate->format('Y-m-d');
                $currentDate->modify("+1 day");
            }

            $missingDates = array_diff($expectedDates, $retrievedDates);
            if (!empty($missingDates)) {
                $count1 = count($missingDates);
                $missingDatesexist =  DB::table('timesheetusers')
                    ->whereIn('date', $missingDates)
                    ->where('createdby', 847)
                    ->orderBy('date', 'ASC')
                    ->get();
                $count2 = $missingDatesexist->count();

                if ($count1 == $count2) {
                    // Examm leave data update hare 
                    foreach ($get_six_Data as $getsixdata) {
                        $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);

                        if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Saturday') {
                            $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);
                            // Find the nearest next Saturday to the requested date
                            $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                            // $previousMondayFormatted = $getsixdata->date;
                            $previousMondayFormatted =  $previousMonday->format('Y-m-d');
                            $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                            $nextSaturdayFormatted = $lastdate;


                            $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                            $co = DB::table('timesheetusers')
                                // ->where('status', '0')
                                // ->where('assignment_id', 214)
                                ->where('createdby', 847)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select(DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                ->get();

                            foreach ($co as $codata) {
                                DB::table('timesheetreport')->insert([
                                    'teamid'       =>     847,
                                    'week'       =>     $week,
                                    'totaldays'       =>     $codata->row_count,
                                    'totaltime' =>  $codata->total_hours,
                                    'startdate'  => $previousMondayFormatted,
                                    'enddate'  => $nextSaturdayFormatted,
                                    'created_at'                =>      date('y-m-d H:i:s'),
                                ]);
                            }
                        }
                        DB::table('timesheetusers')->where('id', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>     date('y-m-d H:i:s'),
                        ]);

                        DB::table('timesheets')->where('id', $getsixdata->timesheetid)->update([
                            'status'         =>     1,
                            'updated_at'              =>     date('y-m-d H:i:s'),
                        ]);
                    }

                    // Missing data update that is not countain exam leave 
                    foreach ($missingDatesexist as $getsixdata) {

                        DB::table('timesheetusers')->where('id', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>     date('y-m-d H:i:s'),
                        ]);

                        DB::table('timesheets')->where('id', $getsixdata->timesheetid)->update([
                            'status'         =>     1,
                            'updated_at'              =>     date('y-m-d H:i:s'),
                        ]);
                    }
                }
            } else {

                foreach ($get_six_Data as $getsixdata) {
                    $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);

                    if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {
                        $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);
                        // Find the nearest next Saturday to the requested date
                        $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                        $previousMondayFormatted = $getsixdata->date;
                        $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                        $nextSaturdayFormatted = $lastdate;

                        $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                        $co = DB::table('timesheetusers')
                            ->where('status', '0')
                            ->where('assignment_id', 214)
                            ->where('createdby', 847)
                            ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                            ->select(DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                            ->get();

                        foreach ($co as $codata) {
                            DB::table('timesheetreport')->insert([
                                'teamid'       =>     847,
                                'week'       =>     $week,
                                'totaldays'       =>     $codata->row_count,
                                'totaltime' =>  $codata->total_hours,
                                'startdate'  => $previousMondayFormatted,
                                'enddate'  => $nextSaturdayFormatted,
                                'created_at'                =>      date('y-m-d H:i:s'),
                            ]);
                        }
                    }

                    DB::table('timesheetusers')->where('id', $getsixdata->id)->update([
                        'status'         =>     1,
                        'updated_at'              =>     date('y-m-d H:i:s'),
                    ]);

                    DB::table('timesheets')->where('id', $getsixdata->timesheetid)->update([
                        'status'         =>     1,
                        'updated_at'              =>     date('y-m-d H:i:s'),
                    ]);
                }
            }

            //   return 'message'
        }
    }






################################################################################################################################
