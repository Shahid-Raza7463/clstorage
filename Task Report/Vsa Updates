http://127.0.0.1:8000/viewassignment/ZUA101165

While adding a team member in the assignment, the team should be searchable  ```start 
vsademo vsalive  done 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\viewassignment.blade.php
find <option value="2">Staff</option>




<select class="language form-control key"






({{ $teammemberData->staffcode }})  find it 

   <select class="language form-control" id="exampleFormControlSelect" name="teammember_id">






resources\views\backEnd\viewassignment.blade.php
find   $('#exampleModal120').on('hidden.bs.modal', function() {


        $('#exampleModal14').on('hidden.bs.modal', function() {
            $(this).find('select').val(null).trigger('change');
        });
		
		


	

	
```end  deployed vademo, vsalive


15-09-2025 bugs 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Console\Commands\TimesheetnotfillReminder.php
timesheetnotfillreminder


$rejoiningData = DB::table('teammembers')


                    $rejoiningData = DB::table('teammembers')
                        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                        ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
                        ->where('teammembers.id', $user->teammember_id)
                        ->select('teamrolehistory.rejoiningdate', 'rejoiningsamepost.rejoiningdate as samepostrejoiningdate')
                        ->first();

                    // check promotion user
                    if ($rejoiningData && $rejoiningData->rejoiningdate == null && $rejoiningData->samepostrejoiningdate == null) {
                        $rejoiningData = DB::table('teamrolehistory')
                            ->where('teamrolehistory.teammember_id', $user->teammember_id)
                            ->select('promotion_date as rejoiningdate')
                            ->first();
                    }


end hare 



One more functionality added to the Autosubmit Exam Leave functionality  ```start
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Console\Commands\SubmittedExamleaveTimesheet.php

    public function handle()
    {
        if ('Wednesday' == date('l', time())) {
            // All employee temmeber id 
            $createdbyList = DB::table('timesheetusers')->distinct()->pluck('createdby')->toArray();

            // Implementation for all employee
            foreach ($createdbyList as $createdby) {
                // Exam leave data get hare
                $usertimesheetfirstdate =  DB::table('timesheetusers')
                    ->where('status', '0')
                    ->where('assignment_id', 214)
                    ->where('createdby', $createdby)
                    ->orderBy('date', 'ASC')->first();
                // Exam leave data should not be empty
                if ($usertimesheetfirstdate && !empty($usertimesheetfirstdate->date)) {

                    $date = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date);
                    // Automatic submit will be on this date 
                    // find days name Wednesday 
                    $autosubmitdate = $date->copy()->next(Carbon::SUNDAY)->addDays(3);
                    // $autosubmitdate = $date->copy()->next(Carbon::SUNDAY)->addDays(5);
                    $todaydate = Carbon::now('Asia/Kolkata');

                    //autosubmitdate and todaydate should be same 
                    if ($autosubmitdate->isSameDay($todaydate)) {
                        $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date)->addDays(6);

                        $firstDate = new DateTime($usertimesheetfirstdate->date);
                        $dayOfWeek = $firstDate->format('w');

                        $daysToAdd = 0;

                        if ($dayOfWeek !== '0') {
                            $daysToAdd = 7 - $dayOfWeek;
                        }

                        if ($dayOfWeek > 0) {
                            $daysToSubtract = $dayOfWeek - 1;
                        } else {
                            $daysToSubtract = $dayOfWeek;
                        }
                        $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');
                        $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');

                        // Get six data of exam leave 
                        $get_six_Data = DB::table('timesheetusers')
                            ->where('status', '0')
                            ->where('assignment_id', 214)
                            ->where('createdby', $createdby)
                            ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                            ->orderBy('date', 'ASC')
                            ->get();

                        $lastdate = $get_six_Data->max('date');

                        // get date only of retrived data 
                        $retrievedDates = [];
                        foreach ($get_six_Data as $entry) {
                            $date = new DateTime($entry->date);
                            $retrievedDates[] = $date->format('Y-m-d');
                        }

                        $firstDate = new DateTime($presentWeekMonday);
                        $upcomingSundayDate = new DateTime($upcomingSunday);
                        $currentDate = clone $firstDate;

                        $expectedDates = [];
                        while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {
                            //excluding sunday
                            $expectedDates[] = $currentDate->format('Y-m-d');
                            $currentDate->modify("+1 day");
                        }

                        $missingDates = array_diff($expectedDates, $retrievedDates);
                        // missing date should be empty 
                        if (empty($missingDates)) {
                            foreach ($get_six_Data as $getsixdata) {
                                $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);

                                $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);
                                $previousMondayformated = $previousMonday->format('Y-m-d');

                                $previousMondaytimesheetsubmit = DB::table('timesheetusers')
                                    ->where('status', '1')
                                    ->where('createdby', $createdby)
                                    ->where('date', $previousMondayformated)
                                    ->exists();

                                // check previous week timesheet submitted or not 
                                if ($previousMondaytimesheetsubmit) {
                                    if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {
                                        $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);
                                        // Find the nearest next Saturday to the requested date
                                        $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);
                                        $previousMondayFormatted = $getsixdata->date;
                                        $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                                        $nextSaturdayFormatted = $lastdate;

                                        $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                                        $co = DB::table('timesheetusers')
                                            ->where('status', '0')
                                            ->where('assignment_id', 214)
                                            ->where('createdby', $createdby)
                                            ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                            ->select(DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                            ->get();

                                        foreach ($co as $codata) {
                                            DB::table('timesheetreport')->insert([
                                                'teamid'       =>     $createdby,
                                                'week'       =>     $week,
                                                'totaldays'       =>     $codata->row_count,
                                                'totaltime' =>  $codata->total_hours,
                                                'startdate'  => $previousMondayFormatted,
                                                'enddate'  => $nextSaturdayFormatted,
                                                'created_at'                =>      date('y-m-d H:i:s'),
                                            ]);
                                        }
                                    }

                                    DB::table('timesheetusers')->where('id', $getsixdata->id)->update([
                                        'status'         =>     1,
                                        'updated_at'              =>     date('y-m-d H:i:s'),
                                    ]);

                                    DB::table('timesheets')->where('id', $getsixdata->timesheetid)->update([
                                        'status'         =>     1,
                                        'updated_at'              =>     date('y-m-d H:i:s'),
                                    ]);
                                }
                            }
                        }
                    }
                }
            }
        }
    }








 // for tester 
    // public function handle()
    // {
    //     // if ('Wednesday' == date('l', time())) {
    //     //     // All employee temmeber id 
    //     $createdbyList = DB::table('timesheetusers')->distinct()->pluck('createdby')->toArray();

    //     // Implementation for all employee
    //     foreach ($createdbyList as $createdby) {
    //         // Exam leave data get hare
    //         $usertimesheetfirstdate =  DB::table('timesheetusers')
    //             ->where('status', '0')
    //             ->where('assignment_id', 214)
    //             ->where('createdby', $createdby)
    //             ->orderBy('date', 'ASC')->first();
    //         // Exam leave data should not be empty
    //         if ($usertimesheetfirstdate && !empty($usertimesheetfirstdate->date)) {

    //             $date = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date);
    //             // Automatic submit will be on this date 
    //             // find days name Wednesday 
    //             $autosubmitdate = $date->copy()->next(Carbon::SUNDAY)->addDays(3);
    //             // $autosubmitdate = $date->copy()->next(Carbon::SUNDAY)->addDays(5);
    //             $todaydate = Carbon::now('Asia/Kolkata');

    //             //autosubmitdate and todaydate should be same 
    //             // if ($autosubmitdate->isSameDay($todaydate)) {
    //             $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date)->addDays(6);

    //             $firstDate = new DateTime($usertimesheetfirstdate->date);
    //             $dayOfWeek = $firstDate->format('w');

    //             $daysToAdd = 0;

    //             if ($dayOfWeek !== '0') {
    //                 $daysToAdd = 7 - $dayOfWeek;
    //             }

    //             if ($dayOfWeek > 0) {
    //                 $daysToSubtract = $dayOfWeek - 1;
    //             } else {
    //                 $daysToSubtract = $dayOfWeek;
    //             }
    //             $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');
    //             $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');

    //             // Get six data of exam leave 
    //             $get_six_Data = DB::table('timesheetusers')
    //                 ->where('status', '0')
    //                 ->where('assignment_id', 214)
    //                 ->where('createdby', $createdby)
    //                 ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
    //                 ->orderBy('date', 'ASC')
    //                 ->get();

    //             $lastdate = $get_six_Data->max('date');

    //             // get date only of retrived data 
    //             $retrievedDates = [];
    //             foreach ($get_six_Data as $entry) {
    //                 $date = new DateTime($entry->date);
    //                 $retrievedDates[] = $date->format('Y-m-d');
    //             }

    //             $firstDate = new DateTime($presentWeekMonday);
    //             $upcomingSundayDate = new DateTime($upcomingSunday);
    //             $currentDate = clone $firstDate;

    //             $expectedDates = [];
    //             while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {
    //                 //excluding sunday
    //                 $expectedDates[] = $currentDate->format('Y-m-d');
    //                 $currentDate->modify("+1 day");
    //             }

    //             $missingDates = array_diff($expectedDates, $retrievedDates);
    //             // missing date should be empty 
    //             if (empty($missingDates)) {
    //                 foreach ($get_six_Data as $getsixdata) {
    //                     $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);

    //                     $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);
    //                     $previousMondayformated = $previousMonday->format('Y-m-d');

    //                     $previousMondaytimesheetsubmit = DB::table('timesheetusers')
    //                         ->where('status', '1')
    //                         ->where('createdby', $createdby)
    //                         ->where('date', $previousMondayformated)
    //                         ->exists();

    //                     if ($previousMondaytimesheetsubmit) {
    //                         if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {
    //                             // $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);
    //                             // Find the nearest next Saturday to the requested date
    //                             $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);
    //                             $previousMondayFormatted = $getsixdata->date;
    //                             $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
    //                             $nextSaturdayFormatted = $lastdate;

    //                             $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

    //                             $co = DB::table('timesheetusers')
    //                                 ->where('status', '0')
    //                                 ->where('assignment_id', 214)
    //                                 ->where('createdby', $createdby)
    //                                 ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
    //                                 ->select(DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
    //                                 ->get();

    //                             foreach ($co as $codata) {
    //                                 DB::table('timesheetreport')->insert([
    //                                     'teamid'       =>     $createdby,
    //                                     'week'       =>     $week,
    //                                     'totaldays'       =>     $codata->row_count,
    //                                     'totaltime' =>  $codata->total_hours,
    //                                     'startdate'  => $previousMondayFormatted,
    //                                     'enddate'  => $nextSaturdayFormatted,
    //                                     'created_at'                =>      date('y-m-d H:i:s'),
    //                                 ]);
    //                             }
    //                         }

    //                         DB::table('timesheetusers')->where('id', $getsixdata->id)->update([
    //                             'status'         =>     1,
    //                             'updated_at'              =>     date('y-m-d H:i:s'),
    //                         ]);

    //                         DB::table('timesheets')->where('id', $getsixdata->timesheetid)->update([
    //                             'status'         =>     1,
    //                             'updated_at'              =>     date('y-m-d H:i:s'),
    //                         ]);
    //                     }
    //                 }
    //             }

    //             //   return 'message'
    //             // }
    //         }
    //     }
    //     // }
    // }
	



app\Http\Controllers\TimesheetController.php
find  $lasttimesheetsubmiteddata = DB::table('timesheetreport')


     $lasttimesheetsubmiteddata = DB::table('timesheetreport')
        ->where('teamid', $authUserId)
        ->orderBy('enddate', 'desc')
        ->first();	


	
One more functionality added to the Autosubmit Exam Leave functionality  ```end hare
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php