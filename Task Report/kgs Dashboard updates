

KRA Flow ```start 1
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php
 <li><a href="{{ url('travel') }}"> Advance Claim Form</a></li>
 
 
   <li><a href="{{ url('kras') }}">KRAs</a></li>





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
routes\web.php



  // KRAs Route
  Route::resource('/kras',  KrasController::class);
  Route::get('/kras/show/{id}/{designation}', [KrasController::class, 'show'])->name('kras.show');
  Route::get('/kras/delete/{id}/{designation}', [KrasController::class, 'deleteteamwiseKra'])->name('kras.delete');
  Route::post('/kras/excelupload/teamwise', [KrasController::class, 'krasExceluploadteamwise']);
  Route::post('krabulkUpload', [KrasController::class, 'exceluploadBulk'])->name('krabulkUpload');
  Route::get('/kras/edit/{dataId}/{datarow}/{teamId}', [KrasController::class, 'edit'])->name('kras.edit');
  Route::get('/kras/destroy/{dataId}/{datarow}/{teamId}', [KrasController::class, 'destroy'])->name('kras.destroy');
  Route::post('/krastype/modifycolumn', [KrasController::class, 'modifyColumn']);
  Route::post('/krastype/deletecolumn', [KrasController::class, 'deleteColumn']);
  Route::post('/krastype/addcolumn', [KrasController::class, 'addColumn']);
  Route::post('/notification/config', [KrasController::class, 'notificationConfig']);
  Route::get('/notificationlist',  [KrasController::class, 'notificationlist']);
  Route::get('/notificationlist/delete/{id}',  [KrasController::class, 'notificationlistdelete']);








22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\imports\Krasimport.php

<?php

namespace App\Imports;

use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Illuminate\Support\Collection;

class Krasimport implements ToCollection, WithHeadingRow
{
    public $rows;

    public function collection(Collection $rows)
    {
        // filtered empty row from excell hare 
        $this->rows = $rows->filter(function ($row) {
            return !empty(array_filter($row->toArray()));
        });
    }

    // debuging hare
    // public function collection(Collection $rows)
    // {

    //     // Filter and debug each row
    //     $this->rows = $rows->filter(function ($row) {
    //         $array = $row->toArray();
    //         $result = !empty(array_filter($array));
    //         // Debug output
    //         dump($array, $result);
    //         return $result;
    //     });

    //     dd($this->rows);
    // }

}


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kras
add file 





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\stylesheet.blade.php

<style>
    .textfixed {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\emails\krapartnernotification.blade.php
resources\views\emails\krasteamnotification.blade.php

add this file 





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
replace all table 


			
KRA Flow ```end hare 1



KRA Flow ```start 2
kgslocal
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
fix for hr 

resources\views\backEnd\kras\show.blade.php

designation, [13

replace [13, 14
				
				
				
	

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php
  public function show($id, $designation)
  
            $record = DB::table('krasteam')
                ->leftJoin('krasdata', 'krasdata.id', '=', 'krasteam.krasdata_id')
                ->where('krasteam.teamid', $id)
                ->select('krasdata.*')
                ->first();



23-06-2025
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php


    public function index()
    {

        $teammembers = DB::table('teammembers')
            ->where('id', auth()->user()->teammember_id)
            ->select('id', 'team_member', 'designation')
            ->first();

        $teammemberlists = DB::table('teammembers')
            ->where('status', 1)
            ->select('id', 'team_member', 'emailid')
            ->get();

        if (is_null($teammembers?->designation)) {
            abort(403, 'Access denied. Designation is missing.');
        }

        // super admin , hr and  admin
        if ($teammembers->designation == 13 || $teammembers->designation == 14) {
            $designations = Designation::ordered()
                ->whereNotIn('name', ['Super Admin', 'HR'])
                ->get();

            $designationData = [];
            foreach ($designations as $designation) {
                $record = DB::table('krasdata')
                    ->where('designation_id', $designation->id)
                    ->whereNull('krasdata.teamid')
                    ->first();

                $key = ucwords(str_replace(' ', '_', $designation->name));

                $teammemberall = DB::table('teammembers')
                    ->leftJoin('designations', 'designations.id', '=', 'teammembers.designation')
                    ->whereNotNull('teammembers.designation')
                    ->where('teammembers.designation', $designation->id)
                    ->select('teammembers.*', 'designations.name as designation_name')
                    ->get();


                foreach ($teammemberall as $member) {
                    // $hasKra = DB::table('krasteam')
                    //     ->where('teamid', $member->id)
                    //     ->where('krasdata_id', $member->designation)
                    //     ->exists();

                    // $hasKra = DB::table('krasteam')
                    //     ->leftJoin('krasdata', 'krasdata.id', '=', 'krasteam.krasdata_id')
                    //     ->where('krasteam.teamid', $member->id)
                    //     ->exists();
                    // $member->kra_status = $hasKra ? '1' : '0';

                    $hasKra = DB::table('krasteam')
                        ->leftJoin('krasdata', 'krasdata.id', '=', 'krasteam.krasdata_id')
                        ->where('krasteam.teamid', $member->id)
                        ->select('krasdata.created_at', 'krasdata.updated_at')
                        ->first();

                    $member->kra_status = $hasKra ? '1' : '0';
                    $member->kra_created = $hasKra->created_at ?? null;
                    $member->kra_updated = $hasKra->updated_at ?? null;
                }

                $hasKras = $teammemberall->contains('kra_status', 0);

                $kratemplates = DB::table('krasdata')
                    ->where('designation_id', $designation->id)
                    ->whereNull('krasdata.teamid')
                    ->get();

                // dd($kratemplates);

                $designationData[$key] = [
                    'teammemberall' => $teammemberall,
                    'hasKras' => $hasKras,
                    'krasid' => $record?->id ?? null,
                    'designationId' => $designation->id ?? null,
                    'kratemplates' => $kratemplates ?? null,
                ];
            }
            return view('backEnd.kras.index', compact('designations', 'designationData', 'teammembers', 'teammemberlists'));
        } else {
            $designations = Designation::where('id', $teammembers->designation)->ordered()->get();
            $id = auth()->user()->teammember_id;

            $designationData = [];
            foreach ($designations as $designation) {

                // $record = DB::table('krasdata')
                //     ->where('designation_id', $designation->id)
                //     ->where('teamid', $id)
                //     ->first();

                // if (!$record) {
                //     $record = DB::table('krasdata')
                //         ->join('krasteam', function ($join) use ($designation, $id) {
                //             $join->on('krasdata.designation_id', '=', 'krasteam.krasdata_id')
                //                 ->whereNull('krasdata.teamid');
                //         })
                //         ->where('krasteam.krasdata_id', $designation->id)
                //         ->where('krasteam.teamid', $id)
                //         ->select('krasdata.*')
                //         ->first();
                // }

                $record = DB::table('krasteam')
                    ->leftJoin('krasdata', 'krasdata.id', '=', 'krasteam.krasdata_id')
                    ->where('krasteam.teamid', $id)
                    ->first();

                $decoded = $record && $record->data ? json_decode($record->data, true) : [];
                $headings = (!empty($decoded) && is_array($decoded)) ? array_keys($decoded[0]) : [];
                $key = ucwords(str_replace(' ', '_', $designation->name));

                $designationData[$key] = [
                    'data' => $decoded,
                    'headings' => $headings,
                    'teamId' => $id,
                    'id' => $record?->id ?? null,
                ];
            }
            return view('backEnd.kras.show', compact('designations', 'designationData', 'teammembers'));
        }
    }




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kras\index.blade.php


                                              <div style="margin-left: 10px">
                                                  <a data-toggle="modal" data-target=".notificationmodeltarget"
                                                      data-id="{{ $designationData[$roleKey]['designationId'] }}"
                                                      class="btn btn-sm btn-update text-black notificationmodelclass">
                                                      <i class="fas fa-bell" style="margin-right: 4px;"></i>
                                                      Notification
                                                  </a>
                                              </div>
                                              <div style="margin-left: 10px">
                                                  <a href="{{ url('kratemplatelist/' . $designationData[$roleKey]['designationId']) }}"
                                                      class="btn btn-sm btn-update text-black">
                                                      <i class="typcn typcn-document-text" style="margin-right: 4px;"></i>
                                                      KRAs Templates
                                                  </a>
                                              </div>
											  
											  
											

											
											  
											  
											  
                                              <th>Employee Name</th>
                                              <th>KRAs Status</th>
                                              <th>Created Date</th>
                                              <th>Updated Date</th>											  
											  
											  
	

                                                  <td>
                                                      @if ($row->kra_status == 1)
                                                          <span class="badge"
                                                              style="background-color: rgba(24, 255, 91, 0.33); color: #000;">
                                                              KRA
                                                          </span>
                                                      @else
                                                          <span class="badge"
                                                              style="background-color: rgb(246 154 154 / 33%);color: #000;">No
                                                              KRA</span>
                                                      @endif
                                                  </td>
                                                  <td>
                                                      {{ $row->kra_created ? date('d-m-Y', strtotime($row->kra_created)) : 'NA' }}
                                                  </td>
                                                  <td>
                                                      {{ $row->kra_updated ? date('d-m-Y', strtotime($row->kra_updated)) : 'NA' }}
                                                  </td>	
											  
											  
											  

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
 find  Route::get('/notificationlist/delete/{id}',  [KrasController::class, 'notificationlistdelete']);


  Route::get('/kratemplatelist/{designation}',  [KrasController::class, 'kratemplatelist']);
  Route::get('/kratemplatelist/delete/{id}',  [KrasController::class, 'kratemplatelistdelete']);
  Route::post('/kratemplatelist/edit',  [KrasController::class, 'kratemplatelistedit']);
  
  

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php

  public function notificationlistdelete($id)
  
  
   public function kratemplatelist($designation)
    {
        try {

            $kratemplates = DB::table('krasdata')
                ->leftJoin('designations', 'designations.id', '=', 'krasdata.designation_id')
                ->leftJoin('teammembers', 'teammembers.id', '=', 'krasdata.createdby')
                ->where('krasdata.designation_id', $designation)
                ->whereNull('krasdata.teamid')
                ->select('krasdata.*', 'designations.name as designation_name', 'teammembers.team_member')
                ->get();

            return view('backEnd.kras.templatelist', compact('kratemplates'));
        } catch (\Exception $e) {
            Log::emergency("File:" . $e->getFile() . " Line:" . $e->getLine() . " Message:" . $e->getMessage());
            report($e);
            return back()->withErrors(['msg' => 'Error: ' . $e->getMessage()])->withInput();
        }
    }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kras\templatelist.blade.php


{{-- <link href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css" rel="stylesheet"> --}}
<link href="https://cdn.datatables.net/buttons/1.7.1/css/buttons.dataTables.min.css" rel="stylesheet">

<link href="{{ url('backEnd/plugins/select2/dist/css/select2.min.css') }}" rel="stylesheet">
<link href="{{ url('backEnd/plugins/select2-bootstrap4/dist/select2-bootstrap4.min.css') }}" rel="stylesheet">
<link href="{{ url('backEnd/plugins/jquery.sumoselect/sumoselect.min.css') }}" rel="stylesheet">

@extends('backEnd.layouts.layout') @section('backEnd_content')
    <style>
        .dataTables_length {
            /* background-color: pink; */
            width: 300px;
            position: absolute;
        }
    </style>
    <div class="content-header row align-items-center m-0">
        <div class="col-sm-8 header-title p-0">
            <div class="media">
                <div class="header-icon text-success mr-3"><i class="typcn typcn-user-add-outline"></i></div>
                <div class="media-body">
                    <a href="#">
                        <h1 class="font-weight-bold" style="color:black;">KRA Template Management Dashboard</h1>
                    </a>
                    <small>Manage Key Responsibility Areas</small>
                </div>
            </div>
        </div>
    </div>

    <div class="body-content">
        <div class="card mb-4">
            @component('backEnd.components.alert')
            @endcomponent
            <div class="card-body">
                <div class="table-responsive">
                    <table id="examplee" class="table display table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Designation Name</th>
                                <th>Created By</th>
                                <th>Template Name</th>
                                <th>Created Date</th>
                                <th>Updated Date</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($kratemplates as $kratemplate)
                                <tr>
                                    <td style="display: none;">{{ $kratemplate->id }}</td>
                                    <td>{{ $kratemplate->designation_name }}</td>
                                    <td>{{ $kratemplate->team_member }}</td>
                                    <td>{{ $kratemplate->template_name }}</td>
                                    <td>{{ date('d-m-Y', strtotime($kratemplate->created_at)) }}</td>
                                    <td>{{ date('d-m-Y', strtotime($kratemplate->updated_at)) }}</td>
                                    <td>
                                        <a data-toggle="modal" data-id="{{ $kratemplate->id }}"
                                            data-template="{{ $kratemplate->template_name }}" data-target=".modalColumn"
                                            class="btn btn-info-soft btn-sm modificationColumn">
                                            <i class="far fa-edit"></i>
                                        </a>

                                        <a href="{{ url('kratemplatelist/delete/' . $kratemplate->id) }}"
                                            onclick="return confirm('Are you sure you want to delete this item?');"
                                            class="btn btn-danger-soft btn-sm">
                                            <i class="far fa-trash-alt"></i>
                                        </a>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>


    <!-- Upload Modal -->
    <div class="modal modal-danger fade modalColumn" id="modalColumnId" tabindex="-1" role="dialog"
        aria-labelledby="modificationColumn" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="modalColumnForm" method="post" action="{{ url('kratemplatelist/edit') }}">
                    @csrf
                    <div class="modal-header" style="background: #37A000">
                        <h5 style="color:white;" class="modal-title font-weight-600" id="modalLabel1">
                            KRAs Template Name Edit
                        </h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>

                    <div class="modal-body">
                        <div class="form-group">
                            <label><b>Template Name: *</b></label>
                            <input type="text" required name="templatename" class="form-control"
                                placeholder="Enter new template name">
                            <input type="hidden" class="form-control" name="templateid" id="templateid">
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-success"
                            onclick="return confirm('Are you sure you want to update this column name?');">Update</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
@endsection


<script src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/dataTables.buttons.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.print.min.js"></script>
{{-- date sorting  --}}
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script>
    $(document).ready(function() {
        $('#examplee').DataTable({
            dom: 'lfrtip',
            columnDefs: [{
                targets: [0],
                orderable: false
            }],

            buttons: [{
                    extend: 'excelHtml5',
                    filename: 'Kras',
                    exportOptions: {
                        columns: ':visible'
                    },
                    customize: function(xlsx) {
                        var sheet = xlsx.xl.worksheets['sheet1.xml'];
                        $('c', sheet).each(function() {
                            var originalText = $(this).find('is t').text();
                            var cleanedText = originalText.replace(/\s+/g, ' ').trim();
                            $(this).find('is t').text(cleanedText);
                        });
                    }
                },
                'colvis'
            ]
        });
    });
</script>

<script>
    $(document).ready(function() {
        $('.alert-success, .alert-danger, .statusss').delay(4000).fadeOut(400);
    });

    $(document).on('click', '.modificationColumn', function() {
        let id = $(this).data('id');
        let templatename = $(this).data('template');
        $('#modalColumnId input[name="templateid"]').val(id);
        $('#modalColumnId input[name="templatename"]').val(templatename);
    });
</script>





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222


  public function kratemplatelistdelete($id)
    {
        try {
            $kraMappedorNot = DB::table('krasteam')
                ->where('krasdata_id', $id)
                ->exists();

            if (!$kraMappedorNot) {
                DB::table('krasdata')->where('id', $id)->delete();
                return back()->with('statusss', ['msg' => 'KRAs template deleted successfully!']);
            }

            return back()->with('statusss', ['msg' => 'KRAs template not deleted because it is mapped with a team.']);
        } catch (\Exception $e) {
            Log::emergency("File:" . $e->getFile() . " Line:" . $e->getLine() . " Message:" . $e->getMessage());
            report($e);
            return back()->withErrors(['msg' => 'Error: ' . $e->getMessage()])->withInput();
        }
    }
	
	
	
	    public function kratemplatelistedit(Request $request)
    {
        try {
            DB::table('krasdata')->where('id', $request->templateid)
                ->update([
                    'template_name' => $request->templatename,
                    'updated_at' => now()
                ]);
            return back()->with('statusss', ['msg' => 'KRAs template name updated successfully!']);
        } catch (\Exception $e) {
            Log::emergency("File:" . $e->getFile() . " Line:" . $e->getLine() . " Message:" . $e->getMessage());
            report($e);
            return back()->withErrors(['msg' => 'Error: ' . $e->getMessage()])->withInput();
        }
    }




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php
->update([

total 11 place 

 'updated_at' => now()
 
 
 
 
 
 
 
 
 find total 9
 DB::table('krasdata')->insertGetId([


1,2,3,8,9
 'created_at' => $record->created_at,




KRA Flow ```end hare 


notification on template editing and deleteing agar bolega tabhi other wise not update ```start hare 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php

            if (!$kraMappedorNot) {
                $templateData = DB::table('krasdata')->where('id', $id)->first();
                $this->sendNotificationontemplate($templateData);








    public function kratemplatelistedit(Request $request)
    {
        try {
            $templateData = DB::table('krasdata')->where('id', $request->templateid)->first();
            $this->sendNotificationontemplate($templateData);
			
			
			
			
find function sendNotificationteamwise($teamid) after this function add this function 			
			
    function sendNotificationontemplate($template)
    {
        // user notifications start hare 
        $templateteamId = DB::table('krasteam')
            ->leftJoin('krasdata', 'krasdata.id', '=', 'krasteam.krasdata_id')
            ->where('krasdata.designation_id', $template->designation_id)
            ->pluck('krasteam.teamid');

        $teammembers = DB::table('teammembers')
            ->whereIn('id', $templateteamId)
            ->get();

        if ($teammembers->isNotEmpty()) {
            foreach ($teammembers as $member) {
                if (!empty($member->emailid)) {
                    $mailData = [
                        'teammember' => $member,
                        'created_at' => now()->format('d-m-Y H:i:s'),
                    ];

                    Mail::send('emails.krasteamnotification', $mailData, function ($msg) use ($member) {
                        $msg->to($member->emailid)->subject('KRAs template Updated');
                    });
                }
            }
        }
        // user notifications end  hare 

        // partner or target teammember notifications start hare 
        $partnerIds = DB::table('krasnotifications')
            ->where('designation_id', $template->designation_id)
            ->whereNotNull('typetarget')
            ->pluck('typetarget');



        $individualNotificationIds = DB::table('krasnotifications')
            ->where('designation_id', $template->designation_id)
            ->whereNull('typetarget')
            ->pluck('id');

        $individualIds = [];

        if ($individualNotificationIds->isNotEmpty()) {
            $individualIds = DB::table('krastargetnotification')
                ->whereIn('krasnotifications_id', $individualNotificationIds)
                ->pluck('teammember_id');
        }

        $partners = collect();
        if ($partnerIds->isNotEmpty() || !empty($individualIds)) {
            $partners = DB::table('teammembers')
                ->where(function ($query) use ($partnerIds, $individualIds) {
                    if ($partnerIds->isNotEmpty()) {
                        $query->orWhereIn('designation', $partnerIds);
                    }
                    if (!empty($individualIds)) {
                        $query->orWhereIn('id', $individualIds);
                    }
                })
                ->where('status', 1)
                ->get();
        }
        foreach ($partners as $partner) {
            if (!empty($partner->emailid)) {
                $partnerMailData = [
                    'partner' => $partner,
                    'created_at' => now()->format('d-m-Y H:i:s'),
                ];

                Mail::send('emails.krapartnernotification', $partnerMailData, function ($msg) use ($partner) {
                    $msg->to($partner->emailid)->subject('KRAs template Updated');
                });
            }
        }
        // partner or target teammember notifications end hare 
    }			
			
			
			
notification on template editing and deleteing agar bolega tabhi other wise not update 			
			

KRA Flow ```start hare 10-07-2025

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
web.php


  // KRAs Route
  Route::resource('/kras',  KrasController::class);
  Route::get('/kras/show/{id}/{designation}', [KrasController::class, 'show'])->name('kras.show');
  Route::get('/kras/delete/{id}/{designation}', [KrasController::class, 'deleteteamwiseKra'])->name('kras.delete');
  Route::post('/kras/excelupload/teamwise', [KrasController::class, 'krasExceluploadteamwise']);
  Route::post('krabulkUpload', [KrasController::class, 'exceluploadBulk'])->name('krabulkUpload');
  Route::get('/kras/edit/{dataId}/{datarow}/{teamId}', [KrasController::class, 'edit'])->name('kras.edit');
  Route::get('/kras/destroy/{dataId}/{datarow}/{teamId}', [KrasController::class, 'destroy'])->name('kras.destroy');
  Route::post('/krastype/modifycolumn', [KrasController::class, 'modifyColumn']);
  Route::post('/krastype/deletecolumn', [KrasController::class, 'deleteColumn']);
  Route::post('/krastype/addcolumn', [KrasController::class, 'addColumn']);
  Route::post('/notification/config', [KrasController::class, 'notificationConfig']);
  Route::get('/notificationlist',  [KrasController::class, 'notificationlist']);
  Route::get('/notificationlist/delete/{id}',  [KrasController::class, 'notificationlistdelete']);
  Route::get('/kratemplatelist/{designation}',  [KrasController::class, 'kratemplatelist']);
  Route::get('/kratemplatelist/delete/{id}',  [KrasController::class, 'kratemplatelistdelete']);
  Route::post('/kratemplatelist/edit',  [KrasController::class, 'kratemplatelistedit']);


  Route::get('/teams/kra/{id}',  [KrasController::class, 'teamskras']);
  Route::get('/kras/finaldraftsubmit/{teamId}/{designationId}', [KrasController::class, 'finaldraftsubmit'])->name('kras.finaldraftsubmit');
  Route::get('/krasteam/show/{id}', [KrasController::class, 'krateamshow'])->name('kras.krasteam');


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php

replace all code hare 

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kras

replace all file hare 


and 

replace kras table 

KRA Flow ```end hare 10-07-2025



1.DOwnload button on:
  Assignment-wise P&L Analysis
  Partner-wise P&L Statement
  Unresolved Tickets - HR, IT & Admin  ```start hare 
  
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kgsdashboardreport.blade.php


                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h2>Assignment-wise P&L Analysis</h2>
                        <a href="javascript:void(0);"
                            onclick="downloadTableAsCSV('assignmentprofit', 'assignment_profit_loss.csv')"
                            style="margin-top: -9px;">
                            <i class="bi bi-download" style="font-size: 1rem; color:#0a0a0b" title="Download"></i>
                        </a>
                    </div>

                    <div class="table-responsive">
                        <table id="assignmentprofit" class="table table-hover">
                            <thead>
                                <tr>
                                    <th style="padding: 17px;">Assignment Id</th>
                                    <th style="padding: 17px;">Assignment</th>
                                    <th style="padding: 17px;">Client</th>
                                    <th style="padding: 17px;">Revenue</th>
                                    <th style="padding: 17px;">Costs</th>
                                    <th style="padding: 17px;">Profit</th>
                                    <th style="padding: 17px;" class="textfixed">Margin %</th>
                                    <th style="padding: 17px;">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach ($assignmentprofitandlosses as $assignmentprofitandloss)
                                    <tr>
                                        @php
                                            $revenue = $assignmentprofitandloss->engagementfee ?? 0;
                                            $cost = $assignmentprofitandloss->total_cost ?? 0;
                                            $profit = $revenue - $cost;
                                            $margin = $revenue != 0 ? ($profit / $revenue) * 100 : 0;
                                        @endphp
                                        <td class="textfixed" style="padding: 17px;">
                                            {{ $assignmentprofitandloss->assignmentgenerate_id ?? '' }}
                                        </td>
                                        <td class="textfixed" style="padding: 17px;">
                                            {{ $assignmentprofitandloss->assignmentname ?? '' }}
                                        </td>
                                        <td class="textfixed" style="padding: 17px;">
                                            {{ $assignmentprofitandloss->client_name ?? '' }}</td>
                                        <td style="padding: 17px;">₹{{ $assignmentprofitandloss->engagementfee ?? '' }}
                                        </td>
                                        <td style="padding: 17px;">₹{{ $assignmentprofitandloss->total_cost ?? '' }}
                                        </td>
                                        <td style="padding: 17px;"
                                            class="{{ $profit < 0 ? 'text-danger' : 'text-success' }}">
                                            ₹{{ $profit }}
                                        </td>

                                        <td style="padding: 17px;"
                                            class="{{ $margin < 0 ? 'text-danger' : 'text-success' }}">
                                            {{ number_format($margin, 1) }}%
                                        </td>

                                        <td style="padding: 17px;">
                                            @if ($margin > 0)
                                                <span class="priority-tag on-track">PROFITABLE</span>
                                            @elseif ($margin < 0)
                                                <span class="priority-tag high-priority">LOSS</span>
                                            @else
                                                <span class="priority-tag delayed">BREAKEVEN</span>
                                            @endif
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
				
				
				
               <div class="card">
                    <div class="card-header">
                        <h2>Unresolved Tickets - HR, IT & Admin</h2>
                        <a href="javascript:void(0);" onclick="downloadTableAsCSV('tickets', 'tickets_list.csv')"
                            style="margin-top: -9px;">
                            <i class="bi bi-download" style="font-size: 1rem; color:#0a0a0b" title="Download"></i>
                        </a>
                    </div>

                    <div class="table-responsive">
                        <table id="tickets" class="table table-hover">
                            <thead>
                                <tr>
                                    <th class="textfixed" style="padding: 17px;">Ticket ID</th>
                                    <th style="padding: 17px;">Department</th>
                                    <th class="textfixed" style="padding: 17px;">Created By</th>
                                    <th style="padding: 17px;">Subject</th>
                                    <th class="textfixed" style="padding: 17px;">Assigned To</th>
                                    <th class="textfixed" style="padding: 17px;">Days Open</th>
                                    <th style="padding: 17px;">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach ($allTickets as $ticket)
                                    <tr>
                                        @php
                                            $department = $ticket['department'];
                                            if ($department == 'IT') {
                                                $bgColor = 'rgb(220 252 231)';
                                                $color = 'rgb(22 163 74)';
                                            } elseif ($department == 'Finance') {
                                                $bgColor = 'rgb(243 232 255)';
                                                $color = 'rgb(147 51 234)';
                                            } elseif ($department == 'HR') {
                                                $bgColor = 'rgb(219 234 254)';
                                                $color = 'rgb(37 99 235)';
                                            } else {
                                                $bgColor = '#e8f5e9';
                                                $color = '#43a047';
                                            }
                                        @endphp
                                        <td class="textfixed" style="padding: 17px;">{{ $ticket['ticket_id'] }}</td>
                                        <td style="padding: 17px;">
                                            {{-- <span class="priority-tag on-track">{{ $ticket['department'] }}</span> --}}
                                            <span class="priority-tag on-track"
                                                style=" background-color:{{ $bgColor }}; color: {{ $color }}">{{ $ticket['department'] }}</span>
                                        </td>
                                        <td class="textfixed" style="padding: 17px;">{{ $ticket['created_by'] }}</td>
                                        <td class="textfixed" style="padding: 17px;">{{ $ticket['subject'] }}</td>
                                        <td class="textfixed" style="padding: 17px;">{{ $ticket['assigned_to'] }}</td>
                                        <td class="text-success textfixed" style="padding: 17px;">
                                            @php
                                                $dueDate = Carbon\Carbon::parse($ticket['created_at']);
                                                $today = Carbon\Carbon::today();
                                                $diffInDays = abs($today->diffInDays($dueDate, false));
                                            @endphp
                                            {{ $diffInDays }}
                                        </td>
                                        <td style="padding: 17px;">
                                            @php
                                                $status = $ticket['status'];
                                            @endphp

                                            @if ($ticket['source'] === 'ticket')
                                                @if ($status == 0)
                                                    <span class="priority-tag on-open textfixed">Open</span>
                                                @elseif($status == 1)
                                                    <span class="priority-tag on-progress textfixed">In Progress</span>
                                                @elseif($status == 2)
                                                    <span class="priority-tag on-closed textfixed">close</span>
                                                @elseif($status == 3)
                                                    <span class="priority-tag on-track textfixed">Reject</span>
                                                @elseif($status == 4)
                                                    <span class="priority-tag on-closed textfixed">Overdue</span>
                                                @endif
                                            @elseif ($ticket['source'] === 'hr')
                                                @if ($status == 0)
                                                    <span class="priority-tag on-open textfixed">Open</span>
                                                @elseif($status == 1)
                                                    <span class="priority-tag on-closed textfixed">close</span>
                                                @elseif($status == 2)
                                                    <span class="priority-tag on-track textfixed">Request to close</span>
                                                @elseif($status == 3)
                                                    <span class="priority-tag on-closed textfixed">Overdue</span>
                                                @endif
                                            @endif
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
				
				
				
				
				
                <div class="card">
                    <div class="card-header">
                        <h2>Partner-wise P&L Statement</h2>
                        <a href="javascript:void(0);"
                            onclick="downloadTableAsCSV('partnerprofit', 'partner_profit_loss.csv')"
                            style="margin-top: -9px;">
                            <i class="bi bi-download" style="font-size: 1rem; color:#0a0a0b" title="Download"></i>
                        </a>
                    </div>


                    <div class="table-responsive">
                        <table id="partnerprofit" class="table table-hover">
                            <thead>
                                <tr>
                                    <th style="padding: 17px;">Partner</th>
                                    <th style="padding: 17px;">Revenue</th>
                                    <th style="padding: 17px;">Expenses</th>
                                    <th style="padding: 17px;">Profit</th>
                                    <th style="padding: 17px;" class="textfixed">Margin %</th>
                                </tr>
                            </thead>
                            <tbody>
                                @forelse ($partnerWiseProfit as $data)
                                    <tr>
                                        <td style="padding: 17px;">{{ $data->team_member }}</td>
                                        <td style="padding: 17px;">₹{{ number_format($data->total, 2) }}</td>
                                        <td style="padding: 17px;">₹{{ number_format($data->cost, 2) }}</td>
                                        <td style="padding: 17px;"
                                            class="{{ $data->profit_loss < 0 ? 'text-danger' : 'text-success' }}">
                                            ₹{{ number_format($data->profit_loss, 2) }}
                                        </td>
                                        @php
                                            $partnerrevenue = $data->total ?? 0;
                                            $partnerprofit = $data->profit_loss ?? 0;
                                            $partnermargin =
                                                $partnerrevenue != 0 ? ($partnerprofit / $partnerrevenue) * 100 : 0;
                                        @endphp
                                        <td style="padding: 17px;"
                                            class="{{ $partnermargin < 0 ? 'text-danger' : 'text-success' }}">
                                            {{ number_format($partnermargin, 1) }}%
                                        </td>
                                    </tr>
                                @empty
                                    <tr>
                                        <td colspan="5" class="text-center text-muted">No data available.</td>
                                    </tr>
                                @endforelse
                            </tbody>
                        </table>
                    </div>
                </div>	





        <script>
            function downloadTableAsCSV(tableId, filename) {
                const table = document.getElementById(tableId);
                let csvContent = "";

                const headers = table.querySelectorAll("thead th");
                const headerArray = Array.from(headers).map(header => header.textContent.trim());
                csvContent += headerArray.join(",") + "\n";

                const rows = table.querySelectorAll("tbody tr");
                rows.forEach(row => {
                    const cells = row.querySelectorAll("td");
                    const cellArray = Array.from(cells).map(cell => {
                        let text = cell.textContent.trim();

                        // Escape quotes
                        text = text.replace(/"/g, '');

                        // Fix large number formatting (e.g., assignment IDs)
                        if (/^\d{10,}$/.test(text)) {
                            // Add tab to preserve format
                            return `\t${text}`;
                        }

                        return `"${text}"`;
                    });
                    csvContent += cellArray.join(",") + "\n";
                });

                // Add UTF-8 BOM for Excel to read ₹ properly
                const BOM = "\uFEFF";
                const blob = new Blob([BOM + csvContent], {
                    type: "text/csv;charset=utf-8;"
                });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.setAttribute("href", url);
                a.setAttribute("download", filename);
                a.click();
                window.URL.revokeObjectURL(url);
            }
        </script>				


``` end hare 

KRA bugs 
Repeated name are showing in HR login ```start
KRA is not visible on user role
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222

707 delete from teammembers 
krasteam  me 707 id ko replace kare 701
```111





Team KRA' button should not be showing on Staff role
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kras\show.blade.php
@if ($teammembers && !in_array($teammembers->designation, [13, 14,


                      @if ($teammembers && !in_array($teammembers->designation, [13, 14, 11, 21, 22, 23, 9, 1]))








end hare 


Inside 'Teams KRA' button, "Reporting Manager" is not needed.
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kras\teamkras.blade.php
replace it 

  {{-- <th class="textfixed">Reporting Manager</th> --}}
  
  
                                      {{-- <td>
                                        {{ $row->reportingmanager ?? 'N/A' }}
                                    </td> --}}







end hare 

Tab name to Staff role should be showing as 'KRA'
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php
 <li><a href="{{ url('kras') }}">KRAs</a></li>


                                  @if (Auth::user()->role_id == 18 || Auth::user()->role_id == 11)
                                      <li><a href="{{ url('kras') }}">KRAs</a></li>
                                  @else
                                      <li><a href="{{ url('kras') }}">KRA</a></li>
                                  @endif
								  
								  
		



		
								  
end hare 							  
								  
Teams KRA' is showing name of users whose KRA is missing ```start
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kras\teamkras.blade.php
style="background-color: rgba(24, 255, 91, 0.33); color: #000;">


                                        <td>
                                            <span class="badge"
                                                style="background-color: rgba(24, 255, 91, 0.33); color: #000;">
                                                KRA
                                            </span>
                                        </td>



  @foreach ($teammemberall as $row)
                                @if ($row->kra_status == 1)
								
								
								
								
								
								
                                @endif
                            @endforeach								
								




end hare 


Partner's name should be visible on KRA Notification window
Pop-up size of 'Notification' tab should be increased.
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kras\index.blade.php

          .dataTables_length {
              /* background-color: pink; */
              width: 300px;
              position: absolute;
          }

          #notificationmodelId .modal-dialog {
              max-width: 70%;
              width: 70%;
          }




                                          <th class="textfixed">Type Name</th>
                                          <th class="textfixed">Target Team</th>
										  
										  
										  
										  
										  

                      const deleteUrl = "{{ url('notificationlist/delete') }}/" + reminder
                          .id;

                      let teamName = 'All Partner';
                      if (!reminder.typetarget && reminder.target_teammembers && reminder
                          .target_teammembers.length > 0) {
                          teamName = reminder.target_teammembers.map(member => member
                                  .team_member)
                              .join(', ');
                      }		





                          '<td>' + (reminder.typetarget ? 'All Partner' : 'Individual') +
                          '</td>' +
                          '<td>' + teamName + '</td>' +	












app\Http\Controllers\KrasController.php

    public function notificationlist(Request $request)
    {
        $notificationlistdata = DB::table('krasnotifications')
            ->leftJoin('designations', 'designations.id', '=', 'krasnotifications.designation_id')
            ->leftJoin('teammembers', 'teammembers.id', '=', 'krasnotifications.created_by')
            ->where('krasnotifications.designation_id',  $request->designationid)
            ->select(
                'krasnotifications.id',
                'krasnotifications.designation_id',
                'krasnotifications.created_by',
                'krasnotifications.typetarget',
                'krasnotifications.created_at',
                'krasnotifications.updated_at',
                'designations.name as designation_name',
                'teammembers.team_member as createdbyname'
            )
            ->latest()
            ->get();

        foreach ($notificationlistdata as $notification) {
            $targetsuserlist = DB::table('krastargetnotification')
                ->leftJoin('teammembers', 'teammembers.id', '=', 'krastargetnotification.teammember_id')
                ->where('krastargetnotification.krasnotifications_id', $notification->id)
                ->select('krastargetnotification.teammember_id', 'teammembers.team_member')
                ->get();

            $notification->target_teammembers = $targetsuserlist;
        }

        return response()->json([
            'notificationlistdata' => $notificationlistdata,
        ]);
    }
	
	




						  
end hare 


Back button not available in KRA flow
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kras\show.blade.php
    <div class="content-header row align-items-center m-0">


      <div class="content-header row align-items-center m-0">
          @if ($teammembers && in_array($teammembers->designation, [13, 14]))
              <nav aria-label="breadcrumb" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
                  <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right">
                      <li class="breadcrumb-item"><a href="{{ url('kras') }}">Back</a></li>
                  </ol>
              </nav>
          @endif



resources\views\backEnd\kras\teamkras.blade.php


    <div class="content-header row align-items-center m-0">
        <nav aria-label="breadcrumb" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
            <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right">
                <li class="breadcrumb-item"><a href="{{ url('kras') }}">Back</a></li>
            </ol>
        </nav>
		
	


	
resources\views\backEnd\kras\templatelist.blade.php

    <div class="content-header row align-items-center m-0">
        <nav aria-label="breadcrumb" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
            <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right">
                <li class="breadcrumb-item"><a href="{{ url('kras') }}">Back</a></li>
            </ol>
        </nav>







end hare kgs all bugs 


kgs dasboard ```start hare 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
  Route::post('/filterdashboardreport', [BackEndController::class, 'filterdashboardreport']);
  
  
   public function index()
  
resources\views\backEnd\kgsdashboardreport.blade.php



  public  function convertusdtoinr($usdAmountconvert)
  {

    $totalamountInr = 0;
    $totalUsdamount = 0;
    foreach ($usdAmountconvert as $bill) {

      if ($bill->currency == 3) {
        // INR amount added
        $totalamountInr += $bill->total_amount;
      } elseif ($bill->currency == 1) {
        // Get USD rate for that bill date
        $response = Http::get("https://api.frankfurter.app/{$bill->bill_date}", [
          'from' => 'USD',
          'to' => 'INR'
        ]);

        $rate = $response->successful()
          ? ($response->json()['rates']['INR'] ?? 0)
          : 0;
        $totalUsdamount += $bill->total_amount * $rate;
        // dd($bill, $rate, $totalUsdamount);
      }
    }

    return round($totalamountInr + $totalUsdamount, 2);
  }




app\Http\Controllers\BackEndController.php
use Illuminate\Support\Facades\Http;



     // ->whereIn('timesheets.created_by', [815, 818])   2 place per hai 




22-08-2025 bugs ```start
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kgsdashboardreport.blade.php

                    {{-- <div class="col-md-6 col-lg-3 mb-3">
                        <div class="p-3 shadow-sm border border-primary rounded text-dark"
                            style=" background-color: rgb(235, 231, 248)">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <div class="font-weight-bold small" style="margin-bottom: 10px;">Work From Home
                                    </div>
                                    <div class="h4 font-weight-bold">{{ $workFromHome }}</div>
                                    <div class="text-muted small" style="font-size: 9px;">Monthly Summary</div>
                                    <div class="small mt-2">&nbsp;</div>
                                </div>
                            </div>
                        </div>
                    </div> --}}
					
					
					
					
					
					
					
                {{-- <div class="card">
                    <div class="card-header">
                        <h2><i class="fa-solid fa-triangle-exclamation text-danger"></i> High Priority Tasks Pending</h2>
                    </div>

                    <div class="document-progress">
                        @foreach ($highpriorityAssignments as $highpriorityAssignment)
                            @php
                                $dueDate = Carbon\Carbon::parse($highpriorityAssignment->finalassignmentenddate);
                                $today = Carbon\Carbon::today();
                                $diffInDays = $today->diffInDays($dueDate, false);

                                if ($diffInDays < 0) {
                                    $dueText = 'Due: Delayed';
                                    $color = '#8b0000';
                                    $bgColor = '#ff00001f';
                                } elseif ($diffInDays === 0) {
                                    $dueText = 'Due: Today';
                                    $color = '#eb1010';
                                    $bgColor = '#f916161f';
                                } elseif ($diffInDays === 1) {
                                    $dueText = 'Due: Tomorrow';
                                    $color = '#eb1010';
                                    $bgColor = '#f916161f';
                                } elseif ($diffInDays > 1 && $diffInDays <= 5) {
                                    $dueText = "Due: {$diffInDays} days";
                                    $color = '#f97316';
                                    $bgColor = '#f96d1624';
                                } else {
                                    $dueText = "Due: {$diffInDays} days";
                                    $color = '#f9c016';
                                    $bgColor = '#f9cb1629';
                                }
                            @endphp

                            <div class="document-card" style="background-color: {{ $bgColor }};">
                                <div class="ecqr-header" style="margin: 0;">
                                    <div class="ecqr-title">
                                        <h3>{{ $highpriorityAssignment->assignmentname }} -
                                            {{ $highpriorityAssignment->client_name }}</h3>
                                        <p style="margin: 0; color: {{ $color }}">{{ $dueText }}</p>
                                        <p style="margin: 0;">Date: {{ $highpriorityAssignment->finalassignmentenddate }}
                                        </p>
                                    </div>
                                </div>
                            </div>
                        @endforeach
                    </div>
                </div> --}}
				
				
				
				
				
				
				


                            <tbody>
                                {{-- @foreach ($allTickets as $ticket) --}}
                                @forelse ($allTickets as $ticket)
                                    <tr>
                                        @php
                                            $department = $ticket['department'];
                                            if ($department == 'IT') {
                                                $bgColor = 'rgb(220 252 231)';
                                                $color = 'rgb(22 163 74)';
                                            } elseif ($department == 'Finance') {
                                                $bgColor = 'rgb(243 232 255)';
                                                $color = 'rgb(147 51 234)';
                                            } elseif ($department == 'HR') {
                                                $bgColor = 'rgb(219 234 254)';
                                                $color = 'rgb(37 99 235)';
                                            } else {
                                                $bgColor = '#e8f5e9';
                                                $color = '#43a047';
                                            }
                                        @endphp
                                        <td class="textfixed" style="padding: 17px;">{{ $ticket['ticket_id'] }}</td>
                                        <td style="padding: 17px;">
                                            {{-- <span class="priority-tag on-track">{{ $ticket['department'] }}</span> --}}
                                            <span class="priority-tag on-track"
                                                style=" background-color:{{ $bgColor }}; color: {{ $color }}">{{ $ticket['department'] }}</span>
                                        </td>
                                        <td class="textfixed" style="padding: 17px;">{{ $ticket['created_by'] }}</td>
                                        <td class="textfixed" style="padding: 17px;">{{ $ticket['subject'] }}</td>
                                        <td class="textfixed" style="padding: 17px;">{{ $ticket['assigned_to'] }}</td>
                                        <td class="text-success textfixed" style="padding: 17px;">
                                            @php
                                                $dueDate = Carbon\Carbon::parse($ticket['created_at']);
                                                $today = Carbon\Carbon::today();
                                                $diffInDays = abs($today->diffInDays($dueDate, false));
                                            @endphp
                                            {{ $diffInDays }}
                                        </td>
                                        <td style="padding: 17px;">
                                            @php
                                                $status = $ticket['status'];
                                            @endphp

                                            @if ($ticket['source'] === 'ticket')
                                                @if ($status == 0)
                                                    <span class="priority-tag on-open textfixed">Open</span>
                                                @elseif($status == 1)
                                                    <span class="priority-tag on-progress textfixed">In Progress</span>
                                                @elseif($status == 2)
                                                    <span class="priority-tag on-closed textfixed">close</span>
                                                @elseif($status == 3)
                                                    <span class="priority-tag on-track textfixed">Reject</span>
                                                @elseif($status == 4)
                                                    <span class="priority-tag on-closed textfixed">Overdue</span>
                                                @endif
                                            @elseif ($ticket['source'] === 'hr')
                                                @if ($status == 0)
                                                    <span class="priority-tag on-open textfixed">Open</span>
                                                @elseif($status == 1)
                                                    <span class="priority-tag on-closed textfixed">close</span>
                                                @elseif($status == 2)
                                                    <span class="priority-tag on-track textfixed">Request to close</span>
                                                @elseif($status == 3)
                                                    <span class="priority-tag on-closed textfixed">Overdue</span>
                                                @endif
                                            @endif
                                        </td>
                                    </tr>
                                    {{-- @endforeach --}}
                                @empty
                                    <tr>
                                        <td colspan="7" class="ecqr-card text-center text-muted p-4">
                                            Data Not Found.
                                        </td>
                                    </tr>
                                @endforelse
                            </tbody>








                <div class="card">
                    <div class="card-header">
                        <h2>Staff Allocation vs Actual Timesheet Analysis</h2>
                    </div>
                    {{-- <canvas id="expenseChart2" width="auto" height="80"></canvas> --}}
                    @if ($teamAllocatedHours->isEmpty())
                        <div class="ecqr-card text-center text-muted p-4">
                            Data Not Found.
                        </div>
                    @else
                        <div style="overflow-x: auto; white-space: nowrap;">
                            <canvas id="expenseChart2" height="300"></canvas>
                        </div>
                    @endif
                </div>



        @if (!$teamAllocatedHours->isEmpty())
            <script>
                const staffAllocationCtx = document.getElementById('expenseChart2').getContext('2d');
                var teamAllocatedHours = @json($teamAllocatedHours);
                // Extract data from teamAllocatedHours array
                const allocatedHours = teamAllocatedHours.map(item => parseInt(item.teamallocatedhours));
                const actualHours = teamAllocatedHours.map(item => item.actualhours);
                const discrepancy = teamAllocatedHours.map(item => item.discrepancy);

                // Labels for X-axis (teammember name).
                const teamMembers = teamAllocatedHours.map(item => item.team_member);

                const chartWidth = teamMembers.length * 140; // 140px per team
                document.getElementById('expenseChart2').width = chartWidth;

                const expenseChart2 = new Chart(staffAllocationCtx, {
                    type: 'bar',
                    data: {
                        labels: teamMembers,
                        datasets: [{
                                label: 'Allocated Hours',
                                data: allocatedHours,
                                backgroundColor: 'rgb(59, 130, 246)',
                                borderColor: 'rgb(59, 130, 246)',
                                borderWidth: 1 // border width
                            },
                            {
                                label: 'Actual Hours',
                                data: actualHours,
                                backgroundColor: 'rgb(16, 185, 129)',
                                borderColor: 'rgb(16, 185, 129)',
                                borderWidth: 1 // border width
                            },
                            {
                                label: 'Discrepancy',
                                data: discrepancy,
                                backgroundColor: 'rgb(239, 68, 68)',
                                borderColor: 'rgb(239, 68, 68)',
                                borderWidth: 1 // border width
                            }
                        ]
                    },
                    options: {
                        responsive: false, // scrolling enable
                        maintainAspectRatio: false,
                        scales: {
                            // y axis start value from 0
                            y: {
                                // max: 165,
                                // beginAtZero: true,
                                // // min: 0,
                                // ticks: {
                                //     stepSize: 55
                                // }
                                max: 1200,
                                beginAtZero: true,
                                // min: 0,
                                ticks: {
                                    stepSize: 200
                                }
                            }
                        },

                        plugins: {
                            legend: {
                                // display: false
                                position: 'bottom',
                                labels: {
                                    font: {
                                        size: 14,
                                        weight: 'bold',
                                    },
                                    color: 'black',
                                    padding: 20,
                                    boxWidth: 20,
                                    boxHeight: 10
                                }
                            },
                            tooltip: {
                                // Default tooltip disabled
                                enabled: false,
                                // custom tooltip using external function.
                                external: function(context) {
                                    // Tooltip Element
                                    let tooltipEl = document.getElementById('chartjs-tooltip');

                                    // Create element on first render
                                    if (!tooltipEl) {
                                        tooltipEl = document.createElement('div');
                                        tooltipEl.id = 'chartjs-tooltip';
                                        tooltipEl.innerHTML = '<div></div>';
                                        document.body.appendChild(tooltipEl);
                                    }

                                    const tooltipModel = context.tooltip;

                                    // Hide if no tooltip
                                    if (tooltipModel.opacity === 0) {
                                        tooltipEl.style.opacity = 0;
                                        return;
                                    }

                                    // Set Text
                                    if (tooltipModel.body) {
                                        const index = tooltipModel.dataPoints[0].dataIndex;
                                        const month = teamMembers[index];
                                        const allocatedHoursValue = allocatedHours[index];
                                        const actualHoursValue = actualHours[index];
                                        const discrepancyValue = discrepancy[index];

                                        const innerHtml = `
                        <div style="background: white; border: 1px solid #ccc; padding: 8px; border-radius: 4px;">
                            <div style="color: black; font-weight: bold; margin-bottom: 4px;">${month}</div>
                            <div style="color: blue;">Allocated Hours: ${allocatedHoursValue} hrs</div>
                            <div style="color: green;">Actual Hours: ${actualHoursValue} hrs</div>
                            <div style="color: red;">Discrepancy: ${discrepancyValue} hrs</div>
                        </div>
                  `;

                                        tooltipEl.innerHTML = innerHtml;
                                    }
                                    // exact position of Tooltip set  near by mouse .
                                    const position = context.chart.canvas.getBoundingClientRect();
                                    tooltipEl.style.opacity = 1;
                                    tooltipEl.style.position = 'absolute';
                                    tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX +
                                        'px';
                                    tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY +
                                        'px';
                                    tooltipEl.style.pointerEvents = 'none';
                                    tooltipEl.style.zIndex = 999;
                                }
                            }
                        },
                        interaction: {
                            mode: 'index',
                            intersect: false
                        }
                    }
                });
            </script>
        @endif
		
		
		
		
		
		
		
		
		
app\Http\Controllers\BackEndController.php


      // Upcoming Assignments
      $upcomingFromPlannings  = DB::table('assignmentplannings')
        ->whereDate('assignmentstartdate', '>=', Carbon::today())
        ->count();

      $upcomingFromBudgetings = DB::table('assignmentbudgetings')
        ->whereRaw('COALESCE(actualstartdate, tentativestartdate) > ?', [Carbon::today()->toDateString()])
        ->count();

	

end hare and deployed on kgsdemo 25-08-2025	







25-08-2025 bugs kgsdashboard
Allocated hour is showing zero in 'Staff Allocation vs Actual Timesheet Analysis'. ```start
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php

      $teamAllocatedHours = DB::table('timesheetusers')
        ->join('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->whereIn('teammembers.id', [14, 23, 187, 305, 659, 815])
        // ->whereNotIn('teammembers.role_id', [13])
        ->whereBetween('timesheetusers.created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->select(
          'teammembers.id as teammember_id',
          'teammembers.team_member',
          'teammembers.role_id',
          DB::raw('SUM(timesheetusers.totalhour) as actualhours')
        )
        ->groupBy('teammembers.id', 'teammembers.team_member', 'teammembers.role_id')
        // ->limit(6)
        ->get();
		
		
		foreach ($teamAllocatedHours as $teamAllocatedHour) {
        if ($teamAllocatedHour->role_id == 13) {
          $allocatedHours1 = DB::table('assignmentmappings')
            ->where('assignmentmappings.eqcrpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentmappings.eqcresthour');

          $allocatedHours2 = DB::table('assignmentmappings')
            ->where('assignmentmappings.leadpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentmappings.partneresthour');

          $allocatedHours3 = DB::table('assignmentmappings')
            ->where('assignmentmappings.otherpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentmappings.otherpartneresthour');

          $allocatedHours = $allocatedHours1 + $allocatedHours2 + $allocatedHours3;
        } else {
          $allocatedHours = DB::table('assignmentteammappings')
            ->where('assignmentteammappings.teammember_id', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentteammappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentteammappings.teamesthour');
        }

        if (is_null($allocatedHours)) {
          $allocatedHours = 0;
        }
        $teamAllocatedHour->teamallocatedhours = $allocatedHours;
        $teamAllocatedHour->discrepancy = $teamAllocatedHour->actualhours - (float) $allocatedHours;
      }
		
		
		
		
		
end hare 		
		
Chart 'NFRA Audits &amp; Quality Reviews' should also include peer checklist as well  ```start		
		
find ->whereIn('assignmentmappings.eqcrapplicability', [1, 2
	
  ->whereIn('assignmentmappings.eqcrapplicability', [1, 2, 3])





find  NFRA Audits & Quality Reviews

// NFRA Audits, Quality Reviews & Peer Review






resources\views\backEnd\kgsdashboardreport.blade.php

No NFRA Audits, Quality Reviews & Peer Review found.


 <h2>NFRA Audits, Quality Reviews & Peer Review</h2>



end hare 

3.Bills Pending For Collection' not showing any amount in KPI
4.Not showing any amount in 'Payments Not Recieved' KPI   ```start
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php


      $outstandingBills = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
        ->whereNotNull('invoices.id')
        ->where('assignmentbudgetings.status', 0)
        // ->whereIn('invoices.currency', [1, 3])
        ->where(function ($q) {
          $q->whereIn('invoices.currency', [1, 3])
            ->orWhereNull('invoices.currency');
        })
        ->select(
          'invoices.currency',
          // 'assignmentmappings.assignmentgenerate_id',
          DB::raw("DATE_FORMAT(outstandings.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(outstandings.AMT) as total_amount')
        )
        ->groupBy('invoices.currency', 'bill_date')
        ->get();
		
		
		
		
		
		
		
  public  function convertusdtoinr($usdAmountconvert)
  {

    $totalamountInr = 0;
    $totalUsdamount = 0;
    foreach ($usdAmountconvert as $bill) {

      if ($bill->currency == 3 || is_null($bill->currency)) {
        // INR amount added
        $totalamountInr += $bill->total_amount;
      } elseif ($bill->currency == 1) {
        // Get USD rate for that bill date
        $response = Http::get("https://api.frankfurter.app/{$bill->bill_date}", [
          'from' => 'USD',
          'to' => 'INR'
        ]);

        $rate = $response->successful()
          ? ($response->json()['rates']['INR'] ?? 0)
          : 0;
        $totalUsdamount += $bill->total_amount * $rate;
        // dd($bill, $rate, $totalUsdamount);
      }
    }

    return round($totalamountInr + $totalUsdamount, 2);
  }




28-08-2025
kgs dashboard report deployed on kgs live ```start hare 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php

  public function index()
  
  
      if (auth()->user()->role_id == 11) {

      // financial year
      $currentDate4 = Carbon::now();
      // $currentDate4 = Carbon::parse('2024-07-01');
      // $currentDate4 = Carbon::parse('2024-07-01 13:30:00');
      $currentMonth4 = $currentDate4->format('F');
      if ($currentDate4->month >= 4) {
        // Current year financial year
        $financialStartDate = Carbon::create($currentDate4->year, 4, 1);
        $financialEndDate = Carbon::create($currentDate4->year + 1, 3, 31);
      } else {
        // Previous year financial year
        $financialStartDate = Carbon::create($currentDate4->year - 1, 4, 1);
        $financialEndDate = Carbon::create($currentDate4->year, 3, 31);
      }

      $financialStartYear = now()->month >= 4 ? now()->year : now()->year - 1;
      $financialEndYear = $financialStartYear + 1;

      $monthNames = [
        1  => 'January',
        2  => 'February',
        3  => 'March',
        4  => 'April',
        5  => 'May',
        6  => 'June',
        7  => 'July',
        8  => 'August',
        9  => 'September',
        10 => 'October',
        11 => 'November',
        12 => 'December'
      ];


      // How many amounts pending for invoice genrated
      $billspending = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->whereNull('invoices.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', 0)
        ->sum('assignmentmappings.engagementfee');

      // Bills Pending For Collection
      // $billspendingforcollection = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
      //   // ensures invoice is created
      //   ->whereNotNull('invoices.id')
      //   ->where('assignmentbudgetings.status', 0)
      //   ->sum('outstandings.AMT');
      // // ->get();

      $outstandingBills = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
        ->whereNotNull('invoices.id')
        ->where('assignmentbudgetings.status', 0)
        // ->whereIn('invoices.currency', [1, 3])
        ->where(function ($q) {
          $q->whereIn('invoices.currency', [1, 3])
            ->orWhereNull('invoices.currency');
        })
        ->select(
          'invoices.currency',
          // 'assignmentmappings.assignmentgenerate_id',
          DB::raw("DATE_FORMAT(outstandings.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(outstandings.AMT) as total_amount')
        )
        ->groupBy('invoices.currency', 'bill_date')
        ->get();

      $billspendingforcollection = $this->convertusdtoinr($outstandingBills);

      // How many assignments completed in this months
      $assignmentcompleted = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        // ->where('assignmentbudgetings.status', 0)
        ->whereMonth('assignmentbudgetings.otpverifydate', Carbon::now()->month)
        ->whereYear('assignmentbudgetings.otpverifydate', Carbon::now()->year)
        ->count();

      // How many delayed Assignments
      $delayedAssignments = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        // ->where('assignmentbudgetings.status', 1)
        ->whereRaw('COALESCE(DATE(assignmentbudgetings.actualenddate), DATE(assignmentbudgetings.tentativeenddate)) < ?', [Carbon::today()->toDateString()])
        ->count();

      // How many tender submitted this months
      $tendersSubmittedCount = DB::table('tenders')
        ->where('tendersubmitstatus', 1)
        ->whereMonth('date', Carbon::now()->month)
        ->whereYear('date', Carbon::now()->year)
        ->count();

      // How many NAFRA are running
      $auditsDue = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentmappings.eqcrapplicability', 1)
        ->count();

      // total amount of convence, how many amount approved for convence in this months or Exceptional Expenses 
      $exceptionalExpenses = DB::table('outstationconveyances')
        ->where('status', 6)
        ->whereMonth('approveddate', Carbon::now()->month)
        ->whereYear('approveddate', Carbon::now()->year)
        ->sum('finalamount');

      // how many users not accepted independance mail till now
      $totalNotFilled = DB::table('assignmentmappings')
        ->select(DB::raw('COUNT(*) as total_not_filled'))
        ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
        ->leftJoin('annual_independence_declarations', function ($join) {
          $join->on('annual_independence_declarations.assignmentgenerateid', '=', 'assignmentmappings.assignmentgenerate_id')
            ->on('annual_independence_declarations.createdby', '=', 'teammembers.id')
            ->where('annual_independence_declarations.type', 2);
        })
        ->whereNull('annual_independence_declarations.id') // Members without declarations
        ->groupBy('assignmentmappings.assignmentgenerate_id')
        ->get()
        ->sum('total_not_filled');

      // Assignment Status Overview
      $assignmentOverviews = DB::table('assignmentmappings')
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name',
          DB::raw('(SELECT SUM(totalhour) FROM timesheetusers WHERE timesheetusers.assignmentgenerate_id = assignmentmappings.assignmentgenerate_id) as workedHours')
        )
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->orderByDesc('assignmentbudgetings.id')
        // ->limit(3)
        ->get()
        ->map(function ($assignmentOverview) {
          $totalHours = $assignmentOverview->esthours ?? 0;
          $workedHours = $assignmentOverview->workedHours ?? 0;
          $completionPercentage = $totalHours > 0 ? round(($workedHours / $totalHours) * 100, 2) : 0;
          $assignmentOverview->completionPercentage = $completionPercentage;
          return $assignmentOverview;
        });


      // Document Completion Progress
      $documentCompletions = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        // ->where('assignmentbudgetings.status', 1)
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->orderByDesc('assignmentbudgetings.id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'clients.client_name'
        )
        // ->limit(6)
        ->get();


      foreach ($documentCompletions as $mapping) {
        $assignmentId = $mapping->assignmentgenerate_id;

        // Get assignment_id and eqcrapplicability
        $assignmentMapping = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $assignmentId)
          ->select('assignment_id', 'eqcrapplicability')
          ->first();

        // Determine EQCR type name
        $eqcrTypeName = '';
        $eqcrAssignmentId = null;
        if (isset($assignmentMapping->eqcrapplicability)) {
          switch ($assignmentMapping->eqcrapplicability) {
            case 1:
              $eqcrTypeName = 'NFRA';
              break;
            case 2:
              $eqcrTypeName = 'Quality Review';
              break;
            case 3:
              $eqcrTypeName = 'Peer Review';
              break;
            case 4:
              $eqcrTypeName = 'Others';
              break;
            case 5:
              $eqcrTypeName = 'PCAOB';
              break;
          }
          // Get the assignment_id for the EQCR type
          $specialAssignment = DB::table('assignments')
            ->where('assignment_name', $eqcrTypeName)
            ->first();
          if ($specialAssignment) {
            $eqcrAssignmentId = $specialAssignment->id;
          }
        }
        $mapping->eqcr_type_name = $eqcrTypeName;

        // Regular Checklist Calculations (Exclude EQCR assignment_id)
        $classificationIds = DB::table('financialstatementclassifications')
          ->where('assignment_id', $assignmentMapping->assignment_id)
          ->where(function ($q) use ($assignmentId) {
            $q->whereNull('assignmentgenerate_id')->orWhere('assignmentgenerate_id', $assignmentId);
          })
          ->when($eqcrAssignmentId, function ($query) use ($eqcrAssignmentId) {
            $query->where('assignment_id', '!=', $eqcrAssignmentId);
          })
          ->pluck('id');



        $subClassIds = DB::table('subfinancialclassfications')
          ->whereIn('financialstatemantclassfication_id', $classificationIds)
          ->pluck('id');



        $totalQuestions = DB::table('auditquestions')
          ->whereIn('financialstatemantclassfication_id', $classificationIds)
          ->whereIn('subclassfied_id', $subClassIds)
          ->count();


        $statusCounts = DB::table('checklistanswers')
          ->join('statuses', 'checklistanswers.status', '=', 'statuses.id')
          ->where('checklistanswers.assignment_id', $assignmentId)
          ->whereIn('checklistanswers.financialstatemantclassfication_id', $classificationIds)
          ->whereIn('checklistanswers.subclassfied_id', $subClassIds)
          ->select(
            'statuses.name as status_name',
            DB::raw('COUNT(*) as count')
          )
          ->groupBy('statuses.name')
          ->pluck('count', 'status_name');



        $closedQuestions = $statusCounts['CLOSE'] ?? 0;

        $mapping->documentation_percentage = $totalQuestions > 0
          ? round(($closedQuestions / $totalQuestions) * 100, 2)
          : 0;
      }
      // Document Completion Progress end hare 


      // NFRA Audits, Quality Reviews & Peer Review
      $ecqrAudits = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.eqcrpartner')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        // ->where('assignmentbudgetings.status', 1)
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->whereIn('assignmentmappings.eqcrapplicability', [1, 2, 3])
        ->select(
          'assignmentmappings.*',
          'teammembers.team_member',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        // ->limit(3)
        ->get();

      foreach ($ecqrAudits as $audit) {
        $assignmentId = $audit->assignmentgenerate_id;

        // get reviewer assignment id (based on eqcrapplicability)
        $eqcrTypeName = '';
        $eqcrAssignmentId = null;
        switch ($audit->eqcrapplicability) {
          case 1:
            $eqcrTypeName = 'NFRA';
            break;
          case 2:
            $eqcrTypeName = 'Quality Review';
            break;
          case 3:
            $eqcrTypeName = 'Peer Review';
            break;
          case 4:
            $eqcrTypeName = 'Others';
            break;
          case 5:
            $eqcrTypeName = 'PCAOB';
            break;
        }
        if ($eqcrTypeName) {
          $specialAssignment = DB::table('assignments')
            ->where('assignment_name', $eqcrTypeName)
            ->first();
          if ($specialAssignment) {
            $eqcrAssignmentId = $specialAssignment->id;
          }
        }

        $audit->reviewer_documentation_percentage = 0;

        if ($eqcrAssignmentId) {
          $reviewerClassificationIds = DB::table('financialstatementclassifications')
            ->where('assignment_id', $eqcrAssignmentId)
            ->where(function ($q) use ($assignmentId) {
              $q->whereNull('assignmentgenerate_id')->orWhere('assignmentgenerate_id', $assignmentId);
            })
            ->pluck('id');

          $reviewerSubClassIds = DB::table('subfinancialclassfications')
            ->whereIn('financialstatemantclassfication_id', $reviewerClassificationIds)
            ->pluck('id');

          $reviewerTotalQuestions = DB::table('auditquestions')
            ->whereIn('financialstatemantclassfication_id', $reviewerClassificationIds)
            ->whereIn('subclassfied_id', $reviewerSubClassIds)
            ->count();

          $reviewerStatusCounts = DB::table('checklistanswers')
            ->join('statuses', 'checklistanswers.status', '=', 'statuses.id')
            ->where('checklistanswers.assignment_id', $assignmentId)
            ->whereIn('checklistanswers.financialstatemantclassfication_id', $reviewerClassificationIds)
            ->whereIn('checklistanswers.subclassfied_id', $reviewerSubClassIds)
            ->select('statuses.name as status_name', DB::raw('COUNT(*) as count'))
            ->groupBy('statuses.name')
            ->pluck('count', 'status_name');

          $reviewerClosed =  ($reviewerStatusCounts['CLOSE'] ?? 0) +
            ($reviewerStatusCounts['NOT-APPLICABLE'] ?? 0);

          $audit->reviewer_documentation_percentage = $reviewerTotalQuestions > 0
            ? round(($reviewerClosed / $reviewerTotalQuestions) * 100, 2)
            : 0;
        }
      }



      // High Priority Tasks Pending
      $highpriorityAssignments  = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        ->limit(6)
        ->get();


      // Fetch IT and Finance Tickets or Unresolved Tickets - HR, IT & Admin
      $ticketDatas = Assetticket::with(['financerequest', 'createdBy', 'partner'])
        ->whereIn('type', [0, 1])
        ->whereBetween('created_at', [$financialStartDate, $financialEndDate])
        ->orderByDesc('id')
        // ->limit(4)
        ->get()
        ->map(function ($item) {
          return [
            'ticket_id' => $item->generateticket_id,
            'department' => $item->type == 0 ? 'IT' : 'Finance',
            'created_by' => $item->createdBy->team_member ?? '',
            'subject' => $item->subject,
            'assigned_to' => $item->partner->team_member ?? '',
            'created_at' => $item->created_at,
            'status' => $item->status,
            'source' => 'ticket',
          ];
        });


      // Fetch HR Tasks
      $hrTickets = DB::table('tasks')
        ->select(
          'tasks.*',
          'patnerid.team_member as partnername',
          'createdby.team_member as createdbyname',
          'hrfunctions.hrfunction'
        )
        ->where('tasks.task_type', 4)
        ->whereBetween('tasks.created_at', [$financialStartDate, $financialEndDate])
        ->leftJoin('teammembers as patnerid', 'patnerid.id', '=', 'tasks.partner_id')
        ->leftJoin('teammembers as createdby', 'createdby.id', '=', 'tasks.createdby')
        ->leftJoin('hrfunctions', 'hrfunctions.id', '=', 'tasks.hrfunction')
        ->orderByDesc('tasks.id')
        // ->limit(4)
        ->get()
        ->map(function ($item) {
          return [
            'ticket_id' => 'N/A',
            'department' => 'HR',
            'created_by' => $item->createdbyname ?? '',
            'subject' => $item->taskname ?? '',
            'assigned_to' => $item->partnername ?? '',
            'created_at' => $item->created_at,
            'status' => $item->status,
            'source' => 'hr',
          ];
        });

      $allTickets = $ticketDatas->merge($hrTickets);

      // Assignment-wise P&L Analysis and Loss Making Assignments
      $assignmentprofitandlosses = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->orderByDesc('assignmentbudgetings.id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        // ->limit(6)
        ->get();

      $assignmentCosts = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->where('timesheetusers.assignmentgenerate_id', 254418551033)
        // ->whereBetween(DB::raw("STR_TO_DATE(timesheetusers.date, '%d-%m-%Y')"), [
        //   $financialStartDate->format('Y-m-d'),
        //   $financialEndDate->format('Y-m-d')
        // ])
        ->select('timesheetusers.assignmentgenerate_id', DB::raw('SUM(timesheetusers.totalhour * teammembers.cost_hour) as total_cost'))
        ->groupBy('timesheetusers.assignmentgenerate_id')
        ->pluck('total_cost', 'assignmentgenerate_id');

      // dd($assignmentprofitandlosses);

      $lossMakingCount = 0;
      foreach ($assignmentprofitandlosses as $assignment) {
        $assignment->total_cost = $assignmentCosts[$assignment->assignmentgenerate_id] ?? 0;

        // Loss Making Assignments
        $revenue = $assignment->engagementfee ?? 0;
        $cost = $assignment->total_cost ?? 0;
        $profit = $revenue - $cost;

        if ($profit < 0) {
          $lossMakingCount++;
        }
      }

      // Upcoming Assignments
      $upcomingFromPlannings = DB::table('assignmentplannings')
        ->where('status', 0)
        ->whereDate('assignmentstartdate', '>=', Carbon::today())
        ->count();

      $upcomingFromBudgetings = DB::table('assignmentbudgetings')
        ->whereRaw('COALESCE(actualstartdate, tentativestartdate) > ?', [Carbon::today()->toDateString()])
        ->count();

      $totalUpcomingAssignments = $upcomingFromPlannings + $upcomingFromBudgetings;


      // How many amounts pending for collection within 15 days or Payments Not Recieved
      // $billspending15Days = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('payments', 'payments.invoiceid', '=', 'invoices.invoice_id')
      //   ->where('assignmentbudgetings.status', 0)
      //   // ->where('invoices.invoicescategory', 2)
      //   ->whereNotNull('invoices.id') // Invoice is created
      //   ->whereNull('payments.invoiceid') // Payment not yet received
      //   ->whereDate('invoices.created_at', '>=', Carbon::today()->subDays(15)) // Only within last 15 days
      //   ->sum('invoices.total');
      // // ->select(
      // //   'assignmentmappings.*',
      // // )
      // // ->get();
      // // dd($billspending15Days);

      $billspending15Daysdata = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('payments', 'payments.invoiceid', '=', 'invoices.invoice_id')
        ->where('assignmentbudgetings.status', 0)
        // ->where('invoices.invoicescategory', 2)
        ->whereNotNull('invoices.id') // Invoice is created
        ->where('invoices.status', 2)
        ->whereNull('payments.invoiceid')  // Payment not yet received
        // Only within last 15 days
        ->whereBetween('invoices.created_at', [
          Carbon::today()->subDays(15)->startOfDay(),
          Carbon::today()->endOfDay()
        ])
        ->select(
          'invoices.currency',
          DB::raw("DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(invoices.total) as total_amount')
        )
        ->groupBy('invoices.currency', 'bill_date')
        ->get();

      $billspending15Days = $this->convertusdtoinr($billspending15Daysdata);

      // Timesheet Filled On Closed Assignment
      $timesheetOnClosedAssignment = DB::table('assignmentmappings')
        ->join('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->join('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->whereExists(function ($query) {
          $query->select(DB::raw(1))
            ->from('timesheetusers')
            ->whereRaw('timesheetusers.assignmentgenerate_id = assignmentmappings.assignmentgenerate_id')
            ->whereRaw("DATE(timesheetusers.created_at) > DATE(COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate))");
        })
        ->select('assignmentmappings.assignmentgenerate_id')
        ->distinct()
        ->count();


      // Partner-wise P&L Statement
      $assignmentGenerateIds = DB::table('assignmentbudgetings')
        ->whereBetween('periodstartdate', [$financialStartDate, $financialEndDate])
        ->whereBetween('periodenddate', [$financialStartDate, $financialEndDate])
        ->pluck('assignmentgenerate_id');

      $invoices = DB::table('invoices')
        ->select(
          'invoices.assignmentgenerate_id',
          'teammembers.team_member',
          DB::raw('SUM(invoices.total) as total')
        )
        ->join('teammembers', 'teammembers.id', '=', 'invoices.partner')
        ->whereIn('invoices.assignmentgenerate_id', $assignmentGenerateIds)
        ->groupBy('invoices.assignmentgenerate_id', 'teammembers.team_member')
        ->get();

      $timesheetData = DB::table('timesheetusers')
        ->select('assignmentgenerate_id', 'createdby', DB::raw('SUM(totalhour) as total_hour'))
        ->whereIn('assignmentgenerate_id', $assignmentGenerateIds)
        ->groupBy('assignmentgenerate_id', 'createdby')
        ->get();

      $teamMemberCosts = DB::table('teammembers')
        ->whereIn('id', $timesheetData->pluck('createdby')->unique())
        ->pluck('cost_hour', 'id');

      $groupedCosts = $timesheetData->groupBy('assignmentgenerate_id')->map(function ($rows) use ($teamMemberCosts) {
        return $rows->sum(function ($row) use ($teamMemberCosts) {
          return $row->total_hour * ($teamMemberCosts[$row->createdby] ?? 0);
        });
      });

      $finalData = $invoices->map(function ($row) use ($groupedCosts) {
        $row->cost = $groupedCosts[$row->assignmentgenerate_id] ?? 0;
        $row->profit_loss = $row->total - $row->cost;
        return $row;
      });

      $partnerWiseProfit = $finalData
        ->groupBy('team_member')
        ->map(function ($items, $teamMember) {
          return (object)[
            'team_member' => $teamMember,
            'total' => $items->sum(fn($item) => (float) $item->total),
            'cost' => $items->sum('cost'),
            'profit_loss' => $items->sum('profit_loss'),
          ];
        })
        // Reset index if needed
        ->values();
      // Partner-wise P&L Statement end hare


      // Staff Allocation vs Actual Timesheet Analysis
      $teamAllocatedHours = DB::table('timesheetusers')
        ->join('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->whereIn('teammembers.id', [14, 23, 187, 305, 659, 815])
        // ->whereNotIn('teammembers.role_id', [13])
        ->whereBetween('timesheetusers.created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->select(
          'teammembers.id as teammember_id',
          'teammembers.team_member',
          'teammembers.role_id',
          DB::raw('SUM(timesheetusers.totalhour) as actualhours')
        )
        ->groupBy('teammembers.id', 'teammembers.team_member', 'teammembers.role_id')
        // ->limit(6)
        ->get();


      foreach ($teamAllocatedHours as $teamAllocatedHour) {
        if ($teamAllocatedHour->role_id == 13) {
          $allocatedHours1 = DB::table('assignmentmappings')
            ->where('assignmentmappings.eqcrpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentmappings.eqcresthour');

          $allocatedHours2 = DB::table('assignmentmappings')
            ->where('assignmentmappings.leadpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentmappings.partneresthour');

          $allocatedHours3 = DB::table('assignmentmappings')
            ->where('assignmentmappings.otherpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentmappings.otherpartneresthour');

          $allocatedHours = $allocatedHours1 + $allocatedHours2 + $allocatedHours3;
        } else {
          $allocatedHours = DB::table('assignmentteammappings')
            ->where('assignmentteammappings.teammember_id', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentteammappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentteammappings.teamesthour');
        }

        if (is_null($allocatedHours)) {
          $allocatedHours = 0;
        }
        $teamAllocatedHour->teamallocatedhours = $allocatedHours;
        $teamAllocatedHour->discrepancy = $teamAllocatedHour->actualhours - (float) $allocatedHours;
      }

      // Monthly Expense Analysis
      // financial year
      $teamsSalaries = DB::table('employeepayrolls')
        ->select(
          'month',
          'year',
          DB::raw('SUM(total_amount_to_paid) as total_amount')
        )
        ->where(function ($query) use ($financialEndYear, $financialStartYear) {
          // Jan to Mar from next year
          $query->where(function ($q) use ($financialEndYear) {
            $q->where('year', $financialEndYear)
              ->whereIn('month', ['January', 'February', 'March']);
          })
            // Apr to Jun from current year
            ->orWhere(function ($q) use ($financialStartYear) {
              $q->where('year', $financialStartYear)
                ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
            });
        })
        ->where('send_to_bank', 1)
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();

      $teamexceptionalExpenses = DB::table('outstationconveyances')
        ->selectRaw('MONTH(approveddate) as month, YEAR(approveddate) as year, SUM(finalamount) as total_amount')
        ->where('status', 6)
        ->whereBetween('approveddate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(approveddate), YEAR(approveddate)')
        ->orderByRaw('FIELD(MONTH(approveddate),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });


      // Cash Flow Analysis
      $cashFlowRecieved = DB::table('payments')
        ->selectRaw('MONTH(paymentdate) as month, YEAR(paymentdate) as year, SUM(amountreceived) as amountreceived')
        ->whereBetween('paymentdate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(paymentdate), YEAR(paymentdate)')
        ->orderByRaw('FIELD(MONTH(paymentdate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashFlowSpendvender = DB::table('vendorlist')
        ->selectRaw('MONTH(approvedate) as month, YEAR(approvedate) as year, SUM(amount) as total_amounts')
        ->where('status', 4)
        ->whereBetween('approvedate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(approvedate), YEAR(approvedate)')
        ->orderByRaw('FIELD(MONTH(approvedate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashFlowSpendemployee = DB::table('employeepayrolls')
        ->select('month', 'year', DB::raw('SUM(total_amount_to_paid) as total_amounts'))
        ->where(function ($query) use ($financialEndYear, $financialStartYear) {
          $query->where(function ($q) use ($financialEndYear) {
            $q->where('year', $financialEndYear)
              ->whereIn('month', ['January', 'February', 'March']);
          })->orWhere(function ($q) use ($financialStartYear) {
            $q->where('year', $financialStartYear)
              ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
          });
        })
        ->where('send_to_bank', 1)
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();

      $mergedSpenddata = $cashFlowSpendvender->merge($cashFlowSpendemployee);

      $cashFlowtotalspendData = $mergedSpenddata->groupBy(function ($item) {
        return $item->month . '-' . $item->year;
      })->map(function ($group) {
        return (object) [
          'month' => $group->first()->month,
          'year' => $group->first()->year,
          'total_amounts' => $group->sum('total_amounts'),
        ];
      })->sortBy(function ($item) {
        $order = ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March'];
        return array_search($item->month, $order);
      })->values();

      // Cash Flow Analysis end hare


      // Invoice Due vs Assignment Billing vs Cash Recovery
      // $assignmentBilling = DB::table('invoices')
      //   ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(total) as invoices_amount')
      //   ->whereBetween('created_at', [
      //     $financialStartDate,
      //     $financialEndDate
      //   ])
      //   ->groupByRaw('MONTH(created_at), YEAR(created_at)')
      //   ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
      //   ->get()
      //   ->map(function ($item) use ($monthNames) {
      //     $item->month = $monthNames[$item->month] ?? $item->month;
      //     return $item;
      //   });

      $assignmentBillingdata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $assignmentBillingdata = $this->convertusdtoinr1($assignmentBillingdata);

      $assignmentBilling = $assignmentBillingdata
        ->groupBy('month')
        ->map(function ($items, $month) {
          return (object)[
            'month' => $month,
            'year' => $items->first()->year,
            'total_amount' => $items->sum('total_amount'),
          ];
        })
        ->values();

      $assignmentOutstanding = DB::table('outstandings')
        ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(AMT) as outstanding_amount')
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashRecovery = DB::table('payments')
        ->selectRaw('MONTH(paymentdate) as month, YEAR(paymentdate) as year, SUM(amountreceived) as amountreceived')
        ->whereBetween('paymentdate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(paymentdate), YEAR(paymentdate)')
        ->orderByRaw('FIELD(MONTH(paymentdate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // Lap Days Analysis (Assignment to Invoice)
      $assignmentsWithInvoices = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        // get only those assignments for which an invoice has been created
        ->join('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->selectRaw('MONTH(assignmentbudgetings.otpverifydate) as month, YEAR(assignmentbudgetings.otpverifydate) as year, assignmentbudgetings.otpverifydate, invoices.created_at as invoice_created_at, invoices.id as invoice_id')
        ->whereBetween('assignmentbudgetings.otpverifydate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->orderByRaw('FIELD(MONTH(assignmentbudgetings.otpverifydate), 1,2,3,4,5,6,7,8,9,10,11,12)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $assignmentclosedDate = Carbon::parse($item->otpverifydate);
          $invoicecreatedDate = Carbon::parse($item->invoice_created_at);
          $item->differenceDays = $assignmentclosedDate->diffInDays($invoicecreatedDate);
          $item->targetDays = 7;
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        })
        ->groupBy(fn($item) => $item->month . '-' . $item->year)
        ->map(function ($group) {
          $first = $group->first();
          return (object) [
            'month' => $first->month,
            'year' => $first->year,
            'otpverifydate' => $first->otpverifydate,
            'invoice_id' => $first->invoice_id,
            'invoice_created_at' => $first->invoice_created_at,
            'targetDays' => $first->targetDays,
            'differenceDays' => $group->sum('differenceDays'),
            'countitem' => $group->count(),
            // Average Difference Days = (sum of all differenceDays) / number of records
            'averageDifferenceDays' => round($group->avg('differenceDays'), 1),
          ];
        })
        ->sortBy(fn($item) => array_search($item->month, array_values($monthNames)))
        ->values();

      // Budget vs Actual P&L
      $budgetRevenueandbudgetExpences = DB::table('assignmentmappings')
        ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(engagementfee) as engagementfee, SUM(teamestcost) as total_teamestcost')
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // $budgetActualRevenue = DB::table('invoices')
      //   ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(total) as invoices_amount')
      //   ->whereBetween('created_at', [
      //     $financialStartDate,
      //     $financialEndDate
      //   ])
      //   ->groupByRaw('MONTH(created_at), YEAR(created_at)')
      //   ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
      //   ->get()
      //   ->map(function ($item) use ($monthNames) {
      //     $item->month = $monthNames[$item->month] ?? $item->month;
      //     return $item;
      //   });

      $budgetActualRevenuedata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $budgetActualRevenuedata = $this->convertusdtoinr1($budgetActualRevenuedata);

      $budgetActualRevenue = $budgetActualRevenuedata
        ->groupBy('month')
        ->map(function ($items, $month) {
          return (object)[
            'month' => $month,
            'year' => $items->first()->year,
            'total_amount' => $items->sum('total_amount'),
          ];
        })
        ->values();

      $budgetActualExpences = DB::table('timesheets')
        ->leftJoin('timesheetusers', 'timesheetusers.timesheetid', '=', 'timesheets.id')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->whereIn('timesheets.created_by', [815, 818])
        ->selectRaw('MONTH(timesheets.date) as month, YEAR(timesheets.date) as year, SUM(timesheetusers.totalhour * teammembers.cost_hour) as total_cost')
        ->whereBetween('timesheets.date', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(timesheets.date), YEAR(timesheets.date)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // Budget vs Actual P&L end hare 

      // Work From Home 
      $workFromHome = DB::table('checkins')
        ->where('checkin_from', 'Work From Home')
        ->whereMonth('created_at', Carbon::now()->month)
        ->whereYear('created_at', Carbon::now()->year)
        ->count();


      // filter data 
      $startYearforfilter = 2022;
      $currentDatetoday = Carbon::now();
      $currentYearforfilter = $currentDatetoday->year;
      $currentMonthforfilter = $currentDatetoday->month;
      $currentFinancialYear = $currentMonthforfilter >= 4 ? $currentYearforfilter : $currentYearforfilter - 1;

      $financialYears = [];
      for ($year = $startYearforfilter; $year <= $currentFinancialYear; $year++) {
        $financialYears[] = [
          'value' => $year . '-' . ($year + 1),
        ];
      }
      session()->forget('_old_input');

      return view('backEnd.kgsdashboardreport', compact('financialYears', 'workFromHome', 'budgetRevenueandbudgetExpences', 'budgetActualRevenue', 'budgetActualExpences', 'assignmentsWithInvoices', 'assignmentBilling', 'assignmentOutstanding', 'cashRecovery', 'cashFlowtotalspendData', 'cashFlowRecieved', 'teamexceptionalExpenses', 'teamsSalaries', 'teamAllocatedHours', 'timesheetOnClosedAssignment', 'totalNotFilled', 'partnerWiseProfit', 'lossMakingCount', 'billspending15Days', 'totalUpcomingAssignments', 'assignmentprofitandlosses', 'allTickets', 'hrTickets', 'ticketDatas', 'highpriorityAssignments', 'ecqrAudits', 'documentCompletions', 'assignmentOverviews',  'exceptionalExpenses', 'auditsDue', 'tendersSubmittedCount', 'delayedAssignments', 'assignmentcompleted', 'billspendingforcollection', 'billspending'));
    }
  
  








22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kgsdashboardreport.blade.php
add this file hare 





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php

after index function 

  public  function convertusdtoinr($usdAmountconvert)
  {

    $totalamountInr = 0;
    $totalUsdamount = 0;
    foreach ($usdAmountconvert as $bill) {

      if ($bill->currency == 3 || is_null($bill->currency)) {
        // INR amount added
        $totalamountInr += $bill->total_amount;
      } elseif ($bill->currency == 1) {
        // Get USD rate for that bill date
        $response = Http::get("https://api.frankfurter.app/{$bill->bill_date}", [
          'from' => 'USD',
          'to' => 'INR'
        ]);

        $rate = $response->successful()
          ? ($response->json()['rates']['INR'] ?? 0)
          : 0;
        $totalUsdamount += $bill->total_amount * $rate;
        // dd($bill, $rate, $totalUsdamount);
      }
    }

    return round($totalamountInr + $totalUsdamount, 2);
  }

  public function convertusdtoinr1($usdAmountconvert)
  {
    return $usdAmountconvert->map(function ($bill) {
      if ($bill->currency == 3 || is_null($bill->currency)) {
        $bill->total_amount = round($bill->total_amount, 2);
      } elseif ($bill->currency == 1) {
        // USD to INR 
        $response = Http::get("https://api.frankfurter.app/{$bill->bill_date}", [
          'from' => 'USD',
          'to' => 'INR'
        ]);

        $rate = $response->successful()
          ? ($response->json()['rates']['INR'] ?? 0)
          : 0;

        $bill->total_amount = round($bill->total_amount * $rate, 2);
      }
      return $bill;
    });
  }








app\Http\Controllers\BackEndController.php

            // 'ticket_id' => 'N/A',
            'ticket_id' => $item->generateticket_id ?? 'N/A',





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
tasks table me ```1111
generateticket_id column create karna hai 

resources\views\backEnd\layouts\includes\leftsidebar.blade.php\

          @if ($getuser != null)
              <div class="avatar online">
                  <img @if (Auth::user()->role_id == 15) src=" {{ Storage::disk('s3')->temporaryUrl('articleonboarding/' . $getuser->profilepic, now()->addMinutes(30)) }}"
			 
			  @else
			    src=" {{ Storage::disk('s3')->temporaryUrl('candidateonboarding/' . $getuser->profilepic, now()->addMinutes(30)) }}" @endif
                      class="img-fluid rounded-circle" alt="">
              </div>
          @endif


end hare  all above code deployed on kgsdemo 


bugs 27-08-2025  ```start
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kgsdashboardreport.blade.php


            // const netCashflowData = cashInflowData.map((inflow, index) => inflow - cashOutflowData[index]);
            const netCashflowData = cashInflowData.map((inflow, index) =>
                parseFloat((inflow - cashOutflowData[index]).toFixed(2))
            );



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
this is done on kgsdemo and kgs live 
app\Http\Controllers\BackEndController.php
Assignment-wise P&L Analysis and Loss Making Assignments

 $assignmentprofitandlosses = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->orderByDesc('assignmentbudgetings.id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        // ->limit(6)
        ->get();

      $assignmentCosts = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->where('timesheetusers.assignmentgenerate_id', 254418551033)
        // ->whereBetween(DB::raw("STR_TO_DATE(timesheetusers.date, '%d-%m-%Y')"), [
        //   $financialStartDate->format('Y-m-d'),
        //   $financialEndDate->format('Y-m-d')
        // ])
        ->select('timesheetusers.assignmentgenerate_id', DB::raw('SUM(timesheetusers.totalhour * teammembers.cost_hour) as total_cost'))
        ->groupBy('timesheetusers.assignmentgenerate_id')
        ->pluck('total_cost', 'assignmentgenerate_id');

      $conveyanceonlybillno = DB::table('outstationconveyances')
        ->where('bill', 'No')
        ->select(
          'assignmentgenerate_id',
          DB::raw('SUM(finalamount) as finalamounts')
        )
        ->groupBy('assignmentgenerate_id')
        ->pluck('finalamounts', 'assignmentgenerate_id');


      $lossMakingCount = 0;
      foreach ($assignmentprofitandlosses as $assignment) {
        $assignmentworkedcost = $assignmentCosts[$assignment->assignmentgenerate_id] ?? 0;
        $assignmentconvencecost = $conveyanceonlybillno[$assignment->assignmentgenerate_id] ?? 0;
        $assignment->total_cost = $assignmentworkedcost + $assignmentconvencecost;
        // Loss Making Assignments
        $revenue = $assignment->engagementfee ?? 0;
        $cost = $assignment->total_cost ?? 0;
        $profit = $revenue - $cost;

        if ($profit < 0) {
          $lossMakingCount++;
        }
      }



this is baki on both kgs 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php
 $finalData = $invoices->map(function ($row) use

      $finalData = $invoices->map(function ($row) use ($groupedCosts, $conveyanceonlybillno) {
        $workedcost = $groupedCosts[$row->assignmentgenerate_id] ?? 0;
        $convencecostdata = $conveyanceonlybillno[$row->assignmentgenerate_id] ?? 0;
        $row->cost = $workedcost + $convencecostdata;
        $row->profit_loss = $row->total - $row->cost;
        return $row;
      });



some issue on kgslive```
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php
teamexceptonal expemce  and cashflow , sachflowrecieved

   $teamexceptionalExpenses,
   $cashFlowRecieved 
   $cashFlowSpendvender
   $assignmentBillingdata
   $assignmentOutstanding
   $cashRecovery
   $budgetRevenueandbudgetExpences
   $budgetActualRevenuedata



testing issue on below 

    $delayedAssignments  
   $exceptionalExpenses
   $tendersSubmittedCount
   
   
   
   
12.

  // how many users not accepted independance mail till now
      $clientindependenceNotFilled = DB::table('assignmentmappings')
        ->select(DB::raw('COUNT(*) as total_not_filled'))
        ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
        ->leftJoin('annual_independence_declarations', function ($join) {
          $join->on('annual_independence_declarations.assignmentgenerateid', '=', 'assignmentmappings.assignmentgenerate_id')
            ->on('annual_independence_declarations.createdby', '=', 'teammembers.id')
            ->where('annual_independence_declarations.type', 2);
        })
        ->whereNull('annual_independence_declarations.id') // Members without declarations
        ->groupBy('assignmentmappings.assignmentgenerate_id')
        ->get()
        ->sum('total_not_filled');

      $independencenotfilled = DB::table('assignmentmappings')
        ->select(DB::raw('COUNT(*) as total_not_filled'))
        ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
        ->leftJoin('independences', function ($join) {
          $join->on('independences.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
            ->on('independences.createdby', '=', 'teammembers.id');
        })
        ->whereNull('independences.id') // Members without declarations
        ->groupBy('assignmentmappings.assignmentgenerate_id')
        ->get()
        ->sum('total_not_filled');

      $totalNotFilled = $clientindependenceNotFilled + $independencenotfilled;  
   
   
 
11.
      $tendersSubmittedCount = DB::table('tenders')
        ->where('tendersubmitstatus', 1)
        ->whereMonth('tendersubmitdate', Carbon::now()->month)
        ->whereYear('tendersubmitdate', Carbon::now()->year)
        ->count();





10.
      $exceptionalExpenses = DB::table('outstationconveyances')
        ->where('status', 6)
        ->whereMonth('paiddate', Carbon::now()->month)
        ->whereYear('paiddate', Carbon::now()->year)
        ->sum('finalamount');
		
		
		
		
 
   
9.
      $delayedAssignments = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', 1)
        ->whereRaw('COALESCE(DATE(assignmentbudgetings.actualenddate), DATE(assignmentbudgetings.tentativeenddate)) < ?', [Carbon::today()->toDateString()])
        ->count();





 
   
8.   

      $budgetActualRevenuedata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(month, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        }); 
   
   
   
7
  $budgetRevenueandbudgetExpences = DB::table('assignmentmappings')
        ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(engagementfee) as engagementfee, SUM(teamestcost) as total_teamestcost')
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->orderByRaw('FIELD(month, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });
 

6
 $cashRecovery = DB::table('payments')
        ->selectRaw('MONTH(paymentdate) as month, YEAR(paymentdate) as year, SUM(amountreceived) as amountreceived')
        ->whereBetween('paymentdate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(paymentdate), YEAR(paymentdate)')
        ->orderByRaw('FIELD(month, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });
   
   
5 
 $assignmentOutstanding = DB::table('outstandings')
        ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(AMT) as outstanding_amount')
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->orderByRaw('FIELD(month, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });  
   
   

4
 $assignmentBillingdata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(month, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

3
 $cashFlowSpendvender = DB::table('vendorlist')
        ->selectRaw('MONTH(approvedate) as month, YEAR(approvedate) as year, SUM(amount) as total_amounts')
        ->where('status', 4)
        ->whereBetween('approvedate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(approvedate), YEAR(approvedate)')
        ->orderByRaw('FIELD(month, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });


2
      // Cash Flow Analysis
      $cashFlowRecieved = DB::table('payments')
        ->selectRaw('MONTH(paymentdate) as month, YEAR(paymentdate) as year, SUM(amountreceived) as amountreceived')
        ->whereBetween('paymentdate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(paymentdate), YEAR(paymentdate)')
        ->orderByRaw('FIELD(month, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });







1

      $teamexceptionalExpenses = DB::table('outstationconveyances')
        ->selectRaw('MONTH(approveddate) as month, YEAR(approveddate) as year, SUM(finalamount) as total_amount')
        ->where('status', 6)
        ->whereBetween('approveddate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(approveddate), YEAR(approveddate)')
        ->orderByRaw('FIELD(month, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });







22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
testing issue on kgslive``` 

1
      $delayedAssignments = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        // ->where('assignmentbudgetings.status', 1)
        ->whereRaw('COALESCE(DATE(assignmentbudgetings.actualenddate), DATE(assignmentbudgetings.tentativeenddate)) < ?', [Carbon::today()->toDateString()])
        ->count();
		
		->where('assignmentbudgetings.status', 1)
		
		
		
		
2		
     $exceptionalExpenses = DB::table('outstationconveyances')
        ->where('status', 6)
        ->whereMonth('approveddate', Carbon::now()->month)
        ->whereYear('approveddate', Carbon::now()->year)
        ->sum('finalamount');
		
		
		
		   ->whereMonth('paiddate', Carbon::now()->month)
        ->whereYear('paiddate', Carbon::now()->year)
		
3

tender sumitted not tested 





inr convert to usd ```start hare 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php

    $budgetActualRevenuedata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $budgetActualRevenuedata = $this->convertusdtoinr1($budgetActualRevenuedata);

      $budgetActualRevenue = $budgetActualRevenuedata
        ->groupBy('month')
        ->map(function ($items, $month) {
          return (object)[
            'month' => $month,
            'year' => $items->first()->year,
            'total_amount' => $items->sum('total_amount'),
          ];
        })
        ->values();

      // dd($budgetActualRevenue);










find  public function convertusdtoin  after this function add it 

  public function convertusdtoinr1($usdAmountconvert)
  {
    return $usdAmountconvert->map(function ($bill) {
      if ($bill->currency == 3 || is_null($bill->currency)) {
        $bill->total_amount = round($bill->total_amount, 2);
      } elseif ($bill->currency == 1) {
        // USD to INR 
        $response = Http::get("https://api.frankfurter.app/{$bill->bill_date}", [
          'from' => 'USD',
          'to' => 'INR'
        ]);

        $rate = $response->successful()
          ? ($response->json()['rates']['INR'] ?? 0)
          : 0;

        $bill->total_amount = round($bill->total_amount * $rate, 2);
      }
      return $bill;
    });
  }
  
  
  
  
resources\views\backEnd\kgsdashboardreport.blade.php
find  budgetActualRevenueMonthsfill[item.month]

   budgetActualRevenueMonthsfill[item.month] = parseFloat(item.total_amount);
   
   
   
   
   
  
app\Http\Controllers\BackEndController.php

   // Invoice Due vs Assignment Billing vs Cash Recovery
      // $assignmentBilling = DB::table('invoices')
      //   ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(total) as invoices_amount')
      //   ->whereBetween('created_at', [
      //     $financialStartDate,
      //     $financialEndDate
      //   ])
      //   ->groupByRaw('MONTH(created_at), YEAR(created_at)')
      //   ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
      //   ->get()
      //   ->map(function ($item) use ($monthNames) {
      //     $item->month = $monthNames[$item->month] ?? $item->month;
      //     return $item;
      //   });

      $assignmentBillingdata = DB::table('invoices')
        // ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(total) as total_amount')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        // ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $assignmentBillingdata = $this->convertusdtoinr1($assignmentBillingdata);

      $assignmentBilling = $assignmentBillingdata
        ->groupBy('month')
        ->map(function ($items, $month) {
          return (object)[
            'month' => $month,
            'year' => $items->first()->year,
            'total_amount' => $items->sum('total_amount'),
          ];
        })
        ->values(); 







resources\views\backEnd\kgsdashboardreport.blade.php
find  billingsMonthsfill[item.month]

  billingsMonthsfill[item.month] = parseFloat(item.total_amount);
		
		
app\Http\Controllers\BackEndController.php
find  $billspending15Daysdata = DB::table('assignmentmappings')

	        ->whereNotNull('invoices.id') // Invoice is created
        ->where('invoices.status', 2)	
		
   
inr convert to usd  ```end hare  kgsdemo per uploadde and kgs live 


usd convert in inr partnerwise pl	
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php

// total amount partner wise 
      // $invoices = DB::table('invoices')
      //   ->select(
      //     'invoices.assignmentgenerate_id',
      //     'teammembers.team_member',
      //     DB::raw('SUM(invoices.total) as total')
      //   )
      //   ->join('teammembers', 'teammembers.id', '=', 'invoices.partner')
      //   ->whereIn('invoices.assignmentgenerate_id', $assignmentGenerateIds)
      //   ->groupBy('invoices.assignmentgenerate_id', 'teammembers.team_member')
      //   ->get();

      $invoicesdata = DB::table('invoices')
        ->select(
          'invoices.assignmentgenerate_id',
          'invoices.currency',
          'teammembers.team_member',
          DB::raw("DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(invoices.total) as total_amount')
        )
        ->join('teammembers', 'teammembers.id', '=', 'invoices.partner')
        ->whereIn('invoices.assignmentgenerate_id', $assignmentGenerateIds)
        ->groupBy('invoices.assignmentgenerate_id', 'teammembers.team_member', 'invoices.currency', 'bill_date')
        ->get();

      $invoicesdata = $this->convertusdtoinr1($invoicesdata);

      $invoices = $invoicesdata
        ->groupBy('assignmentgenerate_id')
        ->map(function ($items, $assignmentId) {
          return (object)[
            'assignmentgenerate_id' => $assignmentId,
            'team_member' => $items->first()->team_member,
            'total' => $items->sum('total_amount'),
          ];
        })
        ->values();

      // dd($invoices);


deploy on kgsdemo on 11-08-2025 ```start hare 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php


index function me 

   if (auth()->user()->role_id == 11) {

      // financial year
      $currentDate4 = Carbon::now();
      // $currentDate4 = Carbon::parse('2024-07-01');
      // $currentDate4 = Carbon::parse('2024-07-01 13:30:00');
      $currentMonth4 = $currentDate4->format('F');
      if ($currentDate4->month >= 4) {
        // Current year financial year
        $financialStartDate = Carbon::create($currentDate4->year, 4, 1);
        $financialEndDate = Carbon::create($currentDate4->year + 1, 3, 31);
      } else {
        // Previous year financial year
        $financialStartDate = Carbon::create($currentDate4->year - 1, 4, 1);
        $financialEndDate = Carbon::create($currentDate4->year, 3, 31);
      }

      $financialStartYear = now()->month >= 4 ? now()->year : now()->year - 1;
      $financialEndYear = $financialStartYear + 1;

      $monthNames = [
        1  => 'January',
        2  => 'February',
        3  => 'March',
        4  => 'April',
        5  => 'May',
        6  => 'June',
        7  => 'July',
        8  => 'August',
        9  => 'September',
        10 => 'October',
        11 => 'November',
        12 => 'December'
      ];


      // How many amounts pending for invoice genrated or  Bills Pending
      $billspending = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->whereNull('invoices.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', 0)
        ->sum('assignmentmappings.engagementfee');

      // Bills Pending For Collection
      // $billspendingforcollection = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
      //   // ensures invoice is created
      //   ->whereNotNull('invoices.id')
      //   ->where('assignmentbudgetings.status', 0)
      //   ->sum('outstandings.AMT');
      // // ->get();

      $outstandingBills = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
        ->whereNotNull('invoices.id')
        ->where('assignmentbudgetings.status', 0)
        // ->whereIn('invoices.currency', [1, 3])
        ->where(function ($q) {
          $q->whereIn('invoices.currency', [1, 3])
            ->orWhereNull('invoices.currency');
        })
        ->select(
          'invoices.currency',
          // 'assignmentmappings.assignmentgenerate_id',
          DB::raw("DATE_FORMAT(outstandings.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(outstandings.AMT) as total_amount')
        )
        ->groupBy('invoices.currency', 'bill_date')
        ->get();


      $billspendingforcollection = $this->convertusdtoinr($outstandingBills);

      // How many assignments completed in this months
      $assignmentcompleted = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        // ->where('assignmentbudgetings.status', 0)
        ->whereMonth('assignmentbudgetings.otpverifydate', Carbon::now()->month)
        ->whereYear('assignmentbudgetings.otpverifydate', Carbon::now()->year)
        ->count();

      // How many delayed Assignments
      // $delayedAssignments = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->whereRaw('COALESCE(DATE(assignmentbudgetings.actualenddate), DATE(assignmentbudgetings.tentativeenddate)) < ?', [Carbon::today()->toDateString()])
      //   ->count();

      $delayedAssignments = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', 1)
        ->whereRaw('COALESCE(DATE(assignmentbudgetings.actualenddate), DATE(assignmentbudgetings.tentativeenddate)) < ?', [Carbon::today()->toDateString()])
        ->count();

      // How many tender submitted this months
      // $tendersSubmittedCount = DB::table('tenders')
      //   ->where('tendersubmitstatus', 1)
      //   ->whereMonth('date', Carbon::now()->month)
      //   ->whereYear('date', Carbon::now()->year)
      //   ->count();

      $tendersSubmittedCount = DB::table('tenders')
        ->where('tendersubmitstatus', 1)
        ->whereMonth('tendersubmitdate', Carbon::now()->month)
        ->whereYear('tendersubmitdate', Carbon::now()->year)
        ->count();

      // How many NFRA are running
      $auditsDue = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentmappings.eqcrapplicability', 1)
        ->count();

      // total amount of convence, how many amount approved for convence in this months or Exceptional Expenses 
      // $exceptionalExpenses = DB::table('outstationconveyances')
      //   ->where('status', 6)
      //   ->whereMonth('approveddate', Carbon::now()->month)
      //   ->whereYear('approveddate', Carbon::now()->year)
      //   ->sum('finalamount');

      $exceptionalExpenses = DB::table('outstationconveyances')
        ->where('status', 6)
        ->whereMonth('paiddate', Carbon::now()->month)
        ->whereYear('paiddate', Carbon::now()->year)
        ->sum('finalamount');

      // how many users not accepted independance mail till now
      $totalNotFilled = DB::table('assignmentmappings')
        ->select(DB::raw('COUNT(*) as total_not_filled'))
        ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
        ->leftJoin('annual_independence_declarations', function ($join) {
          $join->on('annual_independence_declarations.assignmentgenerateid', '=', 'assignmentmappings.assignmentgenerate_id')
            ->on('annual_independence_declarations.createdby', '=', 'teammembers.id')
            ->where('annual_independence_declarations.type', 2);
        })
        ->whereNull('annual_independence_declarations.id') // Members without declarations
        ->groupBy('assignmentmappings.assignmentgenerate_id')
        ->get()
        ->sum('total_not_filled');

      // $clientindependenceNotFilled = DB::table('assignmentmappings')
      //   ->select(DB::raw('COUNT(*) as total_not_filled'))
      //   ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
      //   ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
      //   ->leftJoin('annual_independence_declarations', function ($join) {
      //     $join->on('annual_independence_declarations.assignmentgenerateid', '=', 'assignmentmappings.assignmentgenerate_id')
      //       ->on('annual_independence_declarations.createdby', '=', 'teammembers.id')
      //       ->where('annual_independence_declarations.type', 2);
      //   })
      //   ->whereNull('annual_independence_declarations.id') // Members without declarations
      //   ->groupBy('assignmentmappings.assignmentgenerate_id')
      //   ->get()
      //   ->sum('total_not_filled');

      // $independencenotfilled = DB::table('assignmentmappings')
      //   ->select(DB::raw('COUNT(*) as total_not_filled'))
      //   ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
      //   ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
      //   ->leftJoin('independences', function ($join) {
      //     $join->on('independences.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //       ->on('independences.createdby', '=', 'teammembers.id');
      //   })
      //   ->whereNull('independences.id') // Members without declarations
      //   ->groupBy('assignmentmappings.assignmentgenerate_id')
      //   ->get()
      //   ->sum('total_not_filled');

      // $totalNotFilled = $clientindependenceNotFilled + $independencenotfilled;


      // Assignment Status Overview
      $assignmentOverviews = DB::table('assignmentmappings')
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name',
          DB::raw('(SELECT SUM(totalhour) FROM timesheetusers WHERE timesheetusers.assignmentgenerate_id = assignmentmappings.assignmentgenerate_id) as workedHours')
        )
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->orderByDesc('assignmentbudgetings.id')
        // ->limit(3)
        ->get()
        ->map(function ($assignmentOverview) {
          $totalHours = $assignmentOverview->esthours ?? 0;
          $workedHours = $assignmentOverview->workedHours ?? 0;
          $completionPercentage = $totalHours > 0 ? round(($workedHours / $totalHours) * 100, 2) : 0;
          $assignmentOverview->completionPercentage = $completionPercentage;
          return $assignmentOverview;
        });


      // Document Completion Progress
      $documentCompletions = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        // ->where('assignmentbudgetings.status', 1)
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->orderByDesc('assignmentbudgetings.id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'clients.client_name'
        )
        // ->limit(6)
        ->get();


      foreach ($documentCompletions as $mapping) {
        $assignmentId = $mapping->assignmentgenerate_id;

        // Get assignment_id and eqcrapplicability
        $assignmentMapping = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $assignmentId)
          ->select('assignment_id', 'eqcrapplicability')
          ->first();

        // Determine EQCR type name
        $eqcrTypeName = '';
        $eqcrAssignmentId = null;
        if (isset($assignmentMapping->eqcrapplicability)) {
          switch ($assignmentMapping->eqcrapplicability) {
            case 1:
              $eqcrTypeName = 'NFRA';
              break;
            case 2:
              $eqcrTypeName = 'Quality Review';
              break;
            case 3:
              $eqcrTypeName = 'Peer Review';
              break;
            case 4:
              $eqcrTypeName = 'Others';
              break;
            case 5:
              $eqcrTypeName = 'PCAOB';
              break;
          }
          // Get the assignment_id for the EQCR type
          $specialAssignment = DB::table('assignments')
            ->where('assignment_name', $eqcrTypeName)
            ->first();
          if ($specialAssignment) {
            $eqcrAssignmentId = $specialAssignment->id;
          }
        }
        $mapping->eqcr_type_name = $eqcrTypeName;

        // Regular Checklist Calculations (Exclude EQCR assignment_id)
        $classificationIds = DB::table('financialstatementclassifications')
          ->where('assignment_id', $assignmentMapping->assignment_id)
          ->where(function ($q) use ($assignmentId) {
            $q->whereNull('assignmentgenerate_id')->orWhere('assignmentgenerate_id', $assignmentId);
          })
          ->when($eqcrAssignmentId, function ($query) use ($eqcrAssignmentId) {
            $query->where('assignment_id', '!=', $eqcrAssignmentId);
          })
          ->pluck('id');



        $subClassIds = DB::table('subfinancialclassfications')
          ->whereIn('financialstatemantclassfication_id', $classificationIds)
          ->pluck('id');



        $totalQuestions = DB::table('auditquestions')
          ->whereIn('financialstatemantclassfication_id', $classificationIds)
          ->whereIn('subclassfied_id', $subClassIds)
          ->count();


        $statusCounts = DB::table('checklistanswers')
          ->join('statuses', 'checklistanswers.status', '=', 'statuses.id')
          ->where('checklistanswers.assignment_id', $assignmentId)
          ->whereIn('checklistanswers.financialstatemantclassfication_id', $classificationIds)
          ->whereIn('checklistanswers.subclassfied_id', $subClassIds)
          ->select(
            'statuses.name as status_name',
            DB::raw('COUNT(*) as count')
          )
          ->groupBy('statuses.name')
          ->pluck('count', 'status_name');



        $closedQuestions = $statusCounts['CLOSE'] ?? 0;

        $mapping->documentation_percentage = $totalQuestions > 0
          ? round(($closedQuestions / $totalQuestions) * 100, 2)
          : 0;
      }
      // Document Completion Progress end hare 


      // NFRA Audits, Quality Reviews & Peer Review
      $ecqrAudits = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.eqcrpartner')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        // ->where('assignmentbudgetings.status', 1)
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->whereIn('assignmentmappings.eqcrapplicability', [1, 2, 3])
        ->select(
          'assignmentmappings.*',
          'teammembers.team_member',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        // ->limit(3)
        ->get();

      foreach ($ecqrAudits as $audit) {
        $assignmentId = $audit->assignmentgenerate_id;

        // get reviewer assignment id (based on eqcrapplicability)
        $eqcrTypeName = '';
        $eqcrAssignmentId = null;
        switch ($audit->eqcrapplicability) {
          case 1:
            $eqcrTypeName = 'NFRA';
            break;
          case 2:
            $eqcrTypeName = 'Quality Review';
            break;
          case 3:
            $eqcrTypeName = 'Peer Review';
            break;
          case 4:
            $eqcrTypeName = 'Others';
            break;
          case 5:
            $eqcrTypeName = 'PCAOB';
            break;
        }
        if ($eqcrTypeName) {
          $specialAssignment = DB::table('assignments')
            ->where('assignment_name', $eqcrTypeName)
            ->first();
          if ($specialAssignment) {
            $eqcrAssignmentId = $specialAssignment->id;
          }
        }

        $audit->reviewer_documentation_percentage = 0;

        if ($eqcrAssignmentId) {
          $reviewerClassificationIds = DB::table('financialstatementclassifications')
            ->where('assignment_id', $eqcrAssignmentId)
            ->where(function ($q) use ($assignmentId) {
              $q->whereNull('assignmentgenerate_id')->orWhere('assignmentgenerate_id', $assignmentId);
            })
            ->pluck('id');

          $reviewerSubClassIds = DB::table('subfinancialclassfications')
            ->whereIn('financialstatemantclassfication_id', $reviewerClassificationIds)
            ->pluck('id');

          $reviewerTotalQuestions = DB::table('auditquestions')
            ->whereIn('financialstatemantclassfication_id', $reviewerClassificationIds)
            ->whereIn('subclassfied_id', $reviewerSubClassIds)
            ->count();

          $reviewerStatusCounts = DB::table('checklistanswers')
            ->join('statuses', 'checklistanswers.status', '=', 'statuses.id')
            ->where('checklistanswers.assignment_id', $assignmentId)
            ->whereIn('checklistanswers.financialstatemantclassfication_id', $reviewerClassificationIds)
            ->whereIn('checklistanswers.subclassfied_id', $reviewerSubClassIds)
            ->select('statuses.name as status_name', DB::raw('COUNT(*) as count'))
            ->groupBy('statuses.name')
            ->pluck('count', 'status_name');

          $reviewerClosed =  ($reviewerStatusCounts['CLOSE'] ?? 0) +
            ($reviewerStatusCounts['NOT-APPLICABLE'] ?? 0);

          $audit->reviewer_documentation_percentage = $reviewerTotalQuestions > 0
            ? round(($reviewerClosed / $reviewerTotalQuestions) * 100, 2)
            : 0;
        }
      }



      // High Priority Tasks Pending
      $highpriorityAssignments  = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        ->limit(6)
        ->get();


      // Fetch IT and Finance Tickets or Unresolved Tickets - HR, IT & Admin
      $ticketDatas = Assetticket::with(['financerequest', 'createdBy', 'partner'])
        ->whereIn('type', [0, 1])
        ->whereBetween('created_at', [$financialStartDate, $financialEndDate])
        ->orderByDesc('id')
        // ->limit(4)
        ->get()
        ->map(function ($item) {
          return [
            'ticket_id' => $item->generateticket_id,
            'department' => $item->type == 0 ? 'IT' : 'Finance',
            'created_by' => $item->createdBy->team_member ?? '',
            'subject' => $item->subject,
            'assigned_to' => $item->partner->team_member ?? '',
            'created_at' => $item->created_at,
            'status' => $item->status,
            'source' => 'ticket',
          ];
        });

      // Fetch HR Tasks
      $hrTickets = DB::table('tasks')
        ->select(
          'tasks.*',
          'patnerid.team_member as partnername',
          'createdby.team_member as createdbyname',
          'hrfunctions.hrfunction'
        )
        ->where('tasks.task_type', 4)
        ->whereBetween('tasks.created_at', [$financialStartDate, $financialEndDate])
        ->leftJoin('teammembers as patnerid', 'patnerid.id', '=', 'tasks.partner_id')
        ->leftJoin('teammembers as createdby', 'createdby.id', '=', 'tasks.createdby')
        ->leftJoin('hrfunctions', 'hrfunctions.id', '=', 'tasks.hrfunction')
        ->orderByDesc('tasks.id')
        // ->limit(4)
        ->get()
        ->map(function ($item) {
          return [
            'ticket_id' => $item->generateticket_id ?? 'NA',
            'department' => 'HR',
            'created_by' => $item->createdbyname ?? '',
            'subject' => $item->taskname ?? '',
            'assigned_to' => $item->partnername ?? '',
            'created_at' => $item->created_at,
            'status' => $item->status,
            'source' => 'hr',
          ];
        });

      $allTickets = $ticketDatas->merge($hrTickets);

      // Assignment-wise P&L Analysis and Loss Making Assignments
      $assignmentprofitandlosses = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->orderByDesc('assignmentbudgetings.id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        // ->limit(6)
        ->get();

      $assignmentCosts = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->where('timesheetusers.assignmentgenerate_id', 254418551033)
        // ->whereBetween(DB::raw("STR_TO_DATE(timesheetusers.date, '%d-%m-%Y')"), [
        //   $financialStartDate->format('Y-m-d'),
        //   $financialEndDate->format('Y-m-d')
        // ])
        ->select('timesheetusers.assignmentgenerate_id', DB::raw('SUM(timesheetusers.totalhour * teammembers.cost_hour) as total_cost'))
        ->groupBy('timesheetusers.assignmentgenerate_id')
        ->pluck('total_cost', 'assignmentgenerate_id');

      $conveyanceonlybillno = DB::table('outstationconveyances')
        ->where('bill', 'No')
        ->select(
          'assignmentgenerate_id',
          DB::raw('SUM(finalamount) as finalamounts')
        )
        ->groupBy('assignmentgenerate_id')
        ->pluck('finalamounts', 'assignmentgenerate_id');


      $lossMakingCount = 0;
      foreach ($assignmentprofitandlosses as $assignment) {
        $assignmentworkedcost = $assignmentCosts[$assignment->assignmentgenerate_id] ?? 0;
        $assignmentconvencecost = $conveyanceonlybillno[$assignment->assignmentgenerate_id] ?? 0;
        $assignment->total_cost = $assignmentworkedcost + $assignmentconvencecost;
        // Loss Making Assignments
        $revenue = $assignment->engagementfee ?? 0;
        $cost = $assignment->total_cost ?? 0;
        $profit = $revenue - $cost;

        if ($profit < 0) {
          $lossMakingCount++;
        }
      }

      // Upcoming Assignments
      $upcomingFromPlannings = DB::table('assignmentplannings')
        ->where('status', 0)
        ->whereDate('assignmentstartdate', '>=', Carbon::today())
        ->count();

      $upcomingFromBudgetings = DB::table('assignmentbudgetings')
        ->whereRaw('COALESCE(actualstartdate, tentativestartdate) > ?', [Carbon::today()->toDateString()])
        ->count();

      $totalUpcomingAssignments = $upcomingFromPlannings + $upcomingFromBudgetings;


      // How many amounts pending for collection within 15 days or Payments Not Recieved
      // $billspending15Daysdata = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('payments', 'payments.invoiceid', '=', 'invoices.invoice_id')
      //   ->where('assignmentbudgetings.status', 0)
      //   // ->where('invoices.invoicescategory', 2)
      //   ->whereNotNull('invoices.id') // Invoice is created
      //   ->where('invoices.status', 2)
      //   ->whereNull('payments.invoiceid')  // Payment not yet received
      //   // Only within last 15 days
      //   ->whereBetween('invoices.created_at', [
      //     Carbon::today()->subDays(15)->startOfDay(),
      //     Carbon::today()->endOfDay()
      //   ])
      //   ->select(
      //     'invoices.currency',
      //     DB::raw("DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date"),
      //     DB::raw('SUM(invoices.total) as total_amount')
      //   )
      //   ->groupBy('invoices.currency', 'bill_date')
      //   ->get();

      // $billspending15Daysdata = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
      //   ->leftJoin('payments', 'payments.invoiceid', '=', 'invoices.invoice_id')
      //   ->where('assignmentbudgetings.status', 0)
      //   ->whereNotNull('invoices.id')
      //   ->where('invoices.status', 2)
      //   ->whereNull('payments.invoiceid')
      //   ->where(function ($q) {
      //     $q->whereIn('invoices.currency', [1, 3])
      //       ->orWhereNull('invoices.currency');
      //   })
      //   ->whereBetween('invoices.created_at', [
      //     Carbon::today()->subDays(15)->startOfDay(),
      //     Carbon::today()->endOfDay()
      //   ])
      //   ->select(
      //     'invoices.currency',
      //     DB::raw("DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date"),
      //     DB::raw('SUM(invoices.total) as total_amount')
      //   )
      //   ->groupBy('invoices.currency', 'bill_date')
      //   ->get();

      // filter KPI How many amounts pending for collection within 15 days or Payments Not Recieved
      $billspending15Daysdata = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
        ->leftJoin('payments', 'payments.invoiceid', '=', 'invoices.invoice_id')
        ->where('assignmentbudgetings.status', 0)
        ->whereNotNull('invoices.id')
        ->where('invoices.status', 2)
        ->whereNull('payments.invoiceid')
        ->where(function ($q) {
          $q->whereIn('invoices.currency', [1, 3])
            ->orWhereNull('invoices.currency');
        })
        ->whereBetween('invoices.created_at', [
          Carbon::today()->subDays(15)->startOfDay(),
          Carbon::today()->endOfDay()
        ])
        ->select(
          'invoices.currency',
          DB::raw("DATE_FORMAT(outstandings.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(outstandings.AMT) as total_amount')
        )
        ->groupBy('invoices.currency', 'bill_date')
        ->get();


      $billspending15Days = $this->convertusdtoinr($billspending15Daysdata);

      // Timesheet Filled On Closed Assignment
      $timesheetOnClosedAssignment = DB::table('assignmentmappings')
        ->join('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->join('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->whereExists(function ($query) {
          $query->select(DB::raw(1))
            ->from('timesheetusers')
            ->whereRaw('timesheetusers.assignmentgenerate_id = assignmentmappings.assignmentgenerate_id')
            ->whereRaw("DATE(timesheetusers.created_at) > DATE(COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate))");
        })
        ->select('assignmentmappings.assignmentgenerate_id')
        ->distinct()
        ->count();


      // Partner-wise P&L Statement
      $assignmentGenerateIds = DB::table('assignmentbudgetings')
        ->whereBetween('periodstartdate', [$financialStartDate, $financialEndDate])
        ->whereBetween('periodenddate', [$financialStartDate, $financialEndDate])
        ->pluck('assignmentgenerate_id');

      // $invoices = DB::table('invoices')
      //   ->select(
      //     'invoices.assignmentgenerate_id',
      //     'teammembers.team_member',
      //     DB::raw('SUM(invoices.total) as total')
      //   )
      //   ->join('teammembers', 'teammembers.id', '=', 'invoices.partner')
      //   ->whereIn('invoices.assignmentgenerate_id', $assignmentGenerateIds)
      //   ->groupBy('invoices.assignmentgenerate_id', 'teammembers.team_member')
      //   ->get();

      $invoicesdata = DB::table('invoices')
        ->select(
          'invoices.assignmentgenerate_id',
          'invoices.currency',
          'teammembers.team_member',
          DB::raw("DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(invoices.total) as total_amount')
        )
        ->join('teammembers', 'teammembers.id', '=', 'invoices.partner')
        ->whereIn('invoices.assignmentgenerate_id', $assignmentGenerateIds)
        ->groupBy('invoices.assignmentgenerate_id', 'teammembers.team_member', 'invoices.currency', 'bill_date')
        ->get();

      $invoicesdata = $this->convertusdtoinr1($invoicesdata);

      $invoices = $invoicesdata
        ->groupBy('assignmentgenerate_id')
        ->map(function ($items, $assignmentId) {
          return (object)[
            'assignmentgenerate_id' => $assignmentId,
            'team_member' => $items->first()->team_member,
            'total' => $items->sum('total_amount'),
          ];
        })
        ->values();


      $timesheetData = DB::table('timesheetusers')
        ->select('assignmentgenerate_id', 'createdby', DB::raw('SUM(totalhour) as total_hour'))
        ->whereIn('assignmentgenerate_id', $assignmentGenerateIds)
        ->groupBy('assignmentgenerate_id', 'createdby')
        ->get();

      $teamMemberCosts = DB::table('teammembers')
        ->whereIn('id', $timesheetData->pluck('createdby')->unique())
        ->pluck('cost_hour', 'id');

      $groupedCosts = $timesheetData->groupBy('assignmentgenerate_id')->map(function ($rows) use ($teamMemberCosts) {
        return $rows->sum(function ($row) use ($teamMemberCosts) {
          return $row->total_hour * ($teamMemberCosts[$row->createdby] ?? 0);
        });
      });

      // $finalData = $invoices->map(function ($row) use ($groupedCosts) {
      //   $row->cost = $groupedCosts[$row->assignmentgenerate_id] ?? 0;
      //   $row->profit_loss = $row->total - $row->cost;
      //   return $row;
      // });

      $finalData = $invoices->map(function ($row) use ($groupedCosts, $conveyanceonlybillno) {
        $workedcost = $groupedCosts[$row->assignmentgenerate_id] ?? 0;
        $convencecostdata = $conveyanceonlybillno[$row->assignmentgenerate_id] ?? 0;
        $row->cost = $workedcost + $convencecostdata;
        $row->profit_loss = $row->total - $row->cost;
        return $row;
      });

      $partnerWiseProfit = $finalData
        ->groupBy('team_member')
        ->map(function ($items, $teamMember) {
          return (object)[
            'team_member' => $teamMember,
            'total' => $items->sum(fn($item) => (float) $item->total),
            'cost' => $items->sum('cost'),
            'profit_loss' => $items->sum('profit_loss'),
          ];
        })
        // Reset index if needed
        ->values();
      // Partner-wise P&L Statement end hare


      // Staff Allocation vs Actual Timesheet Analysis
      $teamAllocatedHours = DB::table('timesheetusers')
        ->join('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->whereIn('teammembers.id', [14, 23, 187, 305, 659, 815])
        // ->whereNotIn('teammembers.role_id', [13])
        ->whereBetween('timesheetusers.created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->select(
          'teammembers.id as teammember_id',
          'teammembers.team_member',
          'teammembers.role_id',
          DB::raw('SUM(timesheetusers.totalhour) as actualhours')
        )
        ->groupBy('teammembers.id', 'teammembers.team_member', 'teammembers.role_id')
        // ->limit(6)
        ->get();


      foreach ($teamAllocatedHours as $teamAllocatedHour) {
        if ($teamAllocatedHour->role_id == 13) {
          $allocatedHours1 = DB::table('assignmentmappings')
            ->where('assignmentmappings.eqcrpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentmappings.eqcresthour');

          $allocatedHours2 = DB::table('assignmentmappings')
            ->where('assignmentmappings.leadpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentmappings.partneresthour');

          $allocatedHours3 = DB::table('assignmentmappings')
            ->where('assignmentmappings.otherpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentmappings.otherpartneresthour');

          $allocatedHours = $allocatedHours1 + $allocatedHours2 + $allocatedHours3;
        } else {
          $allocatedHours = DB::table('assignmentteammappings')
            ->where('assignmentteammappings.teammember_id', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentteammappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentteammappings.teamesthour');
        }

        if (is_null($allocatedHours)) {
          $allocatedHours = 0;
        }
        $teamAllocatedHour->teamallocatedhours = $allocatedHours;
        $teamAllocatedHour->discrepancy = $teamAllocatedHour->actualhours - (float) $allocatedHours;
      }

      // Monthly Expense Analysis
      // financial year
      $teamsSalaries = DB::table('employeepayrolls')
        ->select(
          'month',
          'year',
          DB::raw('SUM(total_amount_to_paid) as total_amount')
        )
        ->where(function ($query) use ($financialEndYear, $financialStartYear) {
          // Jan to Mar from next year
          $query->where(function ($q) use ($financialEndYear) {
            $q->where('year', $financialEndYear)
              ->whereIn('month', ['January', 'February', 'March']);
          })
            // Apr to Jun from current year
            ->orWhere(function ($q) use ($financialStartYear) {
              $q->where('year', $financialStartYear)
                ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
            });
        })
        ->where('send_to_bank', 1)
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();

      $teamexceptionalExpenses = DB::table('outstationconveyances')
        ->selectRaw('MONTH(paiddate) as month, YEAR(paiddate) as year, SUM(finalamount) as total_amount')
        ->where('status', 6)
        ->whereBetween('paiddate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(paiddate), YEAR(paiddate)')
        ->orderByRaw('FIELD(MONTH(paiddate),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // Cash Flow Analysis
      $cashFlowRecieved = DB::table('payments')
        ->selectRaw('MONTH(paymentdate) as month, YEAR(paymentdate) as year, SUM(amountreceived) as amountreceived')
        ->whereBetween('paymentdate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(paymentdate), YEAR(paymentdate)')
        ->orderByRaw('FIELD(MONTH(paymentdate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashFlowSpendvender = DB::table('vendorlist')
        ->selectRaw('MONTH(approvedate) as month, YEAR(approvedate) as year, SUM(amount) as total_amounts')
        ->where('status', 4)
        ->whereBetween('approvedate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(approvedate), YEAR(approvedate)')
        ->orderByRaw('FIELD(MONTH(approvedate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashFlowSpendemployee = DB::table('employeepayrolls')
        ->select('month', 'year', DB::raw('SUM(total_amount_to_paid) as total_amounts'))
        ->where(function ($query) use ($financialEndYear, $financialStartYear) {
          $query->where(function ($q) use ($financialEndYear) {
            $q->where('year', $financialEndYear)
              ->whereIn('month', ['January', 'February', 'March']);
          })->orWhere(function ($q) use ($financialStartYear) {
            $q->where('year', $financialStartYear)
              ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
          });
        })
        ->where('send_to_bank', 1)
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();

      $mergedSpenddata = $cashFlowSpendvender->merge($cashFlowSpendemployee);

      $cashFlowtotalspendData = $mergedSpenddata->groupBy(function ($item) {
        return $item->month . '-' . $item->year;
      })->map(function ($group) {
        return (object) [
          'month' => $group->first()->month,
          'year' => $group->first()->year,
          'total_amounts' => $group->sum('total_amounts'),
        ];
      })->sortBy(function ($item) {
        $order = ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March'];
        return array_search($item->month, $order);
      })->values();

      // Cash Flow Analysis end hare

      // Budget vs Actual Cash Flow

      // 1.budget table se budgetinflow
      // 2.cash recieved in paymnets table 
      // 2.budget table se budgetoutflow
      // 4.cash spend on employee and vender, like  employeepayrolls and vendorlist tables 

      $budgetactualcash = DB::table('budget')
        ->select('month', 'year', DB::raw('SUM(budgetinflow) as budgetinflow'), DB::raw('SUM(budgetoutflow) as budgetoutflow'))
        ->where(function ($query) use ($financialEndYear, $financialStartYear) {
          $query->where(function ($q) use ($financialEndYear) {
            $q->where('year', $financialEndYear)
              ->whereIn('month', ['January', 'February', 'March']);
          })->orWhere(function ($q) use ($financialStartYear) {
            $q->where('year', $financialStartYear)
              ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
          });
        })
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();


      //  Budget vs Actual Cash Flow end hare 


      // Invoice Due vs Assignment Billing vs Cash Recovery
      // $assignmentBilling = DB::table('invoices')
      //   ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(total) as invoices_amount')
      //   ->whereBetween('created_at', [
      //     $financialStartDate,
      //     $financialEndDate
      //   ])
      //   ->groupByRaw('MONTH(created_at), YEAR(created_at)')
      //   ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
      //   ->get()
      //   ->map(function ($item) use ($monthNames) {
      //     $item->month = $monthNames[$item->month] ?? $item->month;
      //     return $item;
      //   });

      $assignmentBillingdata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $assignmentBillingdata = $this->convertusdtoinr1($assignmentBillingdata);

      $assignmentBilling = $assignmentBillingdata
        ->groupBy('month')
        ->map(function ($items, $month) {
          return (object)[
            'month' => $month,
            'year' => $items->first()->year,
            'total_amount' => $items->sum('total_amount'),
          ];
        })
        ->values();

      $assignmentOutstanding = DB::table('outstandings')
        ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(AMT) as outstanding_amount')
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashRecovery = DB::table('payments')
        ->selectRaw('MONTH(paymentdate) as month, YEAR(paymentdate) as year, SUM(amountreceived) as amountreceived')
        ->whereBetween('paymentdate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(paymentdate), YEAR(paymentdate)')
        ->orderByRaw('FIELD(MONTH(paymentdate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // Lap Days Analysis (Assignment to Invoice)
      $assignmentsWithInvoices = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        // get only those assignments for which an invoice has been created
        ->join('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->selectRaw('MONTH(assignmentbudgetings.otpverifydate) as month, YEAR(assignmentbudgetings.otpverifydate) as year, assignmentbudgetings.otpverifydate, invoices.created_at as invoice_created_at, invoices.id as invoice_id')
        ->whereBetween('assignmentbudgetings.otpverifydate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->orderByRaw('FIELD(MONTH(assignmentbudgetings.otpverifydate), 1,2,3,4,5,6,7,8,9,10,11,12)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $assignmentclosedDate = Carbon::parse($item->otpverifydate);
          $invoicecreatedDate = Carbon::parse($item->invoice_created_at);
          $item->differenceDays = $assignmentclosedDate->diffInDays($invoicecreatedDate);
          $item->targetDays = 7;
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        })
        ->groupBy(fn($item) => $item->month . '-' . $item->year)
        ->map(function ($group) {
          $first = $group->first();
          return (object) [
            'month' => $first->month,
            'year' => $first->year,
            'otpverifydate' => $first->otpverifydate,
            'invoice_id' => $first->invoice_id,
            'invoice_created_at' => $first->invoice_created_at,
            'targetDays' => $first->targetDays,
            'differenceDays' => $group->sum('differenceDays'),
            'countitem' => $group->count(),
            // Average Difference Days = (sum of all differenceDays) / number of records
            'averageDifferenceDays' => round($group->avg('differenceDays'), 1),
          ];
        })
        ->sortBy(fn($item) => array_search($item->month, array_values($monthNames)))
        ->values();

      // Budget vs Actual P&L
      $budgetRevenueandbudgetExpences = DB::table('assignmentmappings')
        ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(engagementfee) as engagementfee, SUM(teamestcost) as total_teamestcost')
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // $budgetActualRevenue = DB::table('invoices')
      //   ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(total) as invoices_amount')
      //   ->whereBetween('created_at', [
      //     $financialStartDate,
      //     $financialEndDate
      //   ])
      //   ->groupByRaw('MONTH(created_at), YEAR(created_at)')
      //   ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
      //   ->get()
      //   ->map(function ($item) use ($monthNames) {
      //     $item->month = $monthNames[$item->month] ?? $item->month;
      //     return $item;
      //   });

      $budgetActualRevenuedata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $budgetActualRevenuedata = $this->convertusdtoinr1($budgetActualRevenuedata);

      $budgetActualRevenue = $budgetActualRevenuedata
        ->groupBy('month')
        ->map(function ($items, $month) {
          return (object)[
            'month' => $month,
            'year' => $items->first()->year,
            'total_amount' => $items->sum('total_amount'),
          ];
        })
        ->values();

      $budgetActualExpences = DB::table('timesheets')
        ->leftJoin('timesheetusers', 'timesheetusers.timesheetid', '=', 'timesheets.id')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->whereIn('timesheets.created_by', [815, 818])
        ->selectRaw('MONTH(timesheets.date) as month, YEAR(timesheets.date) as year, SUM(timesheetusers.totalhour * teammembers.cost_hour) as total_cost')
        ->whereBetween('timesheets.date', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(timesheets.date), YEAR(timesheets.date)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // Budget vs Actual P&L end hare 

      // Work From Home 
      $workFromHome = DB::table('checkins')
        ->where('checkin_from', 'Work From Home')
        ->whereMonth('created_at', Carbon::now()->month)
        ->whereYear('created_at', Carbon::now()->year)
        ->count();


      // filter data 
      $startYearforfilter = 2022;
      $currentDatetoday = Carbon::now();
      $currentYearforfilter = $currentDatetoday->year;
      $currentMonthforfilter = $currentDatetoday->month;
      $currentFinancialYear = $currentMonthforfilter >= 4 ? $currentYearforfilter : $currentYearforfilter - 1;

      $financialYears = [];
      for ($year = $startYearforfilter; $year <= $currentFinancialYear; $year++) {
        $financialYears[] = [
          'value' => $year . '-' . ($year + 1),
        ];
      }

      $partnerlist = Teammember::where('status', 1)
        ->where('role_id', 13)
        ->with('title')
        ->orderBy('team_member', 'asc')
        ->get();

      session()->forget('_old_input');

      return view('backEnd.kgsdashboardreport', compact('partnerlist', 'budgetactualcash', 'financialYears', 'workFromHome', 'budgetRevenueandbudgetExpences', 'budgetActualRevenue', 'budgetActualExpences', 'assignmentsWithInvoices', 'assignmentBilling', 'assignmentOutstanding', 'cashRecovery', 'cashFlowtotalspendData', 'cashFlowRecieved', 'teamexceptionalExpenses', 'teamsSalaries', 'teamAllocatedHours', 'timesheetOnClosedAssignment', 'totalNotFilled', 'partnerWiseProfit', 'lossMakingCount', 'billspending15Days', 'totalUpcomingAssignments', 'assignmentprofitandlosses', 'allTickets', 'hrTickets', 'ticketDatas', 'highpriorityAssignments', 'ecqrAudits', 'documentCompletions', 'assignmentOverviews',  'exceptionalExpenses', 'auditsDue', 'tendersSubmittedCount', 'delayedAssignments', 'assignmentcompleted', 'billspendingforcollection', 'billspending'));
    }






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
after index function 


  public function filterdashboardreport(Request $request)
  {

    $yearly = $request->input('yearly');
    $monthsdigit = $request->input('months');
    $partnerId = $request->input('partner');
    [$startYear, $endYear] = explode('-', $yearly);
    // if (!empty($monthsdigit)) {
    //   $monthNames = [
    //     1  => 'January',
    //     2  => 'February',
    //     3  => 'March',
    //     4  => 'April',
    //     5  => 'May',
    //     6  => 'June',
    //     7  => 'July',
    //     8  => 'August',
    //     9  => 'September',
    //     10 => 'October',
    //     11 => 'November',
    //     12 => 'December',
    //   ];
    //   $months = $monthNames[$monthsdigit];
    // }

    $monthNames = [
      1  => 'January',
      2  => 'February',
      3  => 'March',
      4  => 'April',
      5  => 'May',
      6  => 'June',
      7  => 'July',
      8  => 'August',
      9  => 'September',
      10 => 'October',
      11 => 'November',
      12 => 'December',
    ];

    $months = !empty($monthsdigit) ? ($monthNames[$monthsdigit] ?? null) : null;

    // financial year date range using input years
    $startDate = Carbon::createFromFormat('Y-m-d', $startYear . '-04-01');
    $endDate   = Carbon::createFromFormat('Y-m-d', $endYear . '-03-31');
    $startDateFormatted = $startDate->format('Y-m-d');
    $endDateFormatted = $endDate->format('Y-m-d');

    if (auth()->user()->role_id == 11) {

      // KPI filter start from hare 

      // //ff How many amounts pending for invoice genrated
      // $billspendingQuery = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted])
      //   ->where(function ($query) use ($startDateFormatted, $endDateFormatted) {
      //     $query->whereNull('invoices.created_at')
      //       ->orWhereNotBetween('invoices.created_at', [$startDateFormatted, $endDateFormatted]);
      //   })
      //   ->where('assignmentbudgetings.status', 0);

      // if (!empty($monthsdigit)) {
      //   $billspendingQuery->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
      // }

      // $billspending = $billspendingQuery->sum('assignmentmappings.engagementfee');


      // //ff Bills Pending For Collection
      // $billspendingforcollectionQuery = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
      //   ->where('assignmentbudgetings.status', 0)
      //   // ensures invoice is created
      //   ->whereNotNull('invoices.id')
      //   ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted])
      //   ->whereBetween('invoices.created_at', [$startDateFormatted, $endDateFormatted]);

      // if (!empty($monthsdigit)) {
      //   $billspendingforcollectionQuery->whereMonth('invoices.created_at', $monthsdigit);
      // }
      // $billspendingforcollection = $billspendingforcollectionQuery->sum('outstandings.AMT');


      // //ff How many amounts pending for collection within 15 days or Payments Not Recieved
      // $billspending15Days = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('payments', 'payments.invoiceid', '=', 'invoices.invoice_id')
      //   ->where('assignmentbudgetings.status', 0)
      //   ->whereNotNull('invoices.id') // Invoice is created
      //   ->whereNull('payments.invoiceid') // Payment not yet received
      //   ->whereBetween('invoices.created_at', [$startDateFormatted, $endDateFormatted])
      //   ->when(!empty($monthsdigit), function ($query) use ($monthsdigit, $startYear, $endYear) {
      //     $yearForMonth = $monthsdigit >= 4 ? $startYear : $endYear;
      //     $monthEnd = Carbon::create($yearForMonth, $monthsdigit, 1)->endOfMonth();
      //     // $monthStart = $monthEnd->copy()->subDays(28);
      //     $monthStart = $monthEnd->copy()->subDays(15);
      //     return $query->whereYear('invoices.created_at', $yearForMonth)
      //       ->whereMonth('invoices.created_at', $monthsdigit)
      //       ->whereBetween('invoices.created_at', [$monthStart, $monthEnd]);
      //   })
      //   ->when(empty($monthsdigit), function ($query) use ($endDateFormatted) {
      //     return $query->whereDate('invoices.created_at', '>=', Carbon::parse($endDateFormatted)->subDays(15));
      //   })
      //   ->sum('invoices.total');


      // filter KPI How many amounts pending for invoice genrated or Bills Pending
      $billspending = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->whereNull('invoices.assignmentgenerate_id')
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->where('assignmentbudgetings.status', 0)
        ->sum('assignmentmappings.engagementfee');


      // filter KPI Bills Pending For Collection
      $outstandingBills = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('invoices.partner', $partnerId);
        })
        ->whereNotNull('invoices.id')
        ->where('assignmentbudgetings.status', 0)
        // ->whereIn('invoices.currency', [1, 3])
        ->where(function ($q) {
          $q->whereIn('invoices.currency', [1, 3])
            ->orWhereNull('invoices.currency');
        })
        ->select(
          'invoices.currency',
          // 'assignmentmappings.assignmentgenerate_id',
          DB::raw("DATE_FORMAT(outstandings.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(outstandings.AMT) as total_amount')
        )
        ->groupBy('invoices.currency', 'bill_date')
        ->get();


      $billspendingforcollection = $this->convertusdtoinr($outstandingBills);

      // filter KPI How many amounts pending for collection within 15 days or Payments Not Recieved
      $billspending15Daysdata = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
        ->leftJoin('payments', 'payments.invoiceid', '=', 'invoices.invoice_id')
        ->where('assignmentbudgetings.status', 0)
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('invoices.partner', $partnerId);
        })
        ->whereNotNull('invoices.id')
        ->where('invoices.status', 2)
        ->whereNull('payments.invoiceid')
        ->where(function ($q) {
          $q->whereIn('invoices.currency', [1, 3])
            ->orWhereNull('invoices.currency');
        })
        ->whereBetween('invoices.created_at', [
          Carbon::today()->subDays(15)->startOfDay(),
          Carbon::today()->endOfDay()
        ])
        ->select(
          'invoices.currency',
          DB::raw("DATE_FORMAT(outstandings.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(outstandings.AMT) as total_amount')
        )
        ->groupBy('invoices.currency', 'bill_date')
        ->get();

      $billspending15Days = $this->convertusdtoinr($billspending15Daysdata);

      // filter KPI How many Assignments Completed in this months
      $query = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id');
      $query->whereBetween('assignmentbudgetings.otpverifydate', [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $query->whereMonth('assignmentbudgetings.otpverifydate', $monthsdigit);
      }
      if (!empty($partnerId)) {
        $query->where('assignmentmappings.leadpartner', $partnerId);
      }

      $assignmentcompleted = $query->count();

      // filter KPI How many Delayed Assignments
      // $delayedQuery = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->whereRaw('COALESCE(DATE(assignmentbudgetings.actualenddate), DATE(assignmentbudgetings.tentativeenddate)) < ?', [Carbon::today()->toDateString()])
      //   ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted]);
      // if (!empty($monthsdigit)) {
      //   $delayedQuery->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
      // }
      // $delayedAssignments = $delayedQuery->count();

      $delayedQuery = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', 1)
        ->whereRaw('COALESCE(DATE(assignmentbudgetings.actualenddate), DATE(assignmentbudgetings.tentativeenddate)) < ?', [Carbon::today()->toDateString()])
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $delayedQuery->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
      }
      if (!empty($partnerId)) {
        $delayedQuery->where('assignmentmappings.leadpartner', $partnerId);
      }
      $delayedAssignments = $delayedQuery->count();

      // dd($monthsdigit, $partnerId, $delayedAssignments);



      // filter KPI total amount of convence, how many amount approved for convence in this months or Exceptional Expenses 
      // $exceptionalQuery = DB::table('outstationconveyances')
      //   ->where('status', 6)
      //   ->whereBetween('approveddate', [$startDateFormatted, $endDateFormatted]);
      // if (!empty($monthsdigit)) {
      //   $exceptionalQuery->whereMonth('approveddate', $monthsdigit);
      // }
      // $exceptionalExpenses = $exceptionalQuery->sum('finalamount');

      $exceptionalQuery = DB::table('outstationconveyances')
        ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', '=', 'outstationconveyances.assignmentgenerate_id')
        ->where('outstationconveyances.status', 6)
        ->whereBetween('outstationconveyances.paiddate', [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $exceptionalQuery->whereMonth('outstationconveyances.paiddate', $monthsdigit);
      }
      if (!empty($partnerId)) {
        $exceptionalQuery->where('assignmentmappings.leadpartner', $partnerId);
      }

      $exceptionalExpenses = $exceptionalQuery->sum('finalamount');


      // filter KPI New Tenders Submitted this months
      // $tendersQuery = DB::table('tenders')
      //   ->where('tendersubmitstatus', 1)
      //   ->whereBetween('date', [$startDateFormatted, $endDateFormatted]);
      // if (!empty($monthsdigit)) {
      //   $tendersQuery->whereMonth('date', $monthsdigit);
      // }
      // $tendersSubmittedCount = $tendersQuery->count();

      $tendersQuery = DB::table('tenders')
        ->where('tendersubmitstatus', 1)
        ->whereBetween('tendersubmitdate', [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $tendersQuery->whereMonth('tendersubmitdate', $monthsdigit);
      }
      // if (!empty($partnerId)) {hide this box
      //   $tendersQuery->where('assignmentmappings.leadpartner', $partnerId);
      // }
      $tendersSubmittedCount = $tendersQuery->count();


      // filter KPI how many users not accepted Audit Acceptance Pending mail till now
      $totalNotFilled = DB::table('assignmentmappings')
        ->select(DB::raw('COUNT(*) as total_not_filled'))
        ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
        ->leftJoin('annual_independence_declarations', function ($join) {
          $join->on('annual_independence_declarations.assignmentgenerateid', '=', 'assignmentmappings.assignmentgenerate_id')
            ->on('annual_independence_declarations.createdby', '=', 'teammembers.id')
            ->where('annual_independence_declarations.type', 2);
        })
        ->whereNull('annual_independence_declarations.id') // Members without declarations
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->groupBy('assignmentmappings.assignmentgenerate_id')
        ->get()
        ->sum('total_not_filled');

      // $clientindependenceNotFilled = DB::table('assignmentmappings')
      //   ->select(DB::raw('COUNT(*) as total_not_filled'))
      //   ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
      //   ->leftJoin('annual_independence_declarations', function ($join) {
      //     $join->on('annual_independence_declarations.assignmentgenerateid', '=', 'assignmentmappings.assignmentgenerate_id')
      //       ->on('annual_independence_declarations.createdby', '=', 'teammembers.id')
      //       ->where('annual_independence_declarations.type', 2);
      //   })
      //   ->whereNull('annual_independence_declarations.id') // Members without declarations
      //   ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), [$startDateFormatted, $endDateFormatted])
      //   ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
      //     $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), $monthsdigit);
      //   })
      //   ->when(!empty($partnerId), function ($query) use ($partnerId) {
      //     $query->where('assignmentmappings.leadpartner', $partnerId);
      //   })
      //   ->groupBy('assignmentmappings.assignmentgenerate_id')
      //   ->get()
      //   ->sum('total_not_filled');


      // $independencenotfilled = DB::table('assignmentmappings')
      //   ->select(DB::raw('COUNT(*) as total_not_filled'))
      //   ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
      //   ->leftJoin('independences', function ($join) {
      //     $join->on('independences.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //       ->on('independences.createdby', '=', 'teammembers.id');
      //   })
      //   ->whereNull('independences.id') // Members without declarations
      //   ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), [$startDateFormatted, $endDateFormatted])
      //   ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
      //     $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), $monthsdigit);
      //   })
      //   ->when(!empty($partnerId), function ($query) use ($partnerId) {
      //     $query->where('assignmentmappings.leadpartner', $partnerId);
      //   })
      //   ->groupBy('assignmentmappings.assignmentgenerate_id')
      //   ->get()
      //   ->sum('total_not_filled');

      // $totalNotFilled = $clientindependenceNotFilled + $independencenotfilled;


      // filter KPI How many NAFRA are running
      $auditsDueQuery = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentmappings.eqcrapplicability', 1)
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $auditsDueQuery->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
      }
      if (!empty($partnerId)) {
        $auditsDueQuery->where('assignmentmappings.leadpartner', $partnerId);
      }
      $auditsDue = $auditsDueQuery->count();

      // filter KPI Upcoming Assignments
      $upcomingQuery = DB::table('assignmentplannings')
        ->where('status', 0)
        ->whereDate('assignmentstartdate', '>=', Carbon::today())
        ->whereBetween('assignmentstartdate', [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $upcomingQuery->whereMonth('assignmentstartdate', $monthsdigit);
      }
      if (!empty($partnerId)) {
        $upcomingQuery->where('assignmentplannings.engagementpartner', $partnerId);
      }
      $upcomingFromPlannings = $upcomingQuery->count();


      $upcomingFromBudgetingsQuery = DB::table('assignmentmappings')
        ->join('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->whereRaw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate) > ?', [Carbon::today()->toDateString()])
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $upcomingFromBudgetingsQuery->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), $monthsdigit);
      }
      if (!empty($partnerId)) {
        $upcomingFromBudgetingsQuery->where('assignmentmappings.leadpartner', $partnerId);
      }
      $upcomingFromBudgetings = $upcomingFromBudgetingsQuery->count();
      $totalUpcomingAssignments = $upcomingFromPlannings + $upcomingFromBudgetings;

      // filter KPI Timesheet Filled On Closed Assignment
      $timesheetOnClosedAssignment = DB::table('assignmentmappings')
        ->join('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->join('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->whereExists(function ($query) {
          $query->select(DB::raw(1))
            ->from('timesheetusers')
            ->whereRaw('timesheetusers.assignmentgenerate_id = assignmentmappings.assignmentgenerate_id')
            ->whereRaw("DATE(timesheetusers.created_at) > DATE(COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate))");
        })
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->select('assignmentmappings.assignmentgenerate_id')
        ->distinct()
        ->count();

      // filter KPI Work From Home 
      $workFromHomeQuery = DB::table('checkins')
        ->where('checkin_from', 'Work From Home')
        ->whereBetween('created_at', [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $workFromHomeQuery->whereMonth('created_at', $monthsdigit);
      }
      // if (!empty($partnerId)) {hide this is hidden from UI
      //   $workFromHomeQuery->where('assignmentmappings.leadpartner', $partnerId);
      // }
      $workFromHome = $workFromHomeQuery->count();

      // KPI filter end from hare 

      // filter Chart, Assignment Status Overview
      $assignmentOverviews = DB::table('assignmentmappings')
        ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name',
          DB::raw('(SELECT SUM(totalhour) FROM timesheetusers WHERE timesheetusers.assignmentgenerate_id = assignmentmappings.assignmentgenerate_id) as workedHours')
        )
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->orderByDesc('assignmentbudgetings.id')
        ->get()
        ->map(function ($assignmentOverview) {
          $totalHours = $assignmentOverview->esthours ?? 0;
          $workedHours = $assignmentOverview->workedHours ?? 0;
          $completionPercentage = $totalHours > 0 ? round(($workedHours / $totalHours) * 100, 2) : 0;
          $assignmentOverview->completionPercentage = $completionPercentage;
          return $assignmentOverview;
        });


      // filter Chart, Document Completion Progress
      $documentCompletions = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        // ->where('assignmentbudgetings.status', 1)
        ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->orderByDesc('assignmentbudgetings.id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'clients.client_name'
        )
        ->get();


      foreach ($documentCompletions as $mapping) {
        $assignmentId = $mapping->assignmentgenerate_id;

        // Get assignment_id and eqcrapplicability
        $assignmentMapping = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $assignmentId)
          ->select('assignment_id', 'eqcrapplicability')
          ->first();

        // Determine EQCR type name
        $eqcrTypeName = '';
        $eqcrAssignmentId = null;
        if (isset($assignmentMapping->eqcrapplicability)) {
          switch ($assignmentMapping->eqcrapplicability) {
            case 1:
              $eqcrTypeName = 'NFRA';
              break;
            case 2:
              $eqcrTypeName = 'Quality Review';
              break;
            case 3:
              $eqcrTypeName = 'Peer Review';
              break;
            case 4:
              $eqcrTypeName = 'Others';
              break;
            case 5:
              $eqcrTypeName = 'PCAOB';
              break;
          }
          // Get the assignment_id for the EQCR type
          $specialAssignment = DB::table('assignments')
            ->where('assignment_name', $eqcrTypeName)
            ->first();
          if ($specialAssignment) {
            $eqcrAssignmentId = $specialAssignment->id;
          }
        }
        $mapping->eqcr_type_name = $eqcrTypeName;

        // Regular Checklist Calculations (Exclude EQCR assignment_id)
        $classificationIds = DB::table('financialstatementclassifications')
          ->where('assignment_id', $assignmentMapping->assignment_id)
          ->where(function ($q) use ($assignmentId) {
            $q->whereNull('assignmentgenerate_id')->orWhere('assignmentgenerate_id', $assignmentId);
          })
          ->when($eqcrAssignmentId, function ($query) use ($eqcrAssignmentId) {
            $query->where('assignment_id', '!=', $eqcrAssignmentId);
          })
          ->pluck('id');



        $subClassIds = DB::table('subfinancialclassfications')
          ->whereIn('financialstatemantclassfication_id', $classificationIds)
          ->pluck('id');



        $totalQuestions = DB::table('auditquestions')
          ->whereIn('financialstatemantclassfication_id', $classificationIds)
          ->whereIn('subclassfied_id', $subClassIds)
          ->count();


        $statusCounts = DB::table('checklistanswers')
          ->join('statuses', 'checklistanswers.status', '=', 'statuses.id')
          ->where('checklistanswers.assignment_id', $assignmentId)
          ->whereIn('checklistanswers.financialstatemantclassfication_id', $classificationIds)
          ->whereIn('checklistanswers.subclassfied_id', $subClassIds)
          ->select(
            'statuses.name as status_name',
            DB::raw('COUNT(*) as count')
          )
          ->groupBy('statuses.name')
          ->pluck('count', 'status_name');



        $closedQuestions = $statusCounts['CLOSE'] ?? 0;

        $mapping->documentation_percentage = $totalQuestions > 0
          ? round(($closedQuestions / $totalQuestions) * 100, 2)
          : 0;
      }
      // Document Completion Progress end hare 

      // filter Chart, NFRA Audits, Quality Reviews & Peer Review
      $ecqrAudits = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.eqcrpartner')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        // ->where('assignmentbudgetings.status', 1)
        ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->whereIn('assignmentmappings.eqcrapplicability', [1, 2, 3])
        ->select(
          'assignmentmappings.*',
          'teammembers.team_member',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        // ->limit(3)
        ->get();

      foreach ($ecqrAudits as $audit) {
        $assignmentId = $audit->assignmentgenerate_id;

        // get reviewer assignment id (based on eqcrapplicability)
        $eqcrTypeName = '';
        $eqcrAssignmentId = null;
        switch ($audit->eqcrapplicability) {
          case 1:
            $eqcrTypeName = 'NFRA';
            break;
          case 2:
            $eqcrTypeName = 'Quality Review';
            break;
          case 3:
            $eqcrTypeName = 'Peer Review';
            break;
          case 4:
            $eqcrTypeName = 'Others';
            break;
          case 5:
            $eqcrTypeName = 'PCAOB';
            break;
        }
        if ($eqcrTypeName) {
          $specialAssignment = DB::table('assignments')
            ->where('assignment_name', $eqcrTypeName)
            ->first();
          if ($specialAssignment) {
            $eqcrAssignmentId = $specialAssignment->id;
          }
        }

        $audit->reviewer_documentation_percentage = 0;

        if ($eqcrAssignmentId) {
          $reviewerClassificationIds = DB::table('financialstatementclassifications')
            ->where('assignment_id', $eqcrAssignmentId)
            ->where(function ($q) use ($assignmentId) {
              $q->whereNull('assignmentgenerate_id')->orWhere('assignmentgenerate_id', $assignmentId);
            })
            ->pluck('id');

          $reviewerSubClassIds = DB::table('subfinancialclassfications')
            ->whereIn('financialstatemantclassfication_id', $reviewerClassificationIds)
            ->pluck('id');

          $reviewerTotalQuestions = DB::table('auditquestions')
            ->whereIn('financialstatemantclassfication_id', $reviewerClassificationIds)
            ->whereIn('subclassfied_id', $reviewerSubClassIds)
            ->count();

          $reviewerStatusCounts = DB::table('checklistanswers')
            ->join('statuses', 'checklistanswers.status', '=', 'statuses.id')
            ->where('checklistanswers.assignment_id', $assignmentId)
            ->whereIn('checklistanswers.financialstatemantclassfication_id', $reviewerClassificationIds)
            ->whereIn('checklistanswers.subclassfied_id', $reviewerSubClassIds)
            ->select('statuses.name as status_name', DB::raw('COUNT(*) as count'))
            ->groupBy('statuses.name')
            ->pluck('count', 'status_name');

          $reviewerClosed =  ($reviewerStatusCounts['CLOSE'] ?? 0) +
            ($reviewerStatusCounts['NOT-APPLICABLE'] ?? 0);

          $audit->reviewer_documentation_percentage = $reviewerTotalQuestions > 0
            ? round(($reviewerClosed / $reviewerTotalQuestions) * 100, 2)
            : 0;
        }
      }

      // dd($ecqrAudits);

      // filter Chart, Assignment-wise P&L Analysis and Loss Making Assignments
      $assignmentprofitandlosses = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->orderByDesc('assignmentbudgetings.id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        // ->limit(6)
        ->get();

      $assignmentCosts = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->where('timesheetusers.assignmentgenerate_id', 254418551033)
        // ->whereBetween(DB::raw("STR_TO_DATE(timesheetusers.date, '%d-%m-%Y')"), [
        //   $financialStartDate->format('Y-m-d'),
        //   $financialEndDate->format('Y-m-d')
        // ])
        ->select('timesheetusers.assignmentgenerate_id', DB::raw('SUM(timesheetusers.totalhour * teammembers.cost_hour) as total_cost'))
        ->groupBy('timesheetusers.assignmentgenerate_id')
        ->pluck('total_cost', 'assignmentgenerate_id');

      $conveyanceonlybillno = DB::table('outstationconveyances')
        ->where('bill', 'No')
        ->select(
          'assignmentgenerate_id',
          DB::raw('SUM(finalamount) as finalamounts')
        )
        ->groupBy('assignmentgenerate_id')
        ->pluck('finalamounts', 'assignmentgenerate_id');


      $lossMakingCount = 0;
      foreach ($assignmentprofitandlosses as $assignment) {
        $assignmentworkedcost = $assignmentCosts[$assignment->assignmentgenerate_id] ?? 0;
        $assignmentconvencecost = $conveyanceonlybillno[$assignment->assignmentgenerate_id] ?? 0;
        $assignment->total_cost = $assignmentworkedcost + $assignmentconvencecost;
        // Loss Making Assignments
        $revenue = $assignment->engagementfee ?? 0;
        $cost = $assignment->total_cost ?? 0;
        $profit = $revenue - $cost;

        if ($profit < 0) {
          $lossMakingCount++;
        }
      }

      // filter Chart, Partner-wise P&L Statement
      $assignmentGenerateIds = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->whereBetween('assignmentbudgetings.periodstartdate', [$startDateFormatted, $endDateFormatted])
        ->whereBetween('assignmentbudgetings.periodenddate', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('assignmentbudgetings.periodstartdate', $monthsdigit)
            ->whereMonth('assignmentbudgetings.periodenddate', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->pluck('assignmentmappings.assignmentgenerate_id');


      // $invoices = DB::table('invoices')
      //   ->select(
      //     'invoices.assignmentgenerate_id',
      //     'teammembers.team_member',
      //     DB::raw('SUM(invoices.total) as total')
      //   )
      //   ->join('teammembers', 'teammembers.id', '=', 'invoices.partner')
      //   ->whereIn('invoices.assignmentgenerate_id', $assignmentGenerateIds)
      //   ->groupBy('invoices.assignmentgenerate_id', 'teammembers.team_member')
      //   ->get();

      $invoicesdata = DB::table('invoices')
        ->select(
          'invoices.assignmentgenerate_id',
          'invoices.currency',
          'teammembers.team_member',
          DB::raw("DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(invoices.total) as total_amount')
        )
        ->join('teammembers', 'teammembers.id', '=', 'invoices.partner')
        ->whereIn('invoices.assignmentgenerate_id', $assignmentGenerateIds)
        ->groupBy('invoices.assignmentgenerate_id', 'teammembers.team_member', 'invoices.currency', 'bill_date')
        ->get();

      $invoicesdata = $this->convertusdtoinr1($invoicesdata);

      $invoices = $invoicesdata
        ->groupBy('assignmentgenerate_id')
        ->map(function ($items, $assignmentId) {
          return (object)[
            'assignmentgenerate_id' => $assignmentId,
            'team_member' => $items->first()->team_member,
            'total' => $items->sum('total_amount'),
          ];
        })
        ->values();

      $timesheetData = DB::table('timesheetusers')
        ->select('assignmentgenerate_id', 'createdby', DB::raw('SUM(totalhour) as total_hour'))
        ->whereIn('assignmentgenerate_id', $assignmentGenerateIds)
        ->groupBy('assignmentgenerate_id', 'createdby')
        ->get();

      $teamMemberCosts = DB::table('teammembers')
        ->whereIn('id', $timesheetData->pluck('createdby')->unique())
        ->pluck('cost_hour', 'id');

      $groupedCosts = $timesheetData->groupBy('assignmentgenerate_id')->map(function ($rows) use ($teamMemberCosts) {
        return $rows->sum(function ($row) use ($teamMemberCosts) {
          return $row->total_hour * ($teamMemberCosts[$row->createdby] ?? 0);
        });
      });

      // $finalData = $invoices->map(function ($row) use ($groupedCosts) {
      //   $row->cost = $groupedCosts[$row->assignmentgenerate_id] ?? 0;
      //   $row->profit_loss = $row->total - $row->cost;
      //   return $row;
      // });

      $finalData = $invoices->map(function ($row) use ($groupedCosts, $conveyanceonlybillno) {
        $workedcost = $groupedCosts[$row->assignmentgenerate_id] ?? 0;
        $convencecostdata = $conveyanceonlybillno[$row->assignmentgenerate_id] ?? 0;
        $row->cost = $workedcost + $convencecostdata;
        $row->profit_loss = $row->total - $row->cost;
        return $row;
      });

      $partnerWiseProfit = $finalData
        ->groupBy('team_member')
        ->map(function ($items, $teamMember) {
          return (object)[
            'team_member' => $teamMember,
            'total' => $items->sum(fn($item) => (float) $item->total),
            'cost' => $items->sum('cost'),
            'profit_loss' => $items->sum('profit_loss'),
          ];
        })
        // Reset index if needed
        ->values();

      // Partner-wise P&L Statement end hare

      // filter Chart, Monthly Expense Analysis 
      $teamsSalaries = DB::table('employeepayrolls')
        ->select(
          'month',
          'year',
          DB::raw('SUM(total_amount_to_paid) as total_amount')
        )
        ->where(function ($query) use ($endYear, $startYear) {
          // Jan to Mar from next year
          $query->where(function ($q) use ($endYear) {
            $q->where('year', $endYear);
            // ->whereIn('month', ['January', 'February', 'March']);
          })
            // Apr to Jun from current year
            ->orWhere(function ($q) use ($startYear) {
              $q->where('year', $startYear);
              // ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
            });
        })
        ->where('send_to_bank', 1)
        ->when(!empty($months), function ($query) use ($months) {
          $query->where('month', $months);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('createdby', $partnerId);
        })
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();


      // $teamexceptionalExpenses = DB::table('outstationconveyances')
      //   ->selectRaw('MONTH(approveddate) as month, YEAR(approveddate) as year, SUM(finalamount) as total_amount')
      //   ->where('status', 6)
      //   ->whereBetween('approveddate', [
      //     $startDateFormatted,
      //     $endDateFormatted
      //   ])
      //   ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
      //     $query->whereMonth('approveddate', $monthsdigit);
      //   })
      //   // ->when(!empty($partnerId), function ($query) use ($partnerId) {
      //   //   $query->where('assignmentmappings.leadpartner', $partnerId);
      //   // })
      //   ->groupByRaw('MONTH(approveddate), YEAR(approveddate)')
      //   ->orderByRaw('FIELD(MONTH(approveddate),  4,5,6,7,8,9,10,11,12,1,2,3)')
      //   ->get()
      //   ->map(function ($item) use ($monthNames) {
      //     $item->month = $monthNames[$item->month] ?? $item->month;
      //     return $item;
      //   });


      $teamexceptionalExpenses = DB::table('outstationconveyances')
        ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', '=', 'outstationconveyances.assignmentgenerate_id')
        ->selectRaw('MONTH(outstationconveyances.paiddate) as month, YEAR(outstationconveyances.paiddate) as year, SUM(outstationconveyances.finalamount) as total_amount')
        ->where('outstationconveyances.status', 6)
        ->whereBetween('outstationconveyances.paiddate', [
          $startDateFormatted,
          $endDateFormatted
        ])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('outstationconveyances.paiddate', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->groupByRaw('MONTH(outstationconveyances.paiddate), YEAR(outstationconveyances.paiddate)')
        ->orderByRaw('FIELD(MONTH(outstationconveyances.paiddate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // filter Chart,cc Cash Flow Analysis
      $cashFlowRecieved = DB::table('payments')
        ->leftJoin('invoices', 'invoices.invoice_id', '=', 'payments.invoiceid')
        ->selectRaw('MONTH(paymentdate) as month, YEAR(paymentdate) as year, SUM(amountreceived) as amountreceived')
        ->whereBetween('paymentdate', [
          $startDateFormatted,
          $endDateFormatted
        ])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('paymentdate', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('invoices.partner', $partnerId);
        })
        ->groupByRaw('MONTH(paymentdate), YEAR(paymentdate)')
        ->orderByRaw('FIELD(MONTH(paymentdate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashFlowSpendvender = DB::table('vendorlist')
        ->selectRaw('MONTH(approvedate) as month, YEAR(approvedate) as year, SUM(amount) as total_amounts')
        ->where('status', 4)
        ->whereBetween('approvedate', [
          $startDateFormatted,
          $endDateFormatted
        ])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('approvedate', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('approver', $partnerId);
        })
        ->groupByRaw('MONTH(approvedate), YEAR(approvedate)')
        ->orderByRaw('FIELD(MONTH(approvedate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashFlowSpendemployee = DB::table('employeepayrolls')
        ->select('month', 'year', DB::raw('SUM(total_amount_to_paid) as total_amounts'))
        ->where(function ($query) use ($endYear, $startYear) {
          // Jan to Mar from next year
          $query->where(function ($q) use ($endYear) {
            $q->where('year', $endYear);
            // ->whereIn('month', ['January', 'February', 'March']);
          })
            // Apr to Jun from current year
            ->orWhere(function ($q) use ($startYear) {
              $q->where('year', $startYear);
              // ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
            });
        })
        ->where('send_to_bank', 1)
        ->when(!empty($months), function ($query) use ($months) {
          $query->where('month', $months);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('createdby', $partnerId);
        })
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();

      $mergedSpenddata = $cashFlowSpendvender->merge($cashFlowSpendemployee);

      $cashFlowtotalspendData = $mergedSpenddata->groupBy(function ($item) {
        return $item->month . '-' . $item->year;
      })->map(function ($group) {
        return (object) [
          'month' => $group->first()->month,
          'year' => $group->first()->year,
          'total_amounts' => $group->sum('total_amounts'),
        ];
      })->sortBy(function ($item) {
        $order = ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March'];
        return array_search($item->month, $order);
      })->values();

      // filter Chart, Budget vs Actual Cash Flow

      // 1.budget table se budgetinflow
      // 2.cash recieved in paymnets table 
      // 2.budget table se budgetoutflow
      // 4.cash spend on employee and vender employeepayrolls and vendorlist tables 

      $budgetactualcash = DB::table('budget')
        ->select('month', 'year', DB::raw('SUM(budgetinflow) as budgetinflow'), DB::raw('SUM(budgetoutflow) as budgetoutflow'))
        ->where(function ($query) use ($endYear, $startYear) {
          // Jan to Mar from next year
          $query->where(function ($q) use ($endYear) {
            $q->where('year', $endYear);
            // ->whereIn('month', ['January', 'February', 'March']);
          })
            // Apr to Jun from current year
            ->orWhere(function ($q) use ($startYear) {
              $q->where('year', $startYear);
              // ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
            });
        })
        ->when(!empty($months), function ($query) use ($months) {
          $query->where('month', $months);
        })
        // ->when(!empty($partnerId), function ($query) use ($partnerId) {hide from UI
        //   $query->where('assignmentmappings.leadpartner', $partnerId);
        // })
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();

      //  Budget vs Actual Cash Flow end hare 


      // filter Chart, Budget vs Actual P&L
      $budgetRevenueandbudgetExpences = DB::table('assignmentmappings')
        ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(engagementfee) as engagementfee, SUM(teamestcost) as total_teamestcost')
        ->whereBetween('created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('leadpartner', $partnerId);
        })
        ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });


      $budgetActualRevenuedata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('partner', $partnerId);
        })
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $budgetActualRevenuedata = $this->convertusdtoinr1($budgetActualRevenuedata);

      $budgetActualRevenue = $budgetActualRevenuedata
        ->groupBy('month')
        ->map(function ($items, $month) {
          return (object)[
            'month' => $month,
            'year' => $items->first()->year,
            'total_amount' => $items->sum('total_amount'),
          ];
        })
        ->values();

      $budgetActualExpences = DB::table('timesheets')
        ->leftJoin('timesheetusers', 'timesheetusers.timesheetid', '=', 'timesheets.id')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->whereIn('timesheets.created_by', [815, 818])
        ->selectRaw('MONTH(timesheets.date) as month, YEAR(timesheets.date) as year, SUM(timesheetusers.totalhour * teammembers.cost_hour) as total_cost')
        ->whereBetween('timesheets.date', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('timesheets.date', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('timesheetusers.partner', $partnerId);
        })
        ->groupByRaw('MONTH(timesheets.date), YEAR(timesheets.date)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // Budget vs Actual P&L end hare 


      // filter Chart, Lap Days Analysis (Assignment to Invoice)
      $assignmentsWithInvoices = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        // get only those assignments for which an invoice has been created
        ->join('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->selectRaw('MONTH(assignmentbudgetings.otpverifydate) as month, YEAR(assignmentbudgetings.otpverifydate) as year, assignmentbudgetings.otpverifydate, invoices.created_at as invoice_created_at, invoices.id as invoice_id')
        ->whereBetween('assignmentbudgetings.otpverifydate', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('assignmentbudgetings.otpverifydate', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->orderByRaw('FIELD(MONTH(assignmentbudgetings.otpverifydate), 1,2,3,4,5,6,7,8,9,10,11,12)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $assignmentclosedDate = Carbon::parse($item->otpverifydate);
          $invoicecreatedDate = Carbon::parse($item->invoice_created_at);
          $item->differenceDays = $assignmentclosedDate->diffInDays($invoicecreatedDate);
          $item->targetDays = 7;
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        })
        ->groupBy(fn($item) => $item->month . '-' . $item->year)
        ->map(function ($group) {
          $first = $group->first();
          return (object) [
            'month' => $first->month,
            'year' => $first->year,
            'otpverifydate' => $first->otpverifydate,
            'invoice_id' => $first->invoice_id,
            'invoice_created_at' => $first->invoice_created_at,
            'targetDays' => $first->targetDays,
            'differenceDays' => $group->sum('differenceDays'),
            'countitem' => $group->count(),
            // Average Difference Days = (sum of all differenceDays) / number of records
            'averageDifferenceDays' => round($group->avg('differenceDays'), 1),
          ];
        })
        ->sortBy(fn($item) => array_search($item->month, array_values($monthNames)))
        ->values();


      // filter Chart, Invoice Due vs Assignment Billing vs Cash Recovery
      $assignmentBillingdata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('partner', $partnerId);
        })
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $assignmentBillingdata = $this->convertusdtoinr1($assignmentBillingdata);

      $assignmentBilling = $assignmentBillingdata
        ->groupBy('month')
        ->map(function ($items, $month) {
          return (object)[
            'month' => $month,
            'year' => $items->first()->year,
            'total_amount' => $items->sum('total_amount'),
          ];
        })
        ->values();

      $assignmentOutstanding = DB::table('outstandings')
        ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(AMT) as outstanding_amount')
        ->whereBetween('created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('Partner', $partnerId);
        })
        ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashRecovery = DB::table('payments')
        ->leftJoin('invoices', 'invoices.invoice_id', '=', 'payments.invoiceid')
        ->selectRaw('MONTH(paymentdate) as month, YEAR(paymentdate) as year, SUM(amountreceived) as amountreceived')
        ->whereBetween('paymentdate', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('paymentdate', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('invoices.partner', $partnerId);
        })
        ->groupByRaw('MONTH(paymentdate), YEAR(paymentdate)')
        ->orderByRaw('FIELD(MONTH(paymentdate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // filter Chart,  Staff Allocation vs Actual Timesheet Analysis
      $teamAllocatedHours = DB::table('timesheetusers')
        ->join('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->whereIn('teammembers.id', [14, 23, 187, 305, 659, 815])
        // ->whereNotIn('teammembers.role_id', [13])
        ->whereBetween('timesheetusers.created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('timesheetusers.created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('timesheetusers.partner', $partnerId);
        })
        ->select(
          'teammembers.id as teammember_id',
          'teammembers.team_member',
          'teammembers.role_id',
          DB::raw('SUM(timesheetusers.totalhour) as actualhours')
        )
        ->groupBy('teammembers.id', 'teammembers.team_member', 'teammembers.role_id')
        // ->limit(6)
        ->get();


      foreach ($teamAllocatedHours as $teamAllocatedHour) {
        if ($teamAllocatedHour->role_id == 13) {
          $allocatedHours1 = DB::table('assignmentmappings')
            ->where('assignmentmappings.eqcrpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
            ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
              $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
            })
            ->when(!empty($partnerId), function ($query) use ($partnerId) {
              $query->where('assignmentmappings.leadpartner', $partnerId);
            })
            ->sum('assignmentmappings.eqcresthour');

          $allocatedHours2 = DB::table('assignmentmappings')
            ->where('assignmentmappings.leadpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
            ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
              $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
            })
            ->when(!empty($partnerId), function ($query) use ($partnerId) {
              $query->where('assignmentmappings.leadpartner', $partnerId);
            })
            ->sum('assignmentmappings.partneresthour');

          $allocatedHours3 = DB::table('assignmentmappings')
            ->where('assignmentmappings.otherpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
            ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
              $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
            })
            ->when(!empty($partnerId), function ($query) use ($partnerId) {
              $query->where('assignmentmappings.leadpartner', $partnerId);
            })
            ->sum('assignmentmappings.otherpartneresthour');

          $allocatedHours = $allocatedHours1 + $allocatedHours2 + $allocatedHours3;
        } else {
          $allocatedHours = DB::table('assignmentmappings')
            ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
            ->where('assignmentteammappings.teammember_id', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentteammappings.created_at', [$startDateFormatted, $endDateFormatted])
            ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
              $query->whereMonth('assignmentteammappings.created_at', $monthsdigit);
            })
            ->when(!empty($partnerId), function ($query) use ($partnerId) {
              $query->where('assignmentmappings.leadpartner', $partnerId);
            })
            ->sum('assignmentteammappings.teamesthour');
        }

        if (is_null($allocatedHours)) {
          $allocatedHours = 0;
        }
        $teamAllocatedHour->teamallocatedhours = $allocatedHours;
        $teamAllocatedHour->discrepancy = $teamAllocatedHour->actualhours - (float) $allocatedHours;
      }


      // filter Chart, Fetch IT and Finance Tickets or Unresolved Tickets - HR, IT & Admin
      $ticketDatas = Assetticket::with(['financerequest', 'createdBy', 'partner'])
        ->whereIn('type', [0, 1])
        ->whereBetween('created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('partner_id', $partnerId);
        })
        ->orderByDesc('id')
        // ->limit(4)
        ->get()
        ->map(function ($item) {
          return [
            'ticket_id' => $item->generateticket_id,
            'department' => $item->type == 0 ? 'IT' : 'Finance',
            'created_by' => $item->createdBy->team_member ?? '',
            'subject' => $item->subject,
            'assigned_to' => $item->partner->team_member ?? '',
            'created_at' => $item->created_at,
            'status' => $item->status,
            'source' => 'ticket',
          ];
        });


      // Fetch HR Tasks
      $hrTickets = DB::table('tasks')
        ->select(
          'tasks.*',
          'patnerid.team_member as partnername',
          'createdby.team_member as createdbyname',
          'hrfunctions.hrfunction'
        )
        ->where('tasks.task_type', 4)
        ->whereBetween('tasks.created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('tasks.created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('tasks.partner_id', $partnerId);
        })
        ->leftJoin('teammembers as patnerid', 'patnerid.id', '=', 'tasks.partner_id')
        ->leftJoin('teammembers as createdby', 'createdby.id', '=', 'tasks.createdby')
        ->leftJoin('hrfunctions', 'hrfunctions.id', '=', 'tasks.hrfunction')
        ->orderByDesc('tasks.id')
        // ->limit(4)
        ->get()
        ->map(function ($item) {
          return [
            'ticket_id' => $item->generateticket_id ?? 'NA',
            'department' => 'HR',
            'created_by' => $item->createdbyname ?? '',
            'subject' => $item->taskname ?? '',
            'assigned_to' => $item->partnername ?? '',
            'created_at' => $item->created_at,
            'status' => $item->status,
            'source' => 'hr',
          ];
        });

      $allTickets = $ticketDatas->merge($hrTickets);

      // High Priority Tasks Pending
      $highpriorityAssignments  = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        ->limit(6)
        ->get();

      // filter data 
      $startYearforfilter = 2022;
      $currentDatetoday = Carbon::now();
      $currentYearforfilter = $currentDatetoday->year;
      $currentMonthforfilter = $currentDatetoday->month;
      $currentFinancialYear = $currentMonthforfilter >= 4 ? $currentYearforfilter : $currentYearforfilter - 1;

      $financialYears = [];
      for ($year = $startYearforfilter; $year <= $currentFinancialYear; $year++) {
        $financialYears[] = [
          'value' => $year . '-' . ($year + 1),
        ];
      }

      $partnerlist = Teammember::where('status', 1)
        ->where('role_id', 13)
        ->with('title')
        ->orderBy('team_member', 'asc')
        ->get();

      $request->flash();

      // filter data end hare 
      return view('backEnd.kgsdashboardreport', compact('monthsdigit', 'yearly', 'partnerId', 'partnerlist', 'budgetactualcash', 'financialYears', 'workFromHome', 'budgetRevenueandbudgetExpences', 'budgetActualRevenue', 'budgetActualExpences', 'assignmentsWithInvoices', 'assignmentBilling', 'assignmentOutstanding', 'cashRecovery', 'cashFlowtotalspendData', 'cashFlowRecieved', 'teamexceptionalExpenses', 'teamsSalaries', 'teamAllocatedHours', 'timesheetOnClosedAssignment', 'totalNotFilled', 'partnerWiseProfit', 'lossMakingCount', 'billspending15Days', 'totalUpcomingAssignments', 'assignmentprofitandlosses', 'allTickets', 'hrTickets', 'ticketDatas', 'highpriorityAssignments', 'ecqrAudits', 'documentCompletions', 'assignmentOverviews',  'exceptionalExpenses', 'auditsDue', 'tendersSubmittedCount', 'delayedAssignments', 'assignmentcompleted', 'billspendingforcollection', 'billspending'));
    }
  }
  
  

  public  function convertusdtoinr($usdAmountconvert)
  {

    $totalamountInr = 0;
    $totalUsdamount = 0;
    foreach ($usdAmountconvert as $bill) {

      if ($bill->currency == 3 || is_null($bill->currency)) {
        // INR amount added
        $totalamountInr += $bill->total_amount;
      } elseif ($bill->currency == 1) {
        // Get USD rate for that bill date
        $response = Http::get("https://api.frankfurter.app/{$bill->bill_date}", [
          'from' => 'USD',
          'to' => 'INR'
        ]);

        $rate = $response->successful()
          ? ($response->json()['rates']['INR'] ?? 0)
          : 0;
        $totalUsdamount += $bill->total_amount * $rate;
        // dd($bill, $rate, $totalUsdamount);
      }
    }

    return round($totalamountInr + $totalUsdamount, 2);
  }

  public function convertusdtoinr1($usdAmountconvert)
  {
    return $usdAmountconvert->map(function ($bill) {
      if ($bill->currency == 3 || is_null($bill->currency)) {
        $bill->total_amount = round($bill->total_amount, 2);
      } elseif ($bill->currency == 1) {
        // USD to INR 
        $response = Http::get("https://api.frankfurter.app/{$bill->bill_date}", [
          'from' => 'USD',
          'to' => 'INR'
        ]);

        $rate = $response->successful()
          ? ($response->json()['rates']['INR'] ?? 0)
          : 0;

        $bill->total_amount = round($bill->total_amount * $rate, 2);
      }
      return $bill;
    });
  }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\DashboardReport.php

add this file 




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
web.php 

use App\Http\Controllers\DashboardReport;



  // dashboardreport indexing 
  Route::get('/assignments/upcoming', [DashboardReport::class, 'upcomingassignments']);
  Route::get('/billspendingforcollection', [DashboardReport::class, 'billspendingforcollection']);
  Route::get('/billspending', [DashboardReport::class, 'billspending']);
  Route::get('/assignments/completed', [DashboardReport::class, 'assignmentscompleted']);
  Route::get('/assignments/delayed', [DashboardReport::class, 'delayedassignments']);
  Route::get('/assignments/nfra', [DashboardReport::class, 'nfraassignments']);
  Route::get('/assignments/paymentsnotrecieved', [DashboardReport::class, 'paymentsnotrecievedwithindays']);
  Route::get('/timesheetcreated', [DashboardReport::class, 'timesheetcreated']);
  Route::get('/tender/submittedlist', [DashboardReport::class, 'tendersubmitted']);
  Route::get('/İndependence/pending', [DashboardReport::class, 'İndependencepending']);
  Route::get('/lossassignments', [DashboardReport::class, 'lossassignments']);
  Route::get('/exceptionalexpenses', [DashboardReport::class, 'exceptionalexpenses']);



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\cyclingevent

add folder after this folder 

resources\views\backEnd\dashboardreport


resources\views\backEnd\kgsdashboardreport.blade.php
add this file also 



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\outstanding\index.blade.php

                                  <th>AMOUNT</th>
                                  @if (Request::is('billspendingforcollection') || Request::is('assignments/paymentsnotrecieved'))
                                      <th>CURRENCY</th>
                                  @endif
								  
								  



                                      <td>{{ number_format($outstandingData->AMT) }}</td>
                                      @if (Request::is('billspendingforcollection') || Request::is('assignments/paymentsnotrecieved'))
                                          <td>
                                              @if ($outstandingData->currency == 1)
                                                  {{ 'USD' }}
                                              @else
                                                  {{ 'INR' }}
                                              @endif
                                          </td>
                                      @endif




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\clientspecificindependencedeclaration\index.blade.php


                                @if (Request::is('İndependence/pending') && $independences != null)
                                    @continue
                                @endif

                                <tr>
                                    <td style="display: none;">{{ $independenceData->id }}</td>






budget table add on kgsdemo database ```111



app\Models\Assignmentmapping.php

    public function timsheetusers()
    {
        return $this->hasMany(Timesheetuser::class, 'assignmentgenerate_id', 'assignmentgenerate_id');
    }

    public function invoices()
    {
        return $this->hasMany(\App\Models\Invoice::class, 'assignmentgenerate_id', 'assignmentgenerate_id');
    }
	
	
	
	
	
        $assignments = $assignments->map(function ($assignment) {
            $totalHours = $assignment->timsheetusers
                ->where('createdBy.role_id', 14)
                ->sum(function ($timesheet) {
                    return $this->convertHourToDecimal($timesheet->hour);
                });

            $assignment->total_hours = $totalHours;
            return $assignment;
        });

		
		
		 private function convertHourToDecimal($hour)
    {
        if (is_numeric($hour)) {
            return (float) $hour;
        }
        if (preg_match('/^(\d{1,2}):(\d{1,2})$/', $hour, $matches)) {
            $h = intval($matches[1]);
            $m = intval($matches[2]);
            return $h + ($m / 60);
        }
        return 0;
    }
	

11-08-2025 ```end hare  deployed on cron


15-09-2025 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kgsdashboardreport.blade.php

  
  
  
  
            .document-card {
                background: #f8f9fa;
                padding: 15px;
                margin-bottom: 12px;
                border-radius: 10px;
            }

  
           .ecqr-card {
                padding: 20px;
                margin-bottom: 10px;
                border-radius: 10px;
                background: #f8f9fa;
            }
			
			
			            .assignment-card {
                padding: 20px;
                margin-bottom: 10px;
                border-radius: 10px;
                background: #f8f9fa;
            }



          .progress-container {
                margin-top: -42px;
            }
			
			
			
			
			
			
    <link href="{{ url('backEnd/plugins/select2/dist/css/select2.min.css') }}" rel="stylesheet">
    {{-- <link href="{{ url('backEnd/plugins/select2-bootstrap4/dist/select2-bootstrap4.min.css') }}" rel="stylesheet"> --}}
    {{-- <link href="{{ url('backEnd/plugins/jquery.sumoselect/sumoselect.min.css') }}" rel="stylesheet"> --}}


    @extends('backEnd.layouts.layout') @section('backEnd_content')





<select required class="language form-control" id="yearly" name="yearly">



 <select class="language form-control" id="months" name="months">
 
 
        <select class="language form-control" id="partner" name="partner">



index fun me 
serach   $financialYears = [];

   $financialYears = array_reverse($financialYears);
   
   
  filter function me 
  serach   $financialYears = [];
  
      $financialYears = array_reverse($financialYears);
	  
	  
	  
	  
	  
     <nav aria-label="breadcrumb" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
                <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right">
                    <li class="breadcrumb-item"><a href="">Download as pdf</a></li>
                </ol>
            </nav>
            <div class="col-sm-8 header-title p-0">
			
			
			
end hare 


20-09-2025 ```start hare 3kpi completed
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\kgsdashboardreport.blade.php

add file 




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php


  public function index()
  {

    if (auth()->user()->role_id == 11) {

      // financial year
      $currentDate4 = Carbon::now();
      // $currentDate4 = Carbon::parse('2024-07-01');
      // $currentDate4 = Carbon::parse('2024-07-01 13:30:00');
      $currentMonth4 = $currentDate4->format('F');
      if ($currentDate4->month >= 4) {
        // Current year financial year
        $financialStartDate = Carbon::create($currentDate4->year, 4, 1);
        $financialEndDate = Carbon::create($currentDate4->year + 1, 3, 31);
      } else {
        // Previous year financial year
        $financialStartDate = Carbon::create($currentDate4->year - 1, 4, 1);
        $financialEndDate = Carbon::create($currentDate4->year, 3, 31);
      }

      $financialStartYear = now()->month >= 4 ? now()->year : now()->year - 1;
      $financialEndYear = $financialStartYear + 1;

      $monthNames = [
        1  => 'January',
        2  => 'February',
        3  => 'March',
        4  => 'April',
        5  => 'May',
        6  => 'June',
        7  => 'July',
        8  => 'August',
        9  => 'September',
        10 => 'October',
        11 => 'November',
        12 => 'December'
      ];


      // Bills Pending for Generation
      $billspending = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->whereNull('invoices.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', 0)
        ->sum('assignmentmappings.engagementfee');


      // Collection's Outstanding
      $outstandingBills = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
        ->whereNotNull('invoices.id')
        ->where('assignmentbudgetings.status', 0)
        // ->whereIn('invoices.currency', [1, 3])
        ->where(function ($q) {
          $q->whereIn('invoices.currency', [1, 3])
            ->orWhereNull('invoices.currency');
        })
        ->select(
          'invoices.currency',
          // 'assignmentmappings.assignmentgenerate_id',
          DB::raw("DATE_FORMAT(outstandings.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(outstandings.AMT) as total_amount')
        )
        ->groupBy('invoices.currency', 'bill_date')
        ->get();


      $billspendingforcollection = $this->convertusdtoinr($outstandingBills);

      // How many assignments completed in this months
      $assignmentcompleted = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        // ->where('assignmentbudgetings.status', 0)
        ->whereMonth('assignmentbudgetings.otpverifydate', Carbon::now()->month)
        ->whereYear('assignmentbudgetings.otpverifydate', Carbon::now()->year)
        ->count();

      // How many Delayed Assignments
      // $delayedAssignments = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->whereRaw('COALESCE(DATE(assignmentbudgetings.actualenddate), DATE(assignmentbudgetings.tentativeenddate)) < ?', [Carbon::today()->toDateString()])
      //   ->count();

      // $delayedAssignments = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->where('assignmentbudgetings.status', 1)
      //   ->whereRaw('COALESCE(DATE(assignmentbudgetings.actualenddate), DATE(assignmentbudgetings.tentativeenddate)) < ?', [Carbon::today()->toDateString()])
      //   ->count();

      $delayedAssignments = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->where(function ($q) {
          $q->where(function ($sub) {
            $sub->where('assignmentbudgetings.status', 1)
              // Delayed if Documentation < 100% OR Draft Report Date > Tentative End Date
              ->where(function ($inner) {
                $inner->whereNull('assignmentbudgetings.percentclosedate')
                  ->orWhereRaw('assignmentbudgetings.draftreportdate > assignmentbudgetings.tentativeenddate');
              });
          })
            // if worked hour > esthour
            ->orWhereRaw('(
            SELECT COALESCE(SUM(totalhour), 0)
            FROM timesheetusers
            WHERE assignmentgenerate_id = assignmentmappings.assignmentgenerate_id
        ) > assignmentmappings.esthours');
        })
        ->count();

      // How many tender submitted this months
      // $tendersSubmittedCount = DB::table('tenders')
      //   ->where('tendersubmitstatus', 1)
      //   ->whereMonth('date', Carbon::now()->month)
      //   ->whereYear('date', Carbon::now()->year)
      //   ->count();

      $tendersSubmittedCount = DB::table('tenders')
        ->where('tendersubmitstatus', 1)
        ->whereMonth('tendersubmitdate', Carbon::now()->month)
        ->whereYear('tendersubmitdate', Carbon::now()->year)
        ->count();

      // How many NFRA are running
      $auditsDue = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentmappings.eqcrapplicability', 1)
        ->count();

      // total amount of convence, how many amount approved for convence in this months or Exceptional Expenses 
      // $exceptionalExpenses = DB::table('outstationconveyances')
      //   ->where('status', 6)
      //   ->whereMonth('approveddate', Carbon::now()->month)
      //   ->whereYear('approveddate', Carbon::now()->year)
      //   ->sum('finalamount');

      $exceptionalExpenses = DB::table('outstationconveyances')
        ->where('status', 6)
        ->whereMonth('paiddate', Carbon::now()->month)
        ->whereYear('paiddate', Carbon::now()->year)
        ->sum('finalamount');

      // how many users not accepted independance mail till now
      $totalNotFilled = DB::table('assignmentmappings')
        ->select(DB::raw('COUNT(*) as total_not_filled'))
        ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
        ->leftJoin('annual_independence_declarations', function ($join) {
          $join->on('annual_independence_declarations.assignmentgenerateid', '=', 'assignmentmappings.assignmentgenerate_id')
            ->on('annual_independence_declarations.createdby', '=', 'teammembers.id')
            ->where('annual_independence_declarations.type', 2);
        })
        ->whereNull('annual_independence_declarations.id') // Members without declarations
        ->groupBy('assignmentmappings.assignmentgenerate_id')
        ->get()
        ->sum('total_not_filled');

      // $clientindependenceNotFilled = DB::table('assignmentmappings')
      //   ->select(DB::raw('COUNT(*) as total_not_filled'))
      //   ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
      //   ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
      //   ->leftJoin('annual_independence_declarations', function ($join) {
      //     $join->on('annual_independence_declarations.assignmentgenerateid', '=', 'assignmentmappings.assignmentgenerate_id')
      //       ->on('annual_independence_declarations.createdby', '=', 'teammembers.id')
      //       ->where('annual_independence_declarations.type', 2);
      //   })
      //   ->whereNull('annual_independence_declarations.id') // Members without declarations
      //   ->groupBy('assignmentmappings.assignmentgenerate_id')
      //   ->get()
      //   ->sum('total_not_filled');

      // $independencenotfilled = DB::table('assignmentmappings')
      //   ->select(DB::raw('COUNT(*) as total_not_filled'))
      //   ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
      //   ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
      //   ->leftJoin('independences', function ($join) {
      //     $join->on('independences.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //       ->on('independences.createdby', '=', 'teammembers.id');
      //   })
      //   ->whereNull('independences.id') // Members without declarations
      //   ->groupBy('assignmentmappings.assignmentgenerate_id')
      //   ->get()
      //   ->sum('total_not_filled');

      // $totalNotFilled = $clientindependenceNotFilled + $independencenotfilled;


      // Assignment Status Overview
      $assignmentOverviews = DB::table('assignmentmappings')
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name',
          DB::raw('(SELECT SUM(totalhour) FROM timesheetusers WHERE timesheetusers.assignmentgenerate_id = assignmentmappings.assignmentgenerate_id) as workedHours')
        )
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->orderByDesc('assignmentbudgetings.id')
        // ->limit(3)
        ->get()
        ->map(function ($assignmentOverview) {
          $totalHours = $assignmentOverview->esthours ?? 0;
          $workedHours = $assignmentOverview->workedHours ?? 0;
          $completionPercentage = $totalHours > 0 ? round(($workedHours / $totalHours) * 100, 2) : 0;
          $assignmentOverview->completionPercentage = $completionPercentage;
          return $assignmentOverview;
        });


      // Document Completion Progress
      $documentCompletions = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        // ->where('assignmentbudgetings.status', 1)
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->orderByDesc('assignmentbudgetings.id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'clients.client_name'
        )
        // ->limit(6)
        ->get();


      foreach ($documentCompletions as $mapping) {
        $assignmentId = $mapping->assignmentgenerate_id;

        // Get assignment_id and eqcrapplicability
        $assignmentMapping = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $assignmentId)
          ->select('assignment_id', 'eqcrapplicability')
          ->first();

        // Determine EQCR type name
        $eqcrTypeName = '';
        $eqcrAssignmentId = null;
        if (isset($assignmentMapping->eqcrapplicability)) {
          switch ($assignmentMapping->eqcrapplicability) {
            case 1:
              $eqcrTypeName = 'NFRA';
              break;
            case 2:
              $eqcrTypeName = 'Quality Review';
              break;
            case 3:
              $eqcrTypeName = 'Peer Review';
              break;
            case 4:
              $eqcrTypeName = 'Others';
              break;
            case 5:
              $eqcrTypeName = 'PCAOB';
              break;
          }
          // Get the assignment_id for the EQCR type
          $specialAssignment = DB::table('assignments')
            ->where('assignment_name', $eqcrTypeName)
            ->first();
          if ($specialAssignment) {
            $eqcrAssignmentId = $specialAssignment->id;
          }
        }
        $mapping->eqcr_type_name = $eqcrTypeName;

        // Regular Checklist Calculations (Exclude EQCR assignment_id)
        $classificationIds = DB::table('financialstatementclassifications')
          ->where('assignment_id', $assignmentMapping->assignment_id)
          ->where(function ($q) use ($assignmentId) {
            $q->whereNull('assignmentgenerate_id')->orWhere('assignmentgenerate_id', $assignmentId);
          })
          ->when($eqcrAssignmentId, function ($query) use ($eqcrAssignmentId) {
            $query->where('assignment_id', '!=', $eqcrAssignmentId);
          })
          ->pluck('id');



        $subClassIds = DB::table('subfinancialclassfications')
          ->whereIn('financialstatemantclassfication_id', $classificationIds)
          ->pluck('id');



        $totalQuestions = DB::table('auditquestions')
          ->whereIn('financialstatemantclassfication_id', $classificationIds)
          ->whereIn('subclassfied_id', $subClassIds)
          ->count();


        $statusCounts = DB::table('checklistanswers')
          ->join('statuses', 'checklistanswers.status', '=', 'statuses.id')
          ->where('checklistanswers.assignment_id', $assignmentId)
          ->whereIn('checklistanswers.financialstatemantclassfication_id', $classificationIds)
          ->whereIn('checklistanswers.subclassfied_id', $subClassIds)
          ->select(
            'statuses.name as status_name',
            DB::raw('COUNT(*) as count')
          )
          ->groupBy('statuses.name')
          ->pluck('count', 'status_name');



        $closedQuestions = $statusCounts['CLOSE'] ?? 0;

        $mapping->documentation_percentage = $totalQuestions > 0
          ? round(($closedQuestions / $totalQuestions) * 100, 2)
          : 0;
      }
      // Document Completion Progress end hare 


      // NFRA Audits, Quality Reviews & Peer Review
      $ecqrAudits = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.eqcrpartner')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        // ->where('assignmentbudgetings.status', 1)
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->whereIn('assignmentmappings.eqcrapplicability', [1, 2, 3])
        ->select(
          'assignmentmappings.*',
          'teammembers.team_member',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        // ->limit(3)
        ->get();

      foreach ($ecqrAudits as $audit) {
        $assignmentId = $audit->assignmentgenerate_id;

        // get reviewer assignment id (based on eqcrapplicability)
        $eqcrTypeName = '';
        $eqcrAssignmentId = null;
        switch ($audit->eqcrapplicability) {
          case 1:
            $eqcrTypeName = 'NFRA';
            break;
          case 2:
            $eqcrTypeName = 'Quality Review';
            break;
          case 3:
            $eqcrTypeName = 'Peer Review';
            break;
          case 4:
            $eqcrTypeName = 'Others';
            break;
          case 5:
            $eqcrTypeName = 'PCAOB';
            break;
        }
        if ($eqcrTypeName) {
          $specialAssignment = DB::table('assignments')
            ->where('assignment_name', $eqcrTypeName)
            ->first();
          if ($specialAssignment) {
            $eqcrAssignmentId = $specialAssignment->id;
          }
        }

        $audit->reviewer_documentation_percentage = 0;

        if ($eqcrAssignmentId) {
          $reviewerClassificationIds = DB::table('financialstatementclassifications')
            ->where('assignment_id', $eqcrAssignmentId)
            ->where(function ($q) use ($assignmentId) {
              $q->whereNull('assignmentgenerate_id')->orWhere('assignmentgenerate_id', $assignmentId);
            })
            ->pluck('id');

          $reviewerSubClassIds = DB::table('subfinancialclassfications')
            ->whereIn('financialstatemantclassfication_id', $reviewerClassificationIds)
            ->pluck('id');

          $reviewerTotalQuestions = DB::table('auditquestions')
            ->whereIn('financialstatemantclassfication_id', $reviewerClassificationIds)
            ->whereIn('subclassfied_id', $reviewerSubClassIds)
            ->count();

          $reviewerStatusCounts = DB::table('checklistanswers')
            ->join('statuses', 'checklistanswers.status', '=', 'statuses.id')
            ->where('checklistanswers.assignment_id', $assignmentId)
            ->whereIn('checklistanswers.financialstatemantclassfication_id', $reviewerClassificationIds)
            ->whereIn('checklistanswers.subclassfied_id', $reviewerSubClassIds)
            ->select('statuses.name as status_name', DB::raw('COUNT(*) as count'))
            ->groupBy('statuses.name')
            ->pluck('count', 'status_name');

          $reviewerClosed =  ($reviewerStatusCounts['CLOSE'] ?? 0) +
            ($reviewerStatusCounts['NOT-APPLICABLE'] ?? 0);

          $audit->reviewer_documentation_percentage = $reviewerTotalQuestions > 0
            ? round(($reviewerClosed / $reviewerTotalQuestions) * 100, 2)
            : 0;
        }
      }



      // High Priority Tasks Pending
      $highpriorityAssignments  = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        ->limit(6)
        ->get();


      // Fetch IT and Finance Tickets or Unresolved Tickets - HR, IT & Admin
      $ticketDatas = Assetticket::with(['financerequest', 'createdBy', 'partner'])
        ->whereIn('type', [0, 1])
        ->whereBetween('created_at', [$financialStartDate, $financialEndDate])
        ->orderByDesc('id')
        // ->limit(4)
        ->get()
        ->map(function ($item) {
          return [
            'ticket_id' => $item->generateticket_id,
            'department' => $item->type == 0 ? 'IT' : 'Finance',
            'created_by' => $item->createdBy->team_member ?? '',
            'subject' => $item->subject,
            'assigned_to' => $item->partner->team_member ?? '',
            'created_at' => $item->created_at,
            'status' => $item->status,
            'source' => 'ticket',
          ];
        });

      // Fetch HR Tasks
      $hrTickets = DB::table('tasks')
        ->select(
          'tasks.*',
          'patnerid.team_member as partnername',
          'createdby.team_member as createdbyname',
          'hrfunctions.hrfunction'
        )
        ->where('tasks.task_type', 4)
        ->whereBetween('tasks.created_at', [$financialStartDate, $financialEndDate])
        ->leftJoin('teammembers as patnerid', 'patnerid.id', '=', 'tasks.partner_id')
        ->leftJoin('teammembers as createdby', 'createdby.id', '=', 'tasks.createdby')
        ->leftJoin('hrfunctions', 'hrfunctions.id', '=', 'tasks.hrfunction')
        ->orderByDesc('tasks.id')
        // ->limit(4)
        ->get()
        ->map(function ($item) {
          return [
            'ticket_id' => $item->generateticket_id ?? 'NA',
            'department' => 'HR',
            'created_by' => $item->createdbyname ?? '',
            'subject' => $item->taskname ?? '',
            'assigned_to' => $item->partnername ?? '',
            'created_at' => $item->created_at,
            'status' => $item->status,
            'source' => 'hr',
          ];
        });

      $allTickets = $ticketDatas->merge($hrTickets);

      // Assignment-wise P&L Analysis and Loss Making Assignments
      $assignmentprofitandlosses = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->whereBetween('assignmentmappings.created_at', [$financialStartDate, $financialEndDate])
        ->orderByDesc('assignmentbudgetings.id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        // ->limit(6)
        ->get();

      $assignmentCosts = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->where('timesheetusers.assignmentgenerate_id', 254418551033)
        // ->whereBetween(DB::raw("STR_TO_DATE(timesheetusers.date, '%d-%m-%Y')"), [
        //   $financialStartDate->format('Y-m-d'),
        //   $financialEndDate->format('Y-m-d')
        // ])
        ->select('timesheetusers.assignmentgenerate_id', DB::raw('SUM(timesheetusers.totalhour * teammembers.cost_hour) as total_cost'))
        ->groupBy('timesheetusers.assignmentgenerate_id')
        ->pluck('total_cost', 'assignmentgenerate_id');

      $conveyanceonlybillno = DB::table('outstationconveyances')
        ->where('bill', 'No')
        ->select(
          'assignmentgenerate_id',
          DB::raw('SUM(finalamount) as finalamounts')
        )
        ->groupBy('assignmentgenerate_id')
        ->pluck('finalamounts', 'assignmentgenerate_id');


      $lossMakingCount = 0;
      foreach ($assignmentprofitandlosses as $assignment) {
        $assignmentworkedcost = $assignmentCosts[$assignment->assignmentgenerate_id] ?? 0;
        $assignmentconvencecost = $conveyanceonlybillno[$assignment->assignmentgenerate_id] ?? 0;
        $assignment->total_cost = $assignmentworkedcost + $assignmentconvencecost;
        // Loss Making Assignments
        $revenue = $assignment->engagementfee ?? 0;
        $cost = $assignment->total_cost ?? 0;
        $profit = $revenue - $cost;

        if ($profit < 0) {
          $lossMakingCount++;
        }
      }

      // Upcoming Assignments
      $upcomingFromPlannings = DB::table('assignmentplannings')
        ->where('status', 0)
        ->whereDate('assignmentstartdate', '>=', Carbon::today())
        ->count();

      $upcomingFromBudgetings = DB::table('assignmentbudgetings')
        ->whereRaw('COALESCE(actualstartdate, tentativestartdate) > ?', [Carbon::today()->toDateString()])
        ->count();

      $totalUpcomingAssignments = $upcomingFromPlannings + $upcomingFromBudgetings;


      // How many amounts pending for collection within 15 days or Payments Not Recieved
      // $billspending15Daysdata = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('payments', 'payments.invoiceid', '=', 'invoices.invoice_id')
      //   ->where('assignmentbudgetings.status', 0)
      //   // ->where('invoices.invoicescategory', 2)
      //   ->whereNotNull('invoices.id') // Invoice is created
      //   ->where('invoices.status', 2)
      //   ->whereNull('payments.invoiceid')  // Payment not yet received
      //   // Only within last 15 days
      //   ->whereBetween('invoices.created_at', [
      //     Carbon::today()->subDays(15)->startOfDay(),
      //     Carbon::today()->endOfDay()
      //   ])
      //   ->select(
      //     'invoices.currency',
      //     DB::raw("DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date"),
      //     DB::raw('SUM(invoices.total) as total_amount')
      //   )
      //   ->groupBy('invoices.currency', 'bill_date')
      //   ->get();

      // $billspending15Daysdata = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
      //   ->leftJoin('payments', 'payments.invoiceid', '=', 'invoices.invoice_id')
      //   ->where('assignmentbudgetings.status', 0)
      //   ->whereNotNull('invoices.id')
      //   ->where('invoices.status', 2)
      //   ->whereNull('payments.invoiceid')
      //   ->where(function ($q) {
      //     $q->whereIn('invoices.currency', [1, 3])
      //       ->orWhereNull('invoices.currency');
      //   })
      //   ->whereBetween('invoices.created_at', [
      //     Carbon::today()->subDays(15)->startOfDay(),
      //     Carbon::today()->endOfDay()
      //   ])
      //   ->select(
      //     'invoices.currency',
      //     DB::raw("DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date"),
      //     DB::raw('SUM(invoices.total) as total_amount')
      //   )
      //   ->groupBy('invoices.currency', 'bill_date')
      //   ->get();

      // filter KPI How many amounts pending for collection within 15 days or Payments Not Recieved
      $billspending15Daysdata = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
        ->leftJoin('payments', 'payments.invoiceid', '=', 'invoices.invoice_id')
        ->where('assignmentbudgetings.status', 0)
        ->whereNotNull('invoices.id')
        ->where('invoices.status', 2)
        ->whereNull('payments.invoiceid')
        ->where(function ($q) {
          $q->whereIn('invoices.currency', [1, 3])
            ->orWhereNull('invoices.currency');
        })
        ->whereBetween('invoices.created_at', [
          Carbon::today()->subDays(15)->startOfDay(),
          Carbon::today()->endOfDay()
        ])
        ->select(
          'invoices.currency',
          DB::raw("DATE_FORMAT(outstandings.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(outstandings.AMT) as total_amount')
        )
        ->groupBy('invoices.currency', 'bill_date')
        ->get();


      $billspending15Days = $this->convertusdtoinr($billspending15Daysdata);

      // Timesheet Filled On Closed Assignment
      $timesheetOnClosedAssignment = DB::table('assignmentmappings')
        ->join('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->join('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->whereExists(function ($query) {
          $query->select(DB::raw(1))
            ->from('timesheetusers')
            ->whereRaw('timesheetusers.assignmentgenerate_id = assignmentmappings.assignmentgenerate_id')
            ->whereRaw("DATE(timesheetusers.created_at) > DATE(COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate))");
        })
        ->select('assignmentmappings.assignmentgenerate_id')
        ->distinct()
        ->count();


      // Partner-wise P&L Statement
      $assignmentGenerateIds = DB::table('assignmentbudgetings')
        ->whereBetween('periodstartdate', [$financialStartDate, $financialEndDate])
        ->whereBetween('periodenddate', [$financialStartDate, $financialEndDate])
        ->pluck('assignmentgenerate_id');

      // $invoices = DB::table('invoices')
      //   ->select(
      //     'invoices.assignmentgenerate_id',
      //     'teammembers.team_member',
      //     DB::raw('SUM(invoices.total) as total')
      //   )
      //   ->join('teammembers', 'teammembers.id', '=', 'invoices.partner')
      //   ->whereIn('invoices.assignmentgenerate_id', $assignmentGenerateIds)
      //   ->groupBy('invoices.assignmentgenerate_id', 'teammembers.team_member')
      //   ->get();

      $invoicesdata = DB::table('invoices')
        ->select(
          'invoices.assignmentgenerate_id',
          'invoices.currency',
          'teammembers.team_member',
          DB::raw("DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(invoices.total) as total_amount')
        )
        ->join('teammembers', 'teammembers.id', '=', 'invoices.partner')
        ->whereIn('invoices.assignmentgenerate_id', $assignmentGenerateIds)
        ->groupBy('invoices.assignmentgenerate_id', 'teammembers.team_member', 'invoices.currency', 'bill_date')
        ->get();

      $invoicesdata = $this->convertusdtoinr1($invoicesdata);

      $invoices = $invoicesdata
        ->groupBy('assignmentgenerate_id')
        ->map(function ($items, $assignmentId) {
          return (object)[
            'assignmentgenerate_id' => $assignmentId,
            'team_member' => $items->first()->team_member,
            'total' => $items->sum('total_amount'),
          ];
        })
        ->values();


      $timesheetData = DB::table('timesheetusers')
        ->select('assignmentgenerate_id', 'createdby', DB::raw('SUM(totalhour) as total_hour'))
        ->whereIn('assignmentgenerate_id', $assignmentGenerateIds)
        ->groupBy('assignmentgenerate_id', 'createdby')
        ->get();

      $teamMemberCosts = DB::table('teammembers')
        ->whereIn('id', $timesheetData->pluck('createdby')->unique())
        ->pluck('cost_hour', 'id');

      $groupedCosts = $timesheetData->groupBy('assignmentgenerate_id')->map(function ($rows) use ($teamMemberCosts) {
        return $rows->sum(function ($row) use ($teamMemberCosts) {
          return $row->total_hour * ($teamMemberCosts[$row->createdby] ?? 0);
        });
      });

      // $finalData = $invoices->map(function ($row) use ($groupedCosts) {
      //   $row->cost = $groupedCosts[$row->assignmentgenerate_id] ?? 0;
      //   $row->profit_loss = $row->total - $row->cost;
      //   return $row;
      // });

      $finalData = $invoices->map(function ($row) use ($groupedCosts, $conveyanceonlybillno) {
        $workedcost = $groupedCosts[$row->assignmentgenerate_id] ?? 0;
        $convencecostdata = $conveyanceonlybillno[$row->assignmentgenerate_id] ?? 0;
        $row->cost = $workedcost + $convencecostdata;
        $row->profit_loss = $row->total - $row->cost;
        return $row;
      });

      $partnerWiseProfit = $finalData
        ->groupBy('team_member')
        ->map(function ($items, $teamMember) {
          return (object)[
            'team_member' => $teamMember,
            'total' => $items->sum(fn($item) => (float) $item->total),
            'cost' => $items->sum('cost'),
            'profit_loss' => $items->sum('profit_loss'),
          ];
        })
        // Reset index if needed
        ->values();
      // Partner-wise P&L Statement end hare


      // Staff Allocation vs Actual Timesheet Analysis
      $teamAllocatedHours = DB::table('timesheetusers')
        ->join('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->whereIn('teammembers.id', [14, 23, 187, 305, 659, 815])
        // ->whereNotIn('teammembers.role_id', [13])
        ->whereBetween('timesheetusers.created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->select(
          'teammembers.id as teammember_id',
          'teammembers.team_member',
          'teammembers.role_id',
          DB::raw('SUM(timesheetusers.totalhour) as actualhours')
        )
        ->groupBy('teammembers.id', 'teammembers.team_member', 'teammembers.role_id')
        // ->limit(6)
        ->get();


      foreach ($teamAllocatedHours as $teamAllocatedHour) {
        if ($teamAllocatedHour->role_id == 13) {
          $allocatedHours1 = DB::table('assignmentmappings')
            ->where('assignmentmappings.eqcrpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentmappings.eqcresthour');

          $allocatedHours2 = DB::table('assignmentmappings')
            ->where('assignmentmappings.leadpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentmappings.partneresthour');

          $allocatedHours3 = DB::table('assignmentmappings')
            ->where('assignmentmappings.otherpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentmappings.otherpartneresthour');

          $allocatedHours = $allocatedHours1 + $allocatedHours2 + $allocatedHours3;
        } else {
          $allocatedHours = DB::table('assignmentteammappings')
            ->where('assignmentteammappings.teammember_id', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentteammappings.created_at', [
              $financialStartDate,
              $financialEndDate
            ])
            ->sum('assignmentteammappings.teamesthour');
        }

        if (is_null($allocatedHours)) {
          $allocatedHours = 0;
        }
        $teamAllocatedHour->teamallocatedhours = $allocatedHours;
        $teamAllocatedHour->discrepancy = $teamAllocatedHour->actualhours - (float) $allocatedHours;
      }

      // Monthly Expense Analysis
      // financial year
      $teamsSalaries = DB::table('employeepayrolls')
        ->select(
          'month',
          'year',
          DB::raw('SUM(total_amount_to_paid) as total_amount')
        )
        ->where(function ($query) use ($financialEndYear, $financialStartYear) {
          // Jan to Mar from next year
          $query->where(function ($q) use ($financialEndYear) {
            $q->where('year', $financialEndYear)
              ->whereIn('month', ['January', 'February', 'March']);
          })
            // Apr to Jun from current year
            ->orWhere(function ($q) use ($financialStartYear) {
              $q->where('year', $financialStartYear)
                ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
            });
        })
        ->where('send_to_bank', 1)
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();

      $teamexceptionalExpenses = DB::table('outstationconveyances')
        ->selectRaw('MONTH(paiddate) as month, YEAR(paiddate) as year, SUM(finalamount) as total_amount')
        ->where('status', 6)
        ->whereBetween('paiddate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(paiddate), YEAR(paiddate)')
        ->orderByRaw('FIELD(MONTH(paiddate),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // Cash Flow Analysis
      $cashFlowRecieved = DB::table('payments')
        ->selectRaw('MONTH(paymentdate) as month, YEAR(paymentdate) as year, SUM(amountreceived) as amountreceived')
        ->whereBetween('paymentdate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(paymentdate), YEAR(paymentdate)')
        ->orderByRaw('FIELD(MONTH(paymentdate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashFlowSpendvender = DB::table('vendorlist')
        ->selectRaw('MONTH(approvedate) as month, YEAR(approvedate) as year, SUM(amount) as total_amounts')
        ->where('status', 4)
        ->whereBetween('approvedate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(approvedate), YEAR(approvedate)')
        ->orderByRaw('FIELD(MONTH(approvedate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashFlowSpendemployee = DB::table('employeepayrolls')
        ->select('month', 'year', DB::raw('SUM(total_amount_to_paid) as total_amounts'))
        ->where(function ($query) use ($financialEndYear, $financialStartYear) {
          $query->where(function ($q) use ($financialEndYear) {
            $q->where('year', $financialEndYear)
              ->whereIn('month', ['January', 'February', 'March']);
          })->orWhere(function ($q) use ($financialStartYear) {
            $q->where('year', $financialStartYear)
              ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
          });
        })
        ->where('send_to_bank', 1)
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();

      $mergedSpenddata = $cashFlowSpendvender->merge($cashFlowSpendemployee);

      $cashFlowtotalspendData = $mergedSpenddata->groupBy(function ($item) {
        return $item->month . '-' . $item->year;
      })->map(function ($group) {
        return (object) [
          'month' => $group->first()->month,
          'year' => $group->first()->year,
          'total_amounts' => $group->sum('total_amounts'),
        ];
      })->sortBy(function ($item) {
        $order = ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March'];
        return array_search($item->month, $order);
      })->values();

      // Cash Flow Analysis end hare

      // Budget vs Actual Cash Flow

      // 1.budget table se budgetinflow
      // 2.cash recieved in paymnets table 
      // 2.budget table se budgetoutflow
      // 4.cash spend on employee and vender, like  employeepayrolls and vendorlist tables 

      $budgetactualcash = DB::table('budget')
        ->select('month', 'year', DB::raw('SUM(budgetinflow) as budgetinflow'), DB::raw('SUM(budgetoutflow) as budgetoutflow'))
        ->where(function ($query) use ($financialEndYear, $financialStartYear) {
          $query->where(function ($q) use ($financialEndYear) {
            $q->where('year', $financialEndYear)
              ->whereIn('month', ['January', 'February', 'March']);
          })->orWhere(function ($q) use ($financialStartYear) {
            $q->where('year', $financialStartYear)
              ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
          });
        })
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();


      //  Budget vs Actual Cash Flow end hare 


      // Invoice Due vs Assignment Billing vs Cash Recovery
      // $assignmentBilling = DB::table('invoices')
      //   ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(total) as invoices_amount')
      //   ->whereBetween('created_at', [
      //     $financialStartDate,
      //     $financialEndDate
      //   ])
      //   ->groupByRaw('MONTH(created_at), YEAR(created_at)')
      //   ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
      //   ->get()
      //   ->map(function ($item) use ($monthNames) {
      //     $item->month = $monthNames[$item->month] ?? $item->month;
      //     return $item;
      //   });

      $assignmentBillingdata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $assignmentBillingdata = $this->convertusdtoinr1($assignmentBillingdata);

      $assignmentBilling = $assignmentBillingdata
        ->groupBy('month')
        ->map(function ($items, $month) {
          return (object)[
            'month' => $month,
            'year' => $items->first()->year,
            'total_amount' => $items->sum('total_amount'),
          ];
        })
        ->values();

      $assignmentOutstanding = DB::table('outstandings')
        ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(AMT) as outstanding_amount')
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashRecovery = DB::table('payments')
        ->selectRaw('MONTH(paymentdate) as month, YEAR(paymentdate) as year, SUM(amountreceived) as amountreceived')
        ->whereBetween('paymentdate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(paymentdate), YEAR(paymentdate)')
        ->orderByRaw('FIELD(MONTH(paymentdate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // Lap Days Analysis (Assignment to Invoice)
      $assignmentsWithInvoices = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        // get only those assignments for which an invoice has been created
        ->join('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->selectRaw('MONTH(assignmentbudgetings.otpverifydate) as month, YEAR(assignmentbudgetings.otpverifydate) as year, assignmentbudgetings.otpverifydate, invoices.created_at as invoice_created_at, invoices.id as invoice_id')
        ->whereBetween('assignmentbudgetings.otpverifydate', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->orderByRaw('FIELD(MONTH(assignmentbudgetings.otpverifydate), 1,2,3,4,5,6,7,8,9,10,11,12)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $assignmentclosedDate = Carbon::parse($item->otpverifydate);
          $invoicecreatedDate = Carbon::parse($item->invoice_created_at);
          $item->differenceDays = $assignmentclosedDate->diffInDays($invoicecreatedDate);
          $item->targetDays = 7;
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        })
        ->groupBy(fn($item) => $item->month . '-' . $item->year)
        ->map(function ($group) {
          $first = $group->first();
          return (object) [
            'month' => $first->month,
            'year' => $first->year,
            'otpverifydate' => $first->otpverifydate,
            'invoice_id' => $first->invoice_id,
            'invoice_created_at' => $first->invoice_created_at,
            'targetDays' => $first->targetDays,
            'differenceDays' => $group->sum('differenceDays'),
            'countitem' => $group->count(),
            // Average Difference Days = (sum of all differenceDays) / number of records
            'averageDifferenceDays' => round($group->avg('differenceDays'), 1),
          ];
        })
        ->sortBy(fn($item) => array_search($item->month, array_values($monthNames)))
        ->values();

      // Budget vs Actual P&L
      $budgetRevenueandbudgetExpences = DB::table('assignmentmappings')
        ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(engagementfee) as engagementfee, SUM(teamestcost) as total_teamestcost')
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // $budgetActualRevenue = DB::table('invoices')
      //   ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(total) as invoices_amount')
      //   ->whereBetween('created_at', [
      //     $financialStartDate,
      //     $financialEndDate
      //   ])
      //   ->groupByRaw('MONTH(created_at), YEAR(created_at)')
      //   ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
      //   ->get()
      //   ->map(function ($item) use ($monthNames) {
      //     $item->month = $monthNames[$item->month] ?? $item->month;
      //     return $item;
      //   });

      $budgetActualRevenuedata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [
          $financialStartDate,
          $financialEndDate
        ])
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $budgetActualRevenuedata = $this->convertusdtoinr1($budgetActualRevenuedata);

      $budgetActualRevenue = $budgetActualRevenuedata
        ->groupBy('month')
        ->map(function ($items, $month) {
          return (object)[
            'month' => $month,
            'year' => $items->first()->year,
            'total_amount' => $items->sum('total_amount'),
          ];
        })
        ->values();

      $budgetActualExpences = DB::table('timesheets')
        ->leftJoin('timesheetusers', 'timesheetusers.timesheetid', '=', 'timesheets.id')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->whereIn('timesheets.created_by', [815, 818])
        ->selectRaw('MONTH(timesheets.date) as month, YEAR(timesheets.date) as year, SUM(timesheetusers.totalhour * teammembers.cost_hour) as total_cost')
        ->whereBetween('timesheets.date', [
          $financialStartDate->format('Y-m-d'),
          $financialEndDate->format('Y-m-d')
        ])
        ->groupByRaw('MONTH(timesheets.date), YEAR(timesheets.date)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // Budget vs Actual P&L end hare 

      // Work From Home 
      $workFromHome = DB::table('checkins')
        ->where('checkin_from', 'Work From Home')
        ->whereMonth('created_at', Carbon::now()->month)
        ->whereYear('created_at', Carbon::now()->year)
        ->count();


      // filter data 
      $startYearforfilter = 2022;
      $currentDatetoday = Carbon::now();
      $currentYearforfilter = $currentDatetoday->year;
      $currentMonthforfilter = $currentDatetoday->month;
      $currentFinancialYear = $currentMonthforfilter >= 4 ? $currentYearforfilter : $currentYearforfilter - 1;

      $financialYears = [];
      for ($year = $startYearforfilter; $year <= $currentFinancialYear; $year++) {
        $financialYears[] = [
          'value' => $year . '-' . ($year + 1),
        ];
      }

      $financialYears = array_reverse($financialYears);

      $partnerlist = Teammember::where('status', 1)
        ->where('role_id', 13)
        ->with('title')
        ->orderBy('team_member', 'asc')
        ->get();

      session()->forget('_old_input');

      return view('backEnd.kgsdashboardreport', compact('partnerlist', 'budgetactualcash', 'financialYears', 'workFromHome', 'budgetRevenueandbudgetExpences', 'budgetActualRevenue', 'budgetActualExpences', 'assignmentsWithInvoices', 'assignmentBilling', 'assignmentOutstanding', 'cashRecovery', 'cashFlowtotalspendData', 'cashFlowRecieved', 'teamexceptionalExpenses', 'teamsSalaries', 'teamAllocatedHours', 'timesheetOnClosedAssignment', 'totalNotFilled', 'partnerWiseProfit', 'lossMakingCount', 'billspending15Days', 'totalUpcomingAssignments', 'assignmentprofitandlosses', 'allTickets', 'hrTickets', 'ticketDatas', 'highpriorityAssignments', 'ecqrAudits', 'documentCompletions', 'assignmentOverviews',  'exceptionalExpenses', 'auditsDue', 'tendersSubmittedCount', 'delayedAssignments', 'assignmentcompleted', 'billspendingforcollection', 'billspending'));
    }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
backend controller 

  public function filterdashboardreport(Request $request)
  {

    $yearly = $request->input('yearly');
    $monthsdigit = $request->input('months');
    $partnerId = $request->input('partner');
    [$startYear, $endYear] = explode('-', $yearly);
    // if (!empty($monthsdigit)) {
    //   $monthNames = [
    //     1  => 'January',
    //     2  => 'February',
    //     3  => 'March',
    //     4  => 'April',
    //     5  => 'May',
    //     6  => 'June',
    //     7  => 'July',
    //     8  => 'August',
    //     9  => 'September',
    //     10 => 'October',
    //     11 => 'November',
    //     12 => 'December',
    //   ];
    //   $months = $monthNames[$monthsdigit];
    // }

    $monthNames = [
      1  => 'January',
      2  => 'February',
      3  => 'March',
      4  => 'April',
      5  => 'May',
      6  => 'June',
      7  => 'July',
      8  => 'August',
      9  => 'September',
      10 => 'October',
      11 => 'November',
      12 => 'December',
    ];

    $months = !empty($monthsdigit) ? ($monthNames[$monthsdigit] ?? null) : null;

    // financial year date range using input years
    $startDate = Carbon::createFromFormat('Y-m-d', $startYear . '-04-01');
    $endDate   = Carbon::createFromFormat('Y-m-d', $endYear . '-03-31');
    $startDateFormatted = $startDate->format('Y-m-d');
    $endDateFormatted = $endDate->format('Y-m-d');

    if (auth()->user()->role_id == 11) {

      // KPI filter start from hare 

      // //ff How many amounts pending for invoice genrated
      // $billspendingQuery = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted])
      //   ->where(function ($query) use ($startDateFormatted, $endDateFormatted) {
      //     $query->whereNull('invoices.created_at')
      //       ->orWhereNotBetween('invoices.created_at', [$startDateFormatted, $endDateFormatted]);
      //   })
      //   ->where('assignmentbudgetings.status', 0);

      // if (!empty($monthsdigit)) {
      //   $billspendingQuery->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
      // }

      // $billspending = $billspendingQuery->sum('assignmentmappings.engagementfee');



      // $billspendingforcollectionQuery = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
      //   ->where('assignmentbudgetings.status', 0)
      //   // ensures invoice is created
      //   ->whereNotNull('invoices.id')
      //   ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted])
      //   ->whereBetween('invoices.created_at', [$startDateFormatted, $endDateFormatted]);

      // if (!empty($monthsdigit)) {
      //   $billspendingforcollectionQuery->whereMonth('invoices.created_at', $monthsdigit);
      // }
      // $billspendingforcollection = $billspendingforcollectionQuery->sum('outstandings.AMT');


      // //ff How many amounts pending for collection within 15 days or Payments Not Recieved
      // $billspending15Days = DB::table('assignmentmappings')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('payments', 'payments.invoiceid', '=', 'invoices.invoice_id')
      //   ->where('assignmentbudgetings.status', 0)
      //   ->whereNotNull('invoices.id') // Invoice is created
      //   ->whereNull('payments.invoiceid') // Payment not yet received
      //   ->whereBetween('invoices.created_at', [$startDateFormatted, $endDateFormatted])
      //   ->when(!empty($monthsdigit), function ($query) use ($monthsdigit, $startYear, $endYear) {
      //     $yearForMonth = $monthsdigit >= 4 ? $startYear : $endYear;
      //     $monthEnd = Carbon::create($yearForMonth, $monthsdigit, 1)->endOfMonth();
      //     // $monthStart = $monthEnd->copy()->subDays(28);
      //     $monthStart = $monthEnd->copy()->subDays(15);
      //     return $query->whereYear('invoices.created_at', $yearForMonth)
      //       ->whereMonth('invoices.created_at', $monthsdigit)
      //       ->whereBetween('invoices.created_at', [$monthStart, $monthEnd]);
      //   })
      //   ->when(empty($monthsdigit), function ($query) use ($endDateFormatted) {
      //     return $query->whereDate('invoices.created_at', '>=', Carbon::parse($endDateFormatted)->subDays(15));
      //   })
      //   ->sum('invoices.total');


      // filter KPI Bills Pending for Generation
      $billspending = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->whereNull('invoices.assignmentgenerate_id')
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->where('assignmentbudgetings.status', 0)
        ->sum('assignmentmappings.engagementfee');

      // filter KPI Collection's Outstanding
      $outstandingBills = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('invoices.partner', $partnerId);
        })
        ->whereNotNull('invoices.id')
        ->where('assignmentbudgetings.status', 0)
        // ->whereIn('invoices.currency', [1, 3])
        ->where(function ($q) {
          $q->whereIn('invoices.currency', [1, 3])
            ->orWhereNull('invoices.currency');
        })
        ->select(
          'invoices.currency',
          // 'assignmentmappings.assignmentgenerate_id',
          DB::raw("DATE_FORMAT(outstandings.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(outstandings.AMT) as total_amount')
        )
        ->groupBy('invoices.currency', 'bill_date')
        ->get();


      $billspendingforcollection = $this->convertusdtoinr($outstandingBills);

      // filter KPI How many amounts pending for collection within 15 days or Payments Not Recieved
      $billspending15Daysdata = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('outstandings', 'outstandings.BILL_NO', '=', 'invoices.invoice_id')
        ->leftJoin('payments', 'payments.invoiceid', '=', 'invoices.invoice_id')
        ->where('assignmentbudgetings.status', 0)
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('invoices.partner', $partnerId);
        })
        ->whereNotNull('invoices.id')
        ->where('invoices.status', 2)
        ->whereNull('payments.invoiceid')
        ->where(function ($q) {
          $q->whereIn('invoices.currency', [1, 3])
            ->orWhereNull('invoices.currency');
        })
        ->whereBetween('invoices.created_at', [
          Carbon::today()->subDays(15)->startOfDay(),
          Carbon::today()->endOfDay()
        ])
        ->select(
          'invoices.currency',
          DB::raw("DATE_FORMAT(outstandings.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(outstandings.AMT) as total_amount')
        )
        ->groupBy('invoices.currency', 'bill_date')
        ->get();

      $billspending15Days = $this->convertusdtoinr($billspending15Daysdata);

      // filter KPI How many Assignments Completed in this months
      $query = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id');
      $query->whereBetween('assignmentbudgetings.otpverifydate', [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $query->whereMonth('assignmentbudgetings.otpverifydate', $monthsdigit);
      }
      if (!empty($partnerId)) {
        $query->where('assignmentmappings.leadpartner', $partnerId);
      }

      $assignmentcompleted = $query->count();

      // filter KPI How many Delayed Assignments
      $delayedAssignments = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->where(function ($q) {
          $q->where(function ($sub) {
            $sub->where('assignmentbudgetings.status', 1)
              // Delayed if Documentation < 100% OR Draft Report Date > Tentative End Date
              ->where(function ($inner) {
                $inner->whereNull('assignmentbudgetings.percentclosedate')
                  ->orWhereRaw('assignmentbudgetings.draftreportdate > assignmentbudgetings.tentativeenddate');
              });
          })
            // if worked hour > esthour
            ->orWhereRaw('(
            SELECT COALESCE(SUM(totalhour), 0)
            FROM timesheetusers
            WHERE assignmentgenerate_id = assignmentmappings.assignmentgenerate_id
        ) > assignmentmappings.esthours');
        })
        ->when(!empty($startDateFormatted) && !empty($endDateFormatted), function ($query) use ($startDateFormatted, $endDateFormatted) {
          $query->whereBetween(
            DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'),
            [$startDateFormatted, $endDateFormatted]
          );
        })
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth(
            DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'),
            $monthsdigit
          );
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->count();

      // dd($monthsdigit, $partnerId, $delayedAssignments);



      // filter KPI total amount of convence, how many amount approved for convence in this months or Exceptional Expenses 
      // $exceptionalQuery = DB::table('outstationconveyances')
      //   ->where('status', 6)
      //   ->whereBetween('approveddate', [$startDateFormatted, $endDateFormatted]);
      // if (!empty($monthsdigit)) {
      //   $exceptionalQuery->whereMonth('approveddate', $monthsdigit);
      // }
      // $exceptionalExpenses = $exceptionalQuery->sum('finalamount');

      $exceptionalQuery = DB::table('outstationconveyances')
        ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', '=', 'outstationconveyances.assignmentgenerate_id')
        ->where('outstationconveyances.status', 6)
        ->whereBetween('outstationconveyances.paiddate', [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $exceptionalQuery->whereMonth('outstationconveyances.paiddate', $monthsdigit);
      }
      if (!empty($partnerId)) {
        $exceptionalQuery->where('assignmentmappings.leadpartner', $partnerId);
      }

      $exceptionalExpenses = $exceptionalQuery->sum('finalamount');


      // filter KPI New Tenders Submitted this months
      // $tendersQuery = DB::table('tenders')
      //   ->where('tendersubmitstatus', 1)
      //   ->whereBetween('date', [$startDateFormatted, $endDateFormatted]);
      // if (!empty($monthsdigit)) {
      //   $tendersQuery->whereMonth('date', $monthsdigit);
      // }
      // $tendersSubmittedCount = $tendersQuery->count();

      $tendersQuery = DB::table('tenders')
        ->where('tendersubmitstatus', 1)
        ->whereBetween('tendersubmitdate', [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $tendersQuery->whereMonth('tendersubmitdate', $monthsdigit);
      }
      // if (!empty($partnerId)) {hide this box
      //   $tendersQuery->where('assignmentmappings.leadpartner', $partnerId);
      // }
      $tendersSubmittedCount = $tendersQuery->count();


      // filter KPI how many users not accepted Audit Acceptance Pending mail till now
      $totalNotFilled = DB::table('assignmentmappings')
        ->select(DB::raw('COUNT(*) as total_not_filled'))
        ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
        ->leftJoin('annual_independence_declarations', function ($join) {
          $join->on('annual_independence_declarations.assignmentgenerateid', '=', 'assignmentmappings.assignmentgenerate_id')
            ->on('annual_independence_declarations.createdby', '=', 'teammembers.id')
            ->where('annual_independence_declarations.type', 2);
        })
        ->whereNull('annual_independence_declarations.id') // Members without declarations
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->groupBy('assignmentmappings.assignmentgenerate_id')
        ->get()
        ->sum('total_not_filled');

      // $clientindependenceNotFilled = DB::table('assignmentmappings')
      //   ->select(DB::raw('COUNT(*) as total_not_filled'))
      //   ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
      //   ->leftJoin('annual_independence_declarations', function ($join) {
      //     $join->on('annual_independence_declarations.assignmentgenerateid', '=', 'assignmentmappings.assignmentgenerate_id')
      //       ->on('annual_independence_declarations.createdby', '=', 'teammembers.id')
      //       ->where('annual_independence_declarations.type', 2);
      //   })
      //   ->whereNull('annual_independence_declarations.id') // Members without declarations
      //   ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), [$startDateFormatted, $endDateFormatted])
      //   ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
      //     $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), $monthsdigit);
      //   })
      //   ->when(!empty($partnerId), function ($query) use ($partnerId) {
      //     $query->where('assignmentmappings.leadpartner', $partnerId);
      //   })
      //   ->groupBy('assignmentmappings.assignmentgenerate_id')
      //   ->get()
      //   ->sum('total_not_filled');


      // $independencenotfilled = DB::table('assignmentmappings')
      //   ->select(DB::raw('COUNT(*) as total_not_filled'))
      //   ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
      //   ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //   ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
      //   ->leftJoin('independences', function ($join) {
      //     $join->on('independences.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
      //       ->on('independences.createdby', '=', 'teammembers.id');
      //   })
      //   ->whereNull('independences.id') // Members without declarations
      //   ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), [$startDateFormatted, $endDateFormatted])
      //   ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
      //     $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), $monthsdigit);
      //   })
      //   ->when(!empty($partnerId), function ($query) use ($partnerId) {
      //     $query->where('assignmentmappings.leadpartner', $partnerId);
      //   })
      //   ->groupBy('assignmentmappings.assignmentgenerate_id')
      //   ->get()
      //   ->sum('total_not_filled');

      // $totalNotFilled = $clientindependenceNotFilled + $independencenotfilled;


      // filter KPI How many NAFRA are running
      $auditsDueQuery = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentmappings.eqcrapplicability', 1)
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $auditsDueQuery->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
      }
      if (!empty($partnerId)) {
        $auditsDueQuery->where('assignmentmappings.leadpartner', $partnerId);
      }
      $auditsDue = $auditsDueQuery->count();

      // filter KPI Upcoming Assignments
      $upcomingQuery = DB::table('assignmentplannings')
        ->where('status', 0)
        ->whereDate('assignmentstartdate', '>=', Carbon::today())
        ->whereBetween('assignmentstartdate', [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $upcomingQuery->whereMonth('assignmentstartdate', $monthsdigit);
      }
      if (!empty($partnerId)) {
        $upcomingQuery->where('assignmentplannings.engagementpartner', $partnerId);
      }
      $upcomingFromPlannings = $upcomingQuery->count();


      $upcomingFromBudgetingsQuery = DB::table('assignmentmappings')
        ->join('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->whereRaw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate) > ?', [Carbon::today()->toDateString()])
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $upcomingFromBudgetingsQuery->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualstartdate, assignmentbudgetings.tentativestartdate)'), $monthsdigit);
      }
      if (!empty($partnerId)) {
        $upcomingFromBudgetingsQuery->where('assignmentmappings.leadpartner', $partnerId);
      }
      $upcomingFromBudgetings = $upcomingFromBudgetingsQuery->count();
      $totalUpcomingAssignments = $upcomingFromPlannings + $upcomingFromBudgetings;

      // filter KPI Timesheet Filled On Closed Assignment
      $timesheetOnClosedAssignment = DB::table('assignmentmappings')
        ->join('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->join('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->whereExists(function ($query) {
          $query->select(DB::raw(1))
            ->from('timesheetusers')
            ->whereRaw('timesheetusers.assignmentgenerate_id = assignmentmappings.assignmentgenerate_id')
            ->whereRaw("DATE(timesheetusers.created_at) > DATE(COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate))");
        })
        ->whereBetween(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth(DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate)'), $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->select('assignmentmappings.assignmentgenerate_id')
        ->distinct()
        ->count();

      // filter KPI Work From Home 
      $workFromHomeQuery = DB::table('checkins')
        ->where('checkin_from', 'Work From Home')
        ->whereBetween('created_at', [$startDateFormatted, $endDateFormatted]);
      if (!empty($monthsdigit)) {
        $workFromHomeQuery->whereMonth('created_at', $monthsdigit);
      }
      // if (!empty($partnerId)) {hide this is hidden from UI
      //   $workFromHomeQuery->where('assignmentmappings.leadpartner', $partnerId);
      // }
      $workFromHome = $workFromHomeQuery->count();

      // KPI filter end from hare 

      // filter Chart, Assignment Status Overview
      $assignmentOverviews = DB::table('assignmentmappings')
        ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name',
          DB::raw('(SELECT SUM(totalhour) FROM timesheetusers WHERE timesheetusers.assignmentgenerate_id = assignmentmappings.assignmentgenerate_id) as workedHours')
        )
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->orderByDesc('assignmentbudgetings.id')
        ->get()
        ->map(function ($assignmentOverview) {
          $totalHours = $assignmentOverview->esthours ?? 0;
          $workedHours = $assignmentOverview->workedHours ?? 0;
          $completionPercentage = $totalHours > 0 ? round(($workedHours / $totalHours) * 100, 2) : 0;
          $assignmentOverview->completionPercentage = $completionPercentage;
          return $assignmentOverview;
        });


      // filter Chart, Document Completion Progress
      $documentCompletions = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        // ->where('assignmentbudgetings.status', 1)
        ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->orderByDesc('assignmentbudgetings.id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'clients.client_name'
        )
        ->get();


      foreach ($documentCompletions as $mapping) {
        $assignmentId = $mapping->assignmentgenerate_id;

        // Get assignment_id and eqcrapplicability
        $assignmentMapping = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $assignmentId)
          ->select('assignment_id', 'eqcrapplicability')
          ->first();

        // Determine EQCR type name
        $eqcrTypeName = '';
        $eqcrAssignmentId = null;
        if (isset($assignmentMapping->eqcrapplicability)) {
          switch ($assignmentMapping->eqcrapplicability) {
            case 1:
              $eqcrTypeName = 'NFRA';
              break;
            case 2:
              $eqcrTypeName = 'Quality Review';
              break;
            case 3:
              $eqcrTypeName = 'Peer Review';
              break;
            case 4:
              $eqcrTypeName = 'Others';
              break;
            case 5:
              $eqcrTypeName = 'PCAOB';
              break;
          }
          // Get the assignment_id for the EQCR type
          $specialAssignment = DB::table('assignments')
            ->where('assignment_name', $eqcrTypeName)
            ->first();
          if ($specialAssignment) {
            $eqcrAssignmentId = $specialAssignment->id;
          }
        }
        $mapping->eqcr_type_name = $eqcrTypeName;

        // Regular Checklist Calculations (Exclude EQCR assignment_id)
        $classificationIds = DB::table('financialstatementclassifications')
          ->where('assignment_id', $assignmentMapping->assignment_id)
          ->where(function ($q) use ($assignmentId) {
            $q->whereNull('assignmentgenerate_id')->orWhere('assignmentgenerate_id', $assignmentId);
          })
          ->when($eqcrAssignmentId, function ($query) use ($eqcrAssignmentId) {
            $query->where('assignment_id', '!=', $eqcrAssignmentId);
          })
          ->pluck('id');



        $subClassIds = DB::table('subfinancialclassfications')
          ->whereIn('financialstatemantclassfication_id', $classificationIds)
          ->pluck('id');



        $totalQuestions = DB::table('auditquestions')
          ->whereIn('financialstatemantclassfication_id', $classificationIds)
          ->whereIn('subclassfied_id', $subClassIds)
          ->count();


        $statusCounts = DB::table('checklistanswers')
          ->join('statuses', 'checklistanswers.status', '=', 'statuses.id')
          ->where('checklistanswers.assignment_id', $assignmentId)
          ->whereIn('checklistanswers.financialstatemantclassfication_id', $classificationIds)
          ->whereIn('checklistanswers.subclassfied_id', $subClassIds)
          ->select(
            'statuses.name as status_name',
            DB::raw('COUNT(*) as count')
          )
          ->groupBy('statuses.name')
          ->pluck('count', 'status_name');



        $closedQuestions = $statusCounts['CLOSE'] ?? 0;

        $mapping->documentation_percentage = $totalQuestions > 0
          ? round(($closedQuestions / $totalQuestions) * 100, 2)
          : 0;
      }
      // Document Completion Progress end hare 

      // filter Chart, NFRA Audits, Quality Reviews & Peer Review
      $ecqrAudits = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.eqcrpartner')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        // ->where('assignmentbudgetings.status', 1)
        ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->whereIn('assignmentmappings.eqcrapplicability', [1, 2, 3])
        ->select(
          'assignmentmappings.*',
          'teammembers.team_member',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        // ->limit(3)
        ->get();

      foreach ($ecqrAudits as $audit) {
        $assignmentId = $audit->assignmentgenerate_id;

        // get reviewer assignment id (based on eqcrapplicability)
        $eqcrTypeName = '';
        $eqcrAssignmentId = null;
        switch ($audit->eqcrapplicability) {
          case 1:
            $eqcrTypeName = 'NFRA';
            break;
          case 2:
            $eqcrTypeName = 'Quality Review';
            break;
          case 3:
            $eqcrTypeName = 'Peer Review';
            break;
          case 4:
            $eqcrTypeName = 'Others';
            break;
          case 5:
            $eqcrTypeName = 'PCAOB';
            break;
        }
        if ($eqcrTypeName) {
          $specialAssignment = DB::table('assignments')
            ->where('assignment_name', $eqcrTypeName)
            ->first();
          if ($specialAssignment) {
            $eqcrAssignmentId = $specialAssignment->id;
          }
        }

        $audit->reviewer_documentation_percentage = 0;

        if ($eqcrAssignmentId) {
          $reviewerClassificationIds = DB::table('financialstatementclassifications')
            ->where('assignment_id', $eqcrAssignmentId)
            ->where(function ($q) use ($assignmentId) {
              $q->whereNull('assignmentgenerate_id')->orWhere('assignmentgenerate_id', $assignmentId);
            })
            ->pluck('id');

          $reviewerSubClassIds = DB::table('subfinancialclassfications')
            ->whereIn('financialstatemantclassfication_id', $reviewerClassificationIds)
            ->pluck('id');

          $reviewerTotalQuestions = DB::table('auditquestions')
            ->whereIn('financialstatemantclassfication_id', $reviewerClassificationIds)
            ->whereIn('subclassfied_id', $reviewerSubClassIds)
            ->count();

          $reviewerStatusCounts = DB::table('checklistanswers')
            ->join('statuses', 'checklistanswers.status', '=', 'statuses.id')
            ->where('checklistanswers.assignment_id', $assignmentId)
            ->whereIn('checklistanswers.financialstatemantclassfication_id', $reviewerClassificationIds)
            ->whereIn('checklistanswers.subclassfied_id', $reviewerSubClassIds)
            ->select('statuses.name as status_name', DB::raw('COUNT(*) as count'))
            ->groupBy('statuses.name')
            ->pluck('count', 'status_name');

          $reviewerClosed =  ($reviewerStatusCounts['CLOSE'] ?? 0) +
            ($reviewerStatusCounts['NOT-APPLICABLE'] ?? 0);

          $audit->reviewer_documentation_percentage = $reviewerTotalQuestions > 0
            ? round(($reviewerClosed / $reviewerTotalQuestions) * 100, 2)
            : 0;
        }
      }

      // dd($ecqrAudits);

      // filter Chart, Assignment-wise P&L Analysis and Loss Making Assignments
      $assignmentprofitandlosses = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->orderByDesc('assignmentbudgetings.id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        // ->limit(6)
        ->get();

      $assignmentCosts = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->where('timesheetusers.assignmentgenerate_id', 254418551033)
        // ->whereBetween(DB::raw("STR_TO_DATE(timesheetusers.date, '%d-%m-%Y')"), [
        //   $financialStartDate->format('Y-m-d'),
        //   $financialEndDate->format('Y-m-d')
        // ])
        ->select('timesheetusers.assignmentgenerate_id', DB::raw('SUM(timesheetusers.totalhour * teammembers.cost_hour) as total_cost'))
        ->groupBy('timesheetusers.assignmentgenerate_id')
        ->pluck('total_cost', 'assignmentgenerate_id');

      $conveyanceonlybillno = DB::table('outstationconveyances')
        ->where('bill', 'No')
        ->select(
          'assignmentgenerate_id',
          DB::raw('SUM(finalamount) as finalamounts')
        )
        ->groupBy('assignmentgenerate_id')
        ->pluck('finalamounts', 'assignmentgenerate_id');


      $lossMakingCount = 0;
      foreach ($assignmentprofitandlosses as $assignment) {
        $assignmentworkedcost = $assignmentCosts[$assignment->assignmentgenerate_id] ?? 0;
        $assignmentconvencecost = $conveyanceonlybillno[$assignment->assignmentgenerate_id] ?? 0;
        $assignment->total_cost = $assignmentworkedcost + $assignmentconvencecost;
        // Loss Making Assignments
        $revenue = $assignment->engagementfee ?? 0;
        $cost = $assignment->total_cost ?? 0;
        $profit = $revenue - $cost;

        if ($profit < 0) {
          $lossMakingCount++;
        }
      }

      // filter Chart, Partner-wise P&L Statement
      $assignmentGenerateIds = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->whereBetween('assignmentbudgetings.periodstartdate', [$startDateFormatted, $endDateFormatted])
        ->whereBetween('assignmentbudgetings.periodenddate', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('assignmentbudgetings.periodstartdate', $monthsdigit)
            ->whereMonth('assignmentbudgetings.periodenddate', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->pluck('assignmentmappings.assignmentgenerate_id');


      // $invoices = DB::table('invoices')
      //   ->select(
      //     'invoices.assignmentgenerate_id',
      //     'teammembers.team_member',
      //     DB::raw('SUM(invoices.total) as total')
      //   )
      //   ->join('teammembers', 'teammembers.id', '=', 'invoices.partner')
      //   ->whereIn('invoices.assignmentgenerate_id', $assignmentGenerateIds)
      //   ->groupBy('invoices.assignmentgenerate_id', 'teammembers.team_member')
      //   ->get();

      $invoicesdata = DB::table('invoices')
        ->select(
          'invoices.assignmentgenerate_id',
          'invoices.currency',
          'teammembers.team_member',
          DB::raw("DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date"),
          DB::raw('SUM(invoices.total) as total_amount')
        )
        ->join('teammembers', 'teammembers.id', '=', 'invoices.partner')
        ->whereIn('invoices.assignmentgenerate_id', $assignmentGenerateIds)
        ->groupBy('invoices.assignmentgenerate_id', 'teammembers.team_member', 'invoices.currency', 'bill_date')
        ->get();

      $invoicesdata = $this->convertusdtoinr1($invoicesdata);

      $invoices = $invoicesdata
        ->groupBy('assignmentgenerate_id')
        ->map(function ($items, $assignmentId) {
          return (object)[
            'assignmentgenerate_id' => $assignmentId,
            'team_member' => $items->first()->team_member,
            'total' => $items->sum('total_amount'),
          ];
        })
        ->values();

      $timesheetData = DB::table('timesheetusers')
        ->select('assignmentgenerate_id', 'createdby', DB::raw('SUM(totalhour) as total_hour'))
        ->whereIn('assignmentgenerate_id', $assignmentGenerateIds)
        ->groupBy('assignmentgenerate_id', 'createdby')
        ->get();

      $teamMemberCosts = DB::table('teammembers')
        ->whereIn('id', $timesheetData->pluck('createdby')->unique())
        ->pluck('cost_hour', 'id');

      $groupedCosts = $timesheetData->groupBy('assignmentgenerate_id')->map(function ($rows) use ($teamMemberCosts) {
        return $rows->sum(function ($row) use ($teamMemberCosts) {
          return $row->total_hour * ($teamMemberCosts[$row->createdby] ?? 0);
        });
      });

      // $finalData = $invoices->map(function ($row) use ($groupedCosts) {
      //   $row->cost = $groupedCosts[$row->assignmentgenerate_id] ?? 0;
      //   $row->profit_loss = $row->total - $row->cost;
      //   return $row;
      // });

      $finalData = $invoices->map(function ($row) use ($groupedCosts, $conveyanceonlybillno) {
        $workedcost = $groupedCosts[$row->assignmentgenerate_id] ?? 0;
        $convencecostdata = $conveyanceonlybillno[$row->assignmentgenerate_id] ?? 0;
        $row->cost = $workedcost + $convencecostdata;
        $row->profit_loss = $row->total - $row->cost;
        return $row;
      });

      $partnerWiseProfit = $finalData
        ->groupBy('team_member')
        ->map(function ($items, $teamMember) {
          return (object)[
            'team_member' => $teamMember,
            'total' => $items->sum(fn($item) => (float) $item->total),
            'cost' => $items->sum('cost'),
            'profit_loss' => $items->sum('profit_loss'),
          ];
        })
        // Reset index if needed
        ->values();

      // Partner-wise P&L Statement end hare

      // filter Chart, Monthly Expense Analysis 
      $teamsSalaries = DB::table('employeepayrolls')
        ->select(
          'month',
          'year',
          DB::raw('SUM(total_amount_to_paid) as total_amount')
        )
        ->where(function ($query) use ($endYear, $startYear) {
          // Jan to Mar from next year
          $query->where(function ($q) use ($endYear) {
            $q->where('year', $endYear);
            // ->whereIn('month', ['January', 'February', 'March']);
          })
            // Apr to Jun from current year
            ->orWhere(function ($q) use ($startYear) {
              $q->where('year', $startYear);
              // ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
            });
        })
        ->where('send_to_bank', 1)
        ->when(!empty($months), function ($query) use ($months) {
          $query->where('month', $months);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('createdby', $partnerId);
        })
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();


      // $teamexceptionalExpenses = DB::table('outstationconveyances')
      //   ->selectRaw('MONTH(approveddate) as month, YEAR(approveddate) as year, SUM(finalamount) as total_amount')
      //   ->where('status', 6)
      //   ->whereBetween('approveddate', [
      //     $startDateFormatted,
      //     $endDateFormatted
      //   ])
      //   ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
      //     $query->whereMonth('approveddate', $monthsdigit);
      //   })
      //   // ->when(!empty($partnerId), function ($query) use ($partnerId) {
      //   //   $query->where('assignmentmappings.leadpartner', $partnerId);
      //   // })
      //   ->groupByRaw('MONTH(approveddate), YEAR(approveddate)')
      //   ->orderByRaw('FIELD(MONTH(approveddate),  4,5,6,7,8,9,10,11,12,1,2,3)')
      //   ->get()
      //   ->map(function ($item) use ($monthNames) {
      //     $item->month = $monthNames[$item->month] ?? $item->month;
      //     return $item;
      //   });


      $teamexceptionalExpenses = DB::table('outstationconveyances')
        ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', '=', 'outstationconveyances.assignmentgenerate_id')
        ->selectRaw('MONTH(outstationconveyances.paiddate) as month, YEAR(outstationconveyances.paiddate) as year, SUM(outstationconveyances.finalamount) as total_amount')
        ->where('outstationconveyances.status', 6)
        ->whereBetween('outstationconveyances.paiddate', [
          $startDateFormatted,
          $endDateFormatted
        ])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('outstationconveyances.paiddate', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->groupByRaw('MONTH(outstationconveyances.paiddate), YEAR(outstationconveyances.paiddate)')
        ->orderByRaw('FIELD(MONTH(outstationconveyances.paiddate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // filter Chart,cc Cash Flow Analysis
      $cashFlowRecieved = DB::table('payments')
        ->leftJoin('invoices', 'invoices.invoice_id', '=', 'payments.invoiceid')
        ->selectRaw('MONTH(paymentdate) as month, YEAR(paymentdate) as year, SUM(amountreceived) as amountreceived')
        ->whereBetween('paymentdate', [
          $startDateFormatted,
          $endDateFormatted
        ])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('paymentdate', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('invoices.partner', $partnerId);
        })
        ->groupByRaw('MONTH(paymentdate), YEAR(paymentdate)')
        ->orderByRaw('FIELD(MONTH(paymentdate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashFlowSpendvender = DB::table('vendorlist')
        ->selectRaw('MONTH(approvedate) as month, YEAR(approvedate) as year, SUM(amount) as total_amounts')
        ->where('status', 4)
        ->whereBetween('approvedate', [
          $startDateFormatted,
          $endDateFormatted
        ])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('approvedate', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('approver', $partnerId);
        })
        ->groupByRaw('MONTH(approvedate), YEAR(approvedate)')
        ->orderByRaw('FIELD(MONTH(approvedate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashFlowSpendemployee = DB::table('employeepayrolls')
        ->select('month', 'year', DB::raw('SUM(total_amount_to_paid) as total_amounts'))
        ->where(function ($query) use ($endYear, $startYear) {
          // Jan to Mar from next year
          $query->where(function ($q) use ($endYear) {
            $q->where('year', $endYear);
            // ->whereIn('month', ['January', 'February', 'March']);
          })
            // Apr to Jun from current year
            ->orWhere(function ($q) use ($startYear) {
              $q->where('year', $startYear);
              // ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
            });
        })
        ->where('send_to_bank', 1)
        ->when(!empty($months), function ($query) use ($months) {
          $query->where('month', $months);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('createdby', $partnerId);
        })
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();

      $mergedSpenddata = $cashFlowSpendvender->merge($cashFlowSpendemployee);

      $cashFlowtotalspendData = $mergedSpenddata->groupBy(function ($item) {
        return $item->month . '-' . $item->year;
      })->map(function ($group) {
        return (object) [
          'month' => $group->first()->month,
          'year' => $group->first()->year,
          'total_amounts' => $group->sum('total_amounts'),
        ];
      })->sortBy(function ($item) {
        $order = ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March'];
        return array_search($item->month, $order);
      })->values();

      // filter Chart, Budget vs Actual Cash Flow

      // 1.budget table se budgetinflow
      // 2.cash recieved in paymnets table 
      // 2.budget table se budgetoutflow
      // 4.cash spend on employee and vender employeepayrolls and vendorlist tables 

      $budgetactualcash = DB::table('budget')
        ->select('month', 'year', DB::raw('SUM(budgetinflow) as budgetinflow'), DB::raw('SUM(budgetoutflow) as budgetoutflow'))
        ->where(function ($query) use ($endYear, $startYear) {
          // Jan to Mar from next year
          $query->where(function ($q) use ($endYear) {
            $q->where('year', $endYear);
            // ->whereIn('month', ['January', 'February', 'March']);
          })
            // Apr to Jun from current year
            ->orWhere(function ($q) use ($startYear) {
              $q->where('year', $startYear);
              // ->whereIn('month', ['April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
            });
        })
        ->when(!empty($months), function ($query) use ($months) {
          $query->where('month', $months);
        })
        // ->when(!empty($partnerId), function ($query) use ($partnerId) {hide from UI
        //   $query->where('assignmentmappings.leadpartner', $partnerId);
        // })
        ->groupBy('year', 'month')
        ->orderByRaw("FIELD(month, 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'January', 'February', 'March')")
        ->get();

      //  Budget vs Actual Cash Flow end hare 


      // filter Chart, Budget vs Actual P&L
      $budgetRevenueandbudgetExpences = DB::table('assignmentmappings')
        ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(engagementfee) as engagementfee, SUM(teamestcost) as total_teamestcost')
        ->whereBetween('created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('leadpartner', $partnerId);
        })
        ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });


      $budgetActualRevenuedata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('partner', $partnerId);
        })
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(MONTH(created_at), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $budgetActualRevenuedata = $this->convertusdtoinr1($budgetActualRevenuedata);

      $budgetActualRevenue = $budgetActualRevenuedata
        ->groupBy('month')
        ->map(function ($items, $month) {
          return (object)[
            'month' => $month,
            'year' => $items->first()->year,
            'total_amount' => $items->sum('total_amount'),
          ];
        })
        ->values();

      $budgetActualExpences = DB::table('timesheets')
        ->leftJoin('timesheetusers', 'timesheetusers.timesheetid', '=', 'timesheets.id')
        ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->whereIn('timesheets.created_by', [815, 818])
        ->selectRaw('MONTH(timesheets.date) as month, YEAR(timesheets.date) as year, SUM(timesheetusers.totalhour * teammembers.cost_hour) as total_cost')
        ->whereBetween('timesheets.date', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('timesheets.date', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('timesheetusers.partner', $partnerId);
        })
        ->groupByRaw('MONTH(timesheets.date), YEAR(timesheets.date)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // Budget vs Actual P&L end hare 


      // filter Chart, Lap Days Analysis (Assignment to Invoice)
      $assignmentsWithInvoices = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        // get only those assignments for which an invoice has been created
        ->join('invoices', 'invoices.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->selectRaw('MONTH(assignmentbudgetings.otpverifydate) as month, YEAR(assignmentbudgetings.otpverifydate) as year, assignmentbudgetings.otpverifydate, invoices.created_at as invoice_created_at, invoices.id as invoice_id')
        ->whereBetween('assignmentbudgetings.otpverifydate', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('assignmentbudgetings.otpverifydate', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('assignmentmappings.leadpartner', $partnerId);
        })
        ->orderByRaw('FIELD(MONTH(assignmentbudgetings.otpverifydate), 1,2,3,4,5,6,7,8,9,10,11,12)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $assignmentclosedDate = Carbon::parse($item->otpverifydate);
          $invoicecreatedDate = Carbon::parse($item->invoice_created_at);
          $item->differenceDays = $assignmentclosedDate->diffInDays($invoicecreatedDate);
          $item->targetDays = 7;
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        })
        ->groupBy(fn($item) => $item->month . '-' . $item->year)
        ->map(function ($group) {
          $first = $group->first();
          return (object) [
            'month' => $first->month,
            'year' => $first->year,
            'otpverifydate' => $first->otpverifydate,
            'invoice_id' => $first->invoice_id,
            'invoice_created_at' => $first->invoice_created_at,
            'targetDays' => $first->targetDays,
            'differenceDays' => $group->sum('differenceDays'),
            'countitem' => $group->count(),
            // Average Difference Days = (sum of all differenceDays) / number of records
            'averageDifferenceDays' => round($group->avg('differenceDays'), 1),
          ];
        })
        ->sortBy(fn($item) => array_search($item->month, array_values($monthNames)))
        ->values();


      // filter Chart, Invoice Due vs Assignment Billing vs Cash Recovery
      $assignmentBillingdata = DB::table('invoices')
        ->selectRaw("MONTH(created_at) as month, YEAR(created_at) as year, invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d') as bill_date, SUM(total) as total_amount")
        ->whereBetween('created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('partner', $partnerId);
        })
        ->groupByRaw("MONTH(created_at), YEAR(created_at), invoices.currency, DATE_FORMAT(invoices.created_at, '%Y-%m-%d')")
        ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $assignmentBillingdata = $this->convertusdtoinr1($assignmentBillingdata);

      $assignmentBilling = $assignmentBillingdata
        ->groupBy('month')
        ->map(function ($items, $month) {
          return (object)[
            'month' => $month,
            'year' => $items->first()->year,
            'total_amount' => $items->sum('total_amount'),
          ];
        })
        ->values();

      $assignmentOutstanding = DB::table('outstandings')
        ->selectRaw('MONTH(created_at) as month, YEAR(created_at) as year, SUM(AMT) as outstanding_amount')
        ->whereBetween('created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('Partner', $partnerId);
        })
        ->groupByRaw('MONTH(created_at), YEAR(created_at)')
        ->orderByRaw('FIELD(MONTH(created_at),  4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      $cashRecovery = DB::table('payments')
        ->leftJoin('invoices', 'invoices.invoice_id', '=', 'payments.invoiceid')
        ->selectRaw('MONTH(paymentdate) as month, YEAR(paymentdate) as year, SUM(amountreceived) as amountreceived')
        ->whereBetween('paymentdate', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('paymentdate', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('invoices.partner', $partnerId);
        })
        ->groupByRaw('MONTH(paymentdate), YEAR(paymentdate)')
        ->orderByRaw('FIELD(MONTH(paymentdate), 4,5,6,7,8,9,10,11,12,1,2,3)')
        ->get()
        ->map(function ($item) use ($monthNames) {
          $item->month = $monthNames[$item->month] ?? $item->month;
          return $item;
        });

      // filter Chart,  Staff Allocation vs Actual Timesheet Analysis
      $teamAllocatedHours = DB::table('timesheetusers')
        ->join('teammembers', 'teammembers.id', '=', 'timesheetusers.createdby')
        // ->whereIn('teammembers.id', [14, 23, 187, 305, 659, 815])
        // ->whereNotIn('teammembers.role_id', [13])
        ->whereBetween('timesheetusers.created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('timesheetusers.created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('timesheetusers.partner', $partnerId);
        })
        ->select(
          'teammembers.id as teammember_id',
          'teammembers.team_member',
          'teammembers.role_id',
          DB::raw('SUM(timesheetusers.totalhour) as actualhours')
        )
        ->groupBy('teammembers.id', 'teammembers.team_member', 'teammembers.role_id')
        // ->limit(6)
        ->get();



      foreach ($teamAllocatedHours as $teamAllocatedHour) {
        if ($teamAllocatedHour->role_id == 13) {
          $allocatedHours1 = DB::table('assignmentmappings')
            ->where('assignmentmappings.eqcrpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
            ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
              $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
            })
            // ->when(!empty($partnerId), function ($query) use ($partnerId) {
            //   $query->where('assignmentmappings.leadpartner', $partnerId);
            // })
            ->sum('assignmentmappings.eqcresthour');

          $allocatedHours2 = DB::table('assignmentmappings')
            ->where('assignmentmappings.leadpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
            ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
              $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
            })
            // ->when(!empty($partnerId), function ($query) use ($partnerId) {
            //   $query->where('assignmentmappings.leadpartner', $partnerId);
            // })
            ->sum('assignmentmappings.partneresthour');

          $allocatedHours3 = DB::table('assignmentmappings')
            ->where('assignmentmappings.otherpartner', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentmappings.created_at', [$startDateFormatted, $endDateFormatted])
            ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
              $query->whereMonth('assignmentmappings.created_at', $monthsdigit);
            })
            // ->when(!empty($partnerId), function ($query) use ($partnerId) {
            //   $query->where('assignmentmappings.leadpartner', $partnerId);
            // })
            ->sum('assignmentmappings.otherpartneresthour');

          $allocatedHours = $allocatedHours1 + $allocatedHours2 + $allocatedHours3;
        } else {
          $allocatedHours = DB::table('assignmentmappings')
            ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
            ->where('assignmentteammappings.teammember_id', $teamAllocatedHour->teammember_id)
            ->whereBetween('assignmentteammappings.created_at', [$startDateFormatted, $endDateFormatted])
            ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
              $query->whereMonth('assignmentteammappings.created_at', $monthsdigit);
            })
            ->when(!empty($partnerId), function ($query) use ($partnerId) {
              $query->where('assignmentmappings.leadpartner', $partnerId);
            })
            ->sum('assignmentteammappings.teamesthour');
        }

        if (is_null($allocatedHours)) {
          $allocatedHours = 0;
        }
        $teamAllocatedHour->teamallocatedhours = $allocatedHours;
        $teamAllocatedHour->discrepancy = $teamAllocatedHour->actualhours - (float) $allocatedHours;
      }


      // filter Chart, Fetch IT and Finance Tickets or Unresolved Tickets - HR, IT & Admin
      $ticketDatas = Assetticket::with(['financerequest', 'createdBy', 'partner'])
        ->whereIn('type', [0, 1])
        ->whereBetween('created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('partner_id', $partnerId);
        })
        ->orderByDesc('id')
        // ->limit(4)
        ->get()
        ->map(function ($item) {
          return [
            'ticket_id' => $item->generateticket_id,
            'department' => $item->type == 0 ? 'IT' : 'Finance',
            'created_by' => $item->createdBy->team_member ?? '',
            'subject' => $item->subject,
            'assigned_to' => $item->partner->team_member ?? '',
            'created_at' => $item->created_at,
            'status' => $item->status,
            'source' => 'ticket',
          ];
        });


      // Fetch HR Tasks
      $hrTickets = DB::table('tasks')
        ->select(
          'tasks.*',
          'patnerid.team_member as partnername',
          'createdby.team_member as createdbyname',
          'hrfunctions.hrfunction'
        )
        ->where('tasks.task_type', 4)
        ->whereBetween('tasks.created_at', [$startDateFormatted, $endDateFormatted])
        ->when(!empty($monthsdigit), function ($query) use ($monthsdigit) {
          $query->whereMonth('tasks.created_at', $monthsdigit);
        })
        ->when(!empty($partnerId), function ($query) use ($partnerId) {
          $query->where('tasks.partner_id', $partnerId);
        })
        ->leftJoin('teammembers as patnerid', 'patnerid.id', '=', 'tasks.partner_id')
        ->leftJoin('teammembers as createdby', 'createdby.id', '=', 'tasks.createdby')
        ->leftJoin('hrfunctions', 'hrfunctions.id', '=', 'tasks.hrfunction')
        ->orderByDesc('tasks.id')
        // ->limit(4)
        ->get()
        ->map(function ($item) {
          return [
            'ticket_id' => $item->generateticket_id ?? 'NA',
            'department' => 'HR',
            'created_by' => $item->createdbyname ?? '',
            'subject' => $item->taskname ?? '',
            'assigned_to' => $item->partnername ?? '',
            'created_at' => $item->created_at,
            'status' => $item->status,
            'source' => 'hr',
          ];
        });

      $allTickets = $ticketDatas->merge($hrTickets);

      // High Priority Tasks Pending
      $highpriorityAssignments  = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.assignmentname',
          DB::raw('COALESCE(assignmentbudgetings.actualenddate, assignmentbudgetings.tentativeenddate) as finalassignmentenddate'),
          'clients.client_name'
        )
        ->limit(6)
        ->get();

      // filter data 
      $startYearforfilter = 2022;
      $currentDatetoday = Carbon::now();
      $currentYearforfilter = $currentDatetoday->year;
      $currentMonthforfilter = $currentDatetoday->month;
      $currentFinancialYear = $currentMonthforfilter >= 4 ? $currentYearforfilter : $currentYearforfilter - 1;

      $financialYears = [];
      for ($year = $startYearforfilter; $year <= $currentFinancialYear; $year++) {
        $financialYears[] = [
          'value' => $year . '-' . ($year + 1),
        ];
      }

      $financialYears = array_reverse($financialYears);

      $partnerlist = Teammember::where('status', 1)
        ->where('role_id', 13)
        ->with('title')
        ->orderBy('team_member', 'asc')
        ->get();

      $request->flash();

      // filter data end hare 
      return view('backEnd.kgsdashboardreport', compact('monthsdigit', 'yearly', 'partnerId', 'partnerlist', 'budgetactualcash', 'financialYears', 'workFromHome', 'budgetRevenueandbudgetExpences', 'budgetActualRevenue', 'budgetActualExpences', 'assignmentsWithInvoices', 'assignmentBilling', 'assignmentOutstanding', 'cashRecovery', 'cashFlowtotalspendData', 'cashFlowRecieved', 'teamexceptionalExpenses', 'teamsSalaries', 'teamAllocatedHours', 'timesheetOnClosedAssignment', 'totalNotFilled', 'partnerWiseProfit', 'lossMakingCount', 'billspending15Days', 'totalUpcomingAssignments', 'assignmentprofitandlosses', 'allTickets', 'hrTickets', 'ticketDatas', 'highpriorityAssignments', 'ecqrAudits', 'documentCompletions', 'assignmentOverviews',  'exceptionalExpenses', 'auditsDue', 'tendersSubmittedCount', 'delayedAssignments', 'assignmentcompleted', 'billspendingforcollection', 'billspending'));
    }
  }




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\DashboardReport.php

add file 




resources\views\backEnd\dashboardreport

add file 


```111
add this column in assignmentbudget

percentclosedate  varchar, 300, null

20-09-2025 ```end hare 


24-09-2025 ```start appointment latter
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php

public function authotp(Request $request)
  {
    if ($request->ajax()) {
      // dd($request->id);
      if (isset($request->id)) {
        $authotp = DB::table('teammembers')
          ->select('teammembers.mobile_no')->where('id', auth()->user()->teammember_id)->first();
        //	dd($authotp->mobile_no);
        $curl = curl_init();
        $authnumber = $authotp->mobile_no;
        $cdate = urlencode(date('F d,Y', strtotime(date('Y-m-d'))));
        $otpap = sprintf("%06d", mt_rand(1, 999999));

        curl_setopt_array($curl, array(
          CURLOPT_URL => "https://bhashsms.com/api/sendmsg.php?user=KGSomani&pass=123456&sender=CPTLIT&phone=" . $authnumber . "&text=" . $otpap . "%20is%20the%20Onetime%20password%20(OTP)%20for%20authentication%20of%20transaction%20at%20KGS%20" . $cdate . "%20CPTLIT&priority=ndnd&stype=normal", // your preferred url
          CURLOPT_RETURNTRANSFER => true,
          CURLOPT_ENCODING => "",
          CURLOPT_MAXREDIRS => 10,
          CURLOPT_TIMEOUT => 30000,
          CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
          CURLOPT_CUSTOMREQUEST => "POST",
          //    CURLOPT_POSTFIELDS => json_encode($data2),
          CURLOPT_HTTPHEADER => array(
            // Set here requred headers
            "accept: /",
            "accept-language: en-US,en;q=0.8",
            "content-type: application/json",
          ),

        ));  //  dd($se);
        $response = curl_exec($curl);
        $urlPath = $request->path();

        if ($urlPath === 'incrementauthotp') {
          // If the URL matches '/incrementauthotp', update the 'incrementletters' table
          $dbRes = DB::table('incrementletters')->where('id', $request->id)->where('final_status', 1)->update([
            'otp' => $otpap,
          ]);
        } elseif ($urlPath === 'authotp') {
          // If the URL matches '/authotp', update the 'staffappointmentletters' table
          $dbRes = DB::table('staffappointmentletters')->where('teammember_id', auth()->user()->teammember_id)->update([
            'otp' => $otpap,
          ]);
        }

        return response()->json($dbRes);
      }
    }
  }
  
 
 
 app\Http\Middleware\VerifyTeamMember.php

 public function handle(Request $request, Closure $next)
  {
    $user = Teammember::where('id', auth()->user()->teammember_id)->first();
    $status = Staffappointmentletter::where('teammember_id', auth()->user()->teammember_id)->pluck('status')->first();
    $statusrec = Staffappointmentletter::where('teammember_id', auth()->user()->teammember_id)->first();
    // dd($user, $status, $statusrec);
    //  $user = auth()->user(); // Get the authenticated user

    // Check if the user is verified (assuming 'verify' is a column in the 'users' table)
    // Also, check if the user has specific role_ids (14, 18, 17, or 18)
    if ($request->is('userprofile/*') || $request->is('appointmentletters')) {
      // dd($next($request));
      return $next($request); // Allow access
    } elseif ($statusrec && $statusrec->e_verify === 1 && $statusrec->otp != null  && $statusrec->otpdate != null && in_array($user->role_id, [14, 16, 17])) {
      // dd('if');
      return $next($request); // Allow access
    } elseif ($user->role_id == 15 || $user->role_id == 13 || $user->role_id == 11 || $user->role_id == 12 || $user->role_id == 19 || $user->role_id == 20 || $user->role_id == 21 || $user->role_id == 18) {
      return $next($request); // Allow access
    } elseif ($statusrec === null) {
      return $next($request); // Allow access
    } else {
      // User is not verified or doesn't have the required role; redirect to the home page with a message
      return redirect('/home')->with('error', 'You must be verified and have the required role to access this page.');
      //$request->session()->flush();
    }
  }


24-09-2025 ```end appointment latter

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\KrasController.php



















invoice status 2 for approved 
834958443921

budget inflo and budget outflow mil gya hai and 
Actual Inflow me jo payment aati hai like paymnt tables me 
Actual Outflow me jo bhi sanjay paid karta hai vo aa jayega 


Claimable From Client no wala dlna h  outstaionconvence me climate form se No wla get karna hai


























krtika aGARWAL
DEPANSU



1. nafra pending filter on actual and tentative date 
     

222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
2025-07-12
2025-02-07

2024-09-13

Ctrl + Shift + M



Shahid Raza try clicking this
 

http://localhost/phpmyadmin/index.php?route=/database/structure&db=kgsdashboard

  
  https://somani-insight-hub.lovable.app/
    
  invoiec catagary ki value 2
  750001
  
  
https://kgssomani-my.sharepoint.com/:x:/g/personal/shivamsaini_kgsomani_com/EX1-AVZT59NDp_OmBmXiSisBmdCLd_cN9BzgT1bJyo9OCw?rtime=QRj45ff03Ug



2222222222222222222222222222222222222222222222
   <script>
            const printPage = () => {
                let noPrint = document.querySelectorAll('.no-print');
                noPrint.forEach(portion => {
                    portion.style.display = 'none';
                });
                window.print();
                noPrint.forEach(portion => {
                    portion.style.display = 'block';
                });
            }
        </script>
		
		
		
            <nav aria-label="breadcrumb no-print" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
                <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right">
                    <li class="breadcrumb-item">
                        {{-- <a href="#">Download as pdf</a> --}}
                        <button class="btn btn-outline-dark btn-sm d-print-none me-2" type="button"
                            onclick="printPage()">Download as Pdf</button>
                    </li>
                </ol>

            </nav>
			
			
  @media print {

                .no-print,
                .d-print-none {
                    display: none !important;
                }
            }
			
			
			22222222222
			
			
222222222222222222222222
billspendingforcollection

Assignment Code no
Client Name
Assignment Name, 
Partner Name,
Invoice number,
Amount of Invoice
(Exc GST and OPE), ``````````
OPE, ``````````````````````
GST,
Total Invoice Amount
Collection Amount (Partial Collection),
Outstanding Amount,
Outstanding number of Days.,``````````````````
Number of days of Delay ````````````````````










Documentation is pending 
Draft Report date

percentclosedate


delayed assignment 

Assignment Code no
Client Name
Assignment Name
Partner Name
Actual Start Date
(1st time timesheet filled)`````````````
Tentative Start Date
tentative End Date, % Documents (As of Date),```````````````
Draft report Date,
Delay Days (Today date or date on which both the conditions were satisfied- Tentative End Date),``````````

We should also have Filter on each Column




When we Will click on the amount then we are able to see the detail breakdown in Table form
Which can be Downloaded 

Below are the headings of table 
Assignment Code no.
Client Name
Assignment Name, 
Partner Name, 
Closing Date,
No of due dates as of date, 
Amount of Fees(exc GST)

1669158689

