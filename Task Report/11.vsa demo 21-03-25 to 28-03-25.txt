22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
important point 
When the VSALocal update is completed in VSADemo, move all the data to Vvsalocal, vsademo ```start . Similarly, continue moving data from VSADemo to VSALive

Comment all places on vsademo and uncomment on vsalive 

#1
   app\Http\Controllers\ApplyleaveController.php
   app\Http\Controllers\TimesheetController.php

   itsupport_delhi@vsa.co.in  ise comment kar de and add own mail on vsademo sukhbahadur1993@gmail.com

#2
     agar is per koi bhi update ho to profile me 10th and 12th ka documnet check karle ek baar ye baar baar problem aata hai 
     independence ke ander create and view file insert karna hai 
     IndependenceController.php
     TeammemberController (1).php

Please check once vsalive bugs hare file


composer require maennchen/zipstream-php
;extension=gd
SHA100054
BIR100318
BIR100405

assignmentbudgetings
assignmentmappings
assignmentteammappings
assignmentfolderfiles
assignmentfolders

this file inside vsademo temp/ download issue 

vsalocal, vsademo, vsalive ```start 
Data Download issue - Ajit Ranjan ```start hare
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentfolderfileController.php


use App\Models\Assignmentfolderfile;
use ZipArchive;
// use File;
use App\Jobs\CreateAllzip;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Redirect;
use ZipStream\Option\Archive;
use ZipStream\Option\File;
use STS\ZipStream\ZipStreamFacade as ZipStreamcreate;
use ZipStream\ZipStream;
use ZipStream\Option\Archive as ZipOptions;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Symfony\Component\HttpFoundation\StreamedResponse;


	       //! s3 connection on live 
    public function createzipfolder(Request $request)
    {
        // Fetch assignment folder data
        $assignmentfoldername = DB::table('assignmentfolders')
            ->leftJoin('assignmentfolderfiles', 'assignmentfolderfiles.assignmentfolder_id', 'assignmentfolders.id')
            ->where('assignmentfolders.assignmentgenerateid', $request->assignmentgenerateid)
            ->select('assignmentfolders.*', 'assignmentfolderfiles.filesname', 'assignmentfolderfiles.realname')
            ->get();

        // Set ZIP file name
        $zipFileName = $request->assignmentgenerateid . '.zip';

        // Streamed response for downloading the zip file
        return new StreamedResponse(function () use ($assignmentfoldername, $zipFileName) {
            // Configure ZipStream options
            $options = new ZipOptions();
            $options->setSendHttpHeaders(true); // Send headers automatically
            $options->setZeroHeader(true); // Optimize for streaming large files
            $options->setLargeFileSize(1024 * 1024 * 100); // Define "large" as 100 MB for special handling

            // Initialize ZipStream
            $zip = new ZipStream($zipFileName, $options);

            foreach ($assignmentfoldername as $folder) {
                if (!empty($folder->filesname)) {
                    // Generate S3 file path
                    $s3Path = $folder->assignmentgenerateid . '/' . $folder->filesname;

                    // Check if file exists on S3
                    if (Storage::disk('s3')->exists($s3Path)) {
                        // Get a stream directly from S3 instead of using temporaryUrl
                        $fileStream = Storage::disk('s3')->readStream($s3Path);

                        if ($fileStream) {
                            // Add file to zip directly from stream (no need to buffer entire file in memory)
                            $zip->addFileFromStream(
                                $folder->assignmentfoldersname . '/' . $folder->realname,
                                $fileStream
                            );
                            fclose($fileStream); // Close the stream after adding
                        }
                    }
                } else {
                    // Add an empty directory (ZipStream supports this directly)
                    //$zip->addEmptyDir($folder->assignmentfoldersname);

                    $zip->addFile($folder->assignmentfoldersname . '/', '');
                }
            }

            // Finalize the zip stream
            $zip->finish();
        }, 200, [
            'Content-Type' => 'application/octet-stream',
            'Content-Disposition' => 'attachment; filename="' . $zipFileName . '"',
        ]);
    }
	
	
	
	
	
	
	
	
	
	

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentfolder\zipcreatedwaiting.blade.php



<script>
    $(document).ready(function() {
        var assignmentgenerateid1 = '{{ $assignmentgenerateid }}';
 
        // Show waiting message
        $('#loadingMessage').show();
 
        // Redirect user to download the zip
        window.location.href = '/createzipfolder?assignmentgenerateid=' + assignmentgenerateid1;
 
        // Show afterzipcreated div after 3 seconds
        setTimeout(function() {
            $('#loadingMessage').hide();
            $('#afterzipcreated').show();
        }, 3000);
    });
</script>


 






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentfolder\zipcreatedwaiting.blade.php



            <div class="card-body">
                @if (isset($message))
                    <div class="text-danger">
                        {{ $message }}
                    </div>
                @endif
                <div class="row">
                    {{-- waiting message  --}}
                    <div id="loadingMessage" style="display:none; margin-bottom: 10px;" class="text-success">
                        Creating your zip file. Please wait...
                    </div>
                    <div id="afterzipcreated" style="display:none; margin-bottom: 10px;" class="text-success">
                        ZIP file created successfully. Your download will start automatically.
                    </div>
                    {{-- display file name that was created --}}
                    <div id="createdzipfile" style="display:none; margin-bottom: 10px;">
                    </div>
                </div>
            </div>
			
			
			
			
			
			
			
			
			
			
			
			
			
			
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentfolderfile\index.blade.php

 <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right"
                style="width: {{ isset($assignmentfolderfile[0]->assignmentfolder_id) && $assignmentbudgeting->status == 1 ? '400px' : '277px' }};">



 <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right">



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentfolder\index.blade.php



            <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right"
                style="width: {{ $assignmentfolderpermission->status == 1 && $assignmentfolder->isNotEmpty() ? '369px' : '202px' }};">


  <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right">



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentfolderfileController.php

     //! s3 connection on live 
    public function store(Request $request)
    {
        //dd($request);
        $request->validate([
            'particular' => 'required',
            'file' => 'required',
        ]);

        try {
            $data = $request->except(['_token']);
            $files = [];

            // vsalocal s3 remove
            // if ($request->hasFile('file')) {
            //     foreach ($request->file('file') as $file) {
            //         $realname = $file->getClientOriginalName();
            //         $name = time() . $realname;
            //         $destinationPath = storage_path('app/public/image/task');
            //         $sizeKB = round($file->getSize() / 1024, 2);
            //         $file->move($destinationPath, $name);
            //         $files[] = [
            //             'realname' => $realname,
            //             'name' => $name,
            //             'size' => $sizeKB,
            //         ];
            //     }
            // }

            // vsademo s3 added
            if ($request->hasFile('file')) {
                foreach ($request->file('file') as $file) {
                    $realname = $file->getClientOriginalName();
                    $name = time() . $realname;
                    $path = $file->storeAs($request->assignmentgenerateid, $name, 's3');
                    $files[] = [
                        'name' => $name,
                        'realname' => $realname,
                        'size' => round($file->getSize() / 1024, 2),

                    ];
                }
            }

            // dd($files);
            foreach ($files as $filess) {
                // dd($files); die;
                $s = DB::table('assignmentfolderfiles')->insert([
                    'particular' => $request->particular,
                    'assignmentgenerateid' => $request->assignmentgenerateid,
                    'assignmentfolder_id' =>  $request->assignmentfolder_id,
                    'createdby' =>  auth()->user()->teammember_id,
                    'filesname' =>  $filess['name'],
                    'realname' =>  $filess['realname'],
                    'filesize' => $filess['size'],
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s')
                ]);
            }
            //dd($data);
            $output = array('msg' => 'Submit Successfully');
            return back()->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentfolderfileController.php

        $assignmentbudgeting = DB::table('assignmentbudgetings')
            ->where('assignmentgenerate_id', $foldername->assignmentgenerateid)->first();

        $teamleader = DB::table('assignmentmappings')
            ->join('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
            ->where('assignmentmappings.assignmentgenerate_id', $foldername->assignmentgenerateid)
            ->where('type', 0)->pluck('teammember_id')->first();

        return view('backEnd.assignmentfolderfile.index', compact('teamleader', 'assignmentbudgeting', 'assignmentfolderfile', 'id', 'foldername', 'financial'));
			
			
			
			
			
			
			
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentfolderfile\index.blade.php	
			
			
<script>
    $(document).ready(function() {
        $('#examplee').DataTable({
            "order": [],
            columnDefs: [{
                targets: [
                    0, 1, 2, 3
                    @if (Auth::user()->role_id == 13 || Auth::user()->role_id == 14 || $teamleader == Auth::user()->teammember_id)
                        @if ($assignmentbudgeting->status == 1)
                            , 5
                        @endif
                    @endif
                ],
                orderable: false
            }],
            buttons: []
        });
    });
</script>		
			
			
			
			

Data Download issue - Ajit Ranjan ```end hare
vsalocal, vsademo, vsalive ```end 





Partner role will be display on assignment view page ```start
vsalocal, vsademo, vsalive ```start  
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\StepController.php	
find   $partner = $leadpartner->merge($otherpartner)->merge($teammpartner)
replace  $partner varable related 3 varables



          $leadpartner = DB::table('assignmentmappings')
            ->join('teammembers as team', 'team.id', 'assignmentmappings.leadpartner')
            ->leftJoin('titles', 'titles.id', '=', 'team.title_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->select('team.id', 'team.team_member', 'team.staffcode',  'team.mobile_no', 'team.role_id', 'assignmentmappings.leadpartnerhour as assignmenthour', 'titles.title', 'assignmentmappings.created_at as createdat', 'assignmentmappings.leadpartner as leadpartner')
            ->get();



        $otherpartner = DB::table('assignmentmappings')
            ->join('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->leftJoin('titles', 'titles.id', '=', 'team.title_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->select('team.id', 'team.team_member', 'team.staffcode', 'team.mobile_no', 'team.role_id', 'assignmentmappings.otherpartnerhour as assignmenthour', 'titles.title', 'assignmentmappings.created_at as createdat', 'assignmentmappings.otherpartner as otherpartner')
            ->get();


        $teammpartner = DB::table('assignmentteammappings')
            ->join('assignmentmappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
            ->join('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
            ->leftJoin('titles', 'titles.id', '=', 'teammembers.title_id')
            ->leftJoin('roles', 'roles.id', '=', 'teammembers.role_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->whereNotNull('assignmentteammappings.id')
            ->where('assignmentteammappings.type', '=', 1)
            ->select([
                'teammembers.id',
                'teammembers.team_member',
                'teammembers.staffcode',
                'teammembers.mobile_no',
                'teammembers.role_id',
                'assignmentteammappings.teamhour as assignmenthour',
                'assignmentteammappings.created_at as createdat',
                'titles.title',
                'assignmentteammappings.type as additionalpartner',
            ])
            ->orderByDesc('assignmentteammappings.id')
            ->get();


        $partner = $leadpartner->merge($otherpartner)->merge($teammpartner)
            ->sortByDesc('createdat')
            // ->sortBy('createdat')
            ->values();
			
			
			
			
			





			
			
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\viewassignment.blade.php
 @if ($partnerData->role_id == 13)
 replace td 



                                                        <td class="textfixed">
                                                            @if ($partnerData->role_id == 13)
                                                                @if (!empty($partnerData->additionalpartner))
                                                                    <span>Additional Partner</span>
                                                                @elseif(!empty($partnerData->otherpartner))
                                                                    <span>Other Partner</span>
                                                                @elseif(!empty($partnerData->leadpartner))
                                                                    <span>Lead Partner</span>
                                                                @endif
                                                            @else
                                                                <span>NA</span>
                                                            @endif
                                                        </td>
									
										
		
		
		

		
										
Partner role will be display on assignment view page ```end 

									



Error in "Time Sheet Report". Time sheet days and hours are calculated wrongly in the report. ``` start
vsalocal, vsademo, vsalive ```start 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php
 foreach ($get_six_Data as $getsixdata) {  and 
 
 add this code before foreach ($get_six_Data as $getsixdata) { and after  } else {
 
 
 1
 
 

                        // Step 1: Filter only Monday dates and make them unique and ensures the code only runs once per Monday
                        $mondays = collect($get_six_Data)
                            ->filter(function ($item) {
                                return Carbon::parse($item->date)->format('l') === 'Monday';
                            })
                            ->unique('date');

                        foreach ($mondays as $timesheetreportupdate) {
                            // Convert the requested date to a Carbon instance
                            $requestedDate = Carbon::createFromFormat('Y-m-d', $timesheetreportupdate->date);
                            $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                            // Find the nearest next Saturday to the requested date
                            $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                            // Format the dates in 'Y-m-d' format
                            $previousMondayFormatted = $timesheetreportupdate->date;
                            $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                            $nextSaturdayFormatted = $lastdate;


                            $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));
                            $co = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                ->groupBy('partner')
                                ->get();

                            foreach ($co as $codata) {
                                DB::table('timesheetreport')->insert([
                                    'teamid'       =>     auth()->user()->teammember_id,
                                    'week'       =>     $week,
                                    'totaldays'       =>     $codata->row_count,
                                    'totaltime' =>  $codata->total_hours,
                                    'partnerid'  => $codata->partner,
                                    'startdate'  => $previousMondayFormatted,
                                    'enddate'  => $nextSaturdayFormatted,
                                    // 'created_at'                =>       date('y-m-d'),
                                    'created_at'                =>      date('y-m-d H:i:s'),
                                ]);
                            }

                            $totaldays = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('date')
                                ->groupBy('date')
                                ->get();

                            $totaldaysCount = $totaldays->count();
                            $latesttimesheetreport = DB::table('timesheetreport')
                                ->where('teamid', auth()->user()->teammember_id)
                                ->where('startdate', $previousMondayFormatted)
                                ->first();

                            if ($latesttimesheetreport) {
                                DB::table('timesheetreport')
                                    ->where('id', $latesttimesheetreport->id)
                                    ->update(['dayscount' => $totaldaysCount]);
                            }
                        }                        









and  remove all code between 


                        foreach ($get_six_Data as $getsixdata) {

                            DB::table('timesheetusers')->where('timesheetid', $getsixdata->timesheetid)->update([
                                'status'         =>     1,
                                'updated_at'              =>   date('y-m-d H:i:s'),
                            ]);
                            DB::table('timesheets')->where('id', $getsixdata->timesheetid)->update([
                                'status'         =>     1,
                                'updated_at'              =>   date('y-m-d H:i:s'),
                            ]);

                            // Attendance code start hare 











2


add this code before foreach ($get_six_Data as $getsixdata) { and after  } else {
 
 
 1
 
 

                    // Step 1: Filter only Monday dates and make them unique and ensures the code only runs once per Monday
                    $mondays = collect($get_six_Data)
                        ->filter(function ($item) {
                            return Carbon::parse($item->date)->format('l') === 'Monday';
                        })
                        ->unique('date');

                    foreach ($mondays as $timesheetreportupdate) {
                        // Convert the requested date to a Carbon instance
                        $requestedDate = Carbon::createFromFormat('Y-m-d', $timesheetreportupdate->date);
                        $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                        // Find the nearest next Saturday to the requested date
                        $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                        // Format the dates in 'Y-m-d' format
                        $previousMondayFormatted = $timesheetreportupdate->date;
                        $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                        $nextSaturdayFormatted = $lastdate;


                        $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));
                        $co = DB::table('timesheetusers')
                            ->where('createdby', auth()->user()->teammember_id)
                            ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                            ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                            ->groupBy('partner')
                            ->get();

                        foreach ($co as $codata) {
                            DB::table('timesheetreport')->insert([
                                'teamid'       =>     auth()->user()->teammember_id,
                                'week'       =>     $week,
                                'totaldays'       =>     $codata->row_count,
                                'totaltime' =>  $codata->total_hours,
                                'partnerid'  => $codata->partner,
                                'startdate'  => $previousMondayFormatted,
                                'enddate'  => $nextSaturdayFormatted,
                                // 'created_at'                =>       date('y-m-d'),
                                'created_at'                =>      date('y-m-d H:i:s'),
                            ]);
                        }

                        $totaldays = DB::table('timesheetusers')
                            ->where('createdby', auth()->user()->teammember_id)
                            ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                            ->select('date')
                            ->groupBy('date')
                            ->get();

                        $totaldaysCount = $totaldays->count();
                        $latesttimesheetreport = DB::table('timesheetreport')
                            ->where('teamid', auth()->user()->teammember_id)
                            ->where('startdate', $previousMondayFormatted)
                            ->first();

                        if ($latesttimesheetreport) {
                            DB::table('timesheetreport')
                                ->where('id', $latesttimesheetreport->id)
                                ->update(['dayscount' => $totaldaysCount]);
                        }
                    }










and  remove all code between 



                    foreach ($get_six_Data as $getsixdata) {
                        DB::table('timesheetusers')->where('timesheetid', $getsixdata->timesheetid)->update([
                            'status'         =>     1,
                            'updated_at'              =>   date('y-m-d H:i:s'),
                        ]);
                        DB::table('timesheets')->where('id', $getsixdata->timesheetid)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d H:i:s'),
                        ]);

                        // Attendance code start hare 
							
				

				
Error in "Time Sheet Report". Time sheet days and hours are calculated wrongly in the report.  ```end 









1





Required OTP to be received to other partner along with Lead Partner, while "Closing an Assignment" and "Confirmation Module"  ```start 
vsademo ```start 			  
2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
final otp done hare 
resources\views\backEnd\assignmentconfirmation\index.blade.php

					  
1			1```

data-onstyle="info" data-offstyle="danger" onchange="updateConfirmationStatus(this)">
					  

                      @if (auth()->user()->role_id == 13)
                          <div>
                              <span style="color:white;" class="fs-17 font-weight-600 mb-0">Confirmation:</span>
                              <input type="checkbox" id="toggle-status-{{ $clientList->id }}"
                                  {{ $clientList->balanceconfirmationstatus ? 'checked' : '' }} data-toggle="toggle"
                                  data-style="ios" data-id="{{ $clientList->id }}" data-on="Open" data-off="Close"
                                  data-onstyle="info" data-offstyle="danger" onchange="updateConfirmationStatus(this)">
                          </div>
                      @else
                          <div>
                              <span style="color:white;" class="fs-17 font-weight-600 mb-0">Confirmation:</span>
                              <input type="checkbox" id="toggle-status-{{ $clientList->id }}"
                                  {{ $clientList->balanceconfirmationstatus ? 'checked' : '' }} data-toggle="toggle"
                                  data-style="ios" data-id="{{ $clientList->id }}" data-on="Open" data-off="Close"
                                  data-onstyle="info" data-offstyle="danger" onchange="managervarification(this)">
                          </div>
                      @endif
	



	
					  
					  
					  
2   2```
				  



    <script>
      function managervarification(checkbox) {
          const assignmentId = "{{ $clientList->assignmentgenerate_id }}";
          const balanceconfirmationcheck = parseInt("{{ $clientList->balanceconfirmationstatus }}");
          const status = checkbox.checked ? 1 : 0;

          console.log("Balance Status:", balanceconfirmationcheck, "Checkbox Status:", status);

          if (balanceconfirmationcheck === 1 && status === 1) {
              alert('Your balance confirmation is already open.');
              return; // prevent modal
          }

          if (balanceconfirmationcheck === 0 && status === 0) {
              alert('Your balance confirmation is already closed.');
              return; // prevent modal
          }

          // Show modal only if no alerts triggered
          $('#managervarificationmodal').modal('show');
      }
  </script>












  
3    3```

 <div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog"
 afret this modal add below code 
 
                      <!-- Modal -->
                      <div class="modal fade" id="managervarificationmodal" tabindex="-1" role="dialog"
                          aria-labelledby="confirmationModalLabel" aria-hidden="true">
                          <div class="modal-dialog" role="document">
                              <div class="modal-content">
                                  <div class="modal-header">
                                      <h5 class="modal-title" id="confirmationModalLabel">Verification Form</h5>
                                      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                          <span aria-hidden="true">&times;</span>
                                      </button>
                                  </div>
                                  <div class="modal-body">

                                      <div
                                          style="width: 100%; border-radius: 10px; height: 100%; padding: 16px; background: white; box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.25);  flex-direction: column; justify-content: flex-start; align-items: center; gap: 24px; display: inline-flex ">
                                          <div
                                              style="flex-direction: column; justify-content: flex-start; align-items: center; gap: 16px; display: flex">
                                              <div
                                                  style="flex-direction: column; justify-content: flex-start; align-items: center; gap: 8px; display: flex">

                                                  <div
                                                      style="color: #292D32; font-size: 24px; font-family: Inter; font-weight: 500; word-wrap: break-word">
                                                      OTP Request Form</div>

                                              </div>
                                              <div class="details-form-field  row">

                                                  <div class="col-sm-12">

                                                      <input type="hidden" id="assignmentgenerate_id"
                                                          name="assignmentgenerate_id" class="form-control"
                                                          value="{{ $clientList->assignmentgenerate_id }}">
                                                      {{-- <input type="hidden" id="statusvalue" name="status"
                                                          class="form-control" value="1"> --}}

                                                      <input type="hidden" id="statusvalue" name="status"
                                                          class="form-control"
                                                          value="{{ $clientList->balanceconfirmationstatus == 0 ? '1' : '0' }}">
                                                  </div>
                                              </div>

                                              <div
                                                  style="width: 332px; text-align: center; color: rgb(196 35 33 / 65%); font-size: 18px; font-family: Inter; font-weight: 400; word-wrap: break-word">
                                                  Please choose a partner from the list to proceed with the verification
                                                  process. An OTP will be sent to the selected partner.
                                              </div>
                                          </div>

                                          @if ($errors->any())
                                              <div>
                                                  <ul>
                                                      @foreach ($errors->all() as $e)
                                                          <li style="color:red;">{{ $e }}
                                                          </li>
                                                      @endforeach
                                                  </ul>
                                              </div>
                                          @else
                                          @endif
                                          <div class="col-sm-12">
                                              <div class="form-group">
                                                  <label class="font-weight-600">Partner Name <span
                                                          class="text-danger">*</span></label>
                                                  <select required class="language form-control"
                                                      id="exampleFormControlSelect1" name="otherpatnerid">
                                                      <option value="">Please Select One</option>
                                                      {{-- @foreach ($partners as $teammemberData)
                                                          @php
                                                              $pormotionrejoincheck = DB::table('teamrolehistory')
                                                                  ->where('teammember_id', $teammemberData->teamid)
                                                                  ->first();
                                                          @endphp
                                                          <option value="{{ $teammemberData->teamid }}">
                                                              {{ $teammemberData->team_member }} (
                                                              {{ $permotioncheck->newstaff_code ?? ($teammemberData->staffcode ?? '') }})
                                                          </option>
                                                      @endforeach --}}
                                                      @foreach ($partners as $teammemberData)
                                                          @php
                                                              $role =
                                                                  $teamRoleHistories[$teammemberData->teamid] ?? null;
                                                          @endphp
                                                          <option value="{{ $teammemberData->teamid }}">
                                                              {{ $teammemberData->team_member }}
                                                              ({{ $role->newstaff_code ?? ($teammemberData->staffcode ?? '') }})
                                                          </option>
                                                      @endforeach
                                                  </select>
                                              </div>
                                          </div>

                                          <button type="submit" id="sendOtpBtn" class="btn btn-success">Send
                                              OTP</button>
                                      </div>
                                  </div>
                              </div>
                          </div>
                      </div>
					  
					  
					  
					  
					  
					  
					  
				





				


4    4```
app\Http\Controllers\AssignmentconfirmationController.php

 public function indexview($assignmentgenerate_id)
 after this line     })->collapse();  add below code 
 
 

        $assignmentId = $clientList->assignmentgenerate_id;

        // Lead and Other Partners
        $leadAndOtherPartners = DB::table('assignmentmappings')
            ->join('teammembers', function ($join) {
                $join->on('teammembers.id', '=', 'assignmentmappings.leadpartner')
                    ->orOn('teammembers.id', '=', 'assignmentmappings.otherpartner');
            })
            ->where('assignmentgenerate_id', $assignmentId)
            ->select('teammembers.id as teamid', 'teammembers.team_member', 'teammembers.staffcode');

        // Additional Partners
        $additionalPartners = DB::table('assignmentteammappings')
            ->join('assignmentmappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
            ->join('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
            ->where('assignmentmappings.assignmentgenerate_id', $assignmentId)
            ->where('assignmentteammappings.type', 1)
            ->select('teammembers.id as teamid', 'teammembers.team_member', 'teammembers.staffcode');

        $partners = $leadAndOtherPartners->union($additionalPartners)->get();

        // check promotion and rejoin record
        $teamIds = $partners->pluck('teamid')->toArray();
        $teamRoleHistories = DB::table('teamrolehistory')
            ->whereIn('teammember_id', $teamIds)
            ->get()
            ->keyBy('teammember_id');




		

pass in view  'partners', 'teamRoleHistories'












resources\views\backEnd\assignmentconfirmation\index.blade.php


5    5```

function managervarification(checkbox) {

  <script>
      $(document).ready(function() {
          $('#sendOtpBtn').on('click', function(e) {
              e.preventDefault();

              var assignmentId = "{{ $clientList->assignmentgenerate_id }}";
              var status = $("#statusvalue").val();
              var selectedpartner = $("#exampleFormControlSelect1").val();

              console.log("Assignment ID:", assignmentId);
              console.log("Status:", status);
              console.log("Selected Partner:", selectedpartner);

              if (selectedpartner === "") {
                  alert("Please select a partner.");
                  return;
              }

              $.ajax({
                  url: "{{ url('confirmationotpsend') }}",
                  method: "GET",
                  data: {
                      assignmentid: assignmentId,
                      selectedpartner: selectedpartner,
                      status: status,
                      _token: '{{ csrf_token() }}'
                  },
                  success: function(response) {
                      if ($('#managervarificationmodal').hasClass('show')) {
                          $('#managervarificationmodal').modal('hide');
                      }
                      //   $('#confirmationModal').modal('show');

                      if (status === "0") {
                          $('#confirmationModal').modal('show');
                          if (response.status == 0) {
                              $("#otpmessage").text(response.otpsuccessmessage);
                          } else {
                              $("#errormessage").text(response.otpsuccessmessage);
                              $("#verifyBtn").addClass('disable');
                              $("#yesid").hide();
                          }
                      } else {
                          $('#confirmationModal3').modal('show');
                          if (response.status == 1) {
                              $("#otpmessage1").text(response.otpsuccessmessage);
                          } else {
                              $("#errormessage1").text(response.otpsuccessmessage);
                              $("#verifyBtn1").addClass('disable');
                              $("#noid").hide();
                          }
                      }
                  },
                  error: function() {
                      alert('An error occurred while sending OTP.');
                  }
              });
          });
      });
  </script>
  
  
  
  
  
  
  
  


6  ```6

app\Http\Controllers\AssignmentconfirmationController.php
    public function confirmationotpsend(Request $request)
	$teammembers = DB::table('teammembers')   find and replace it 
	
        if (auth()->user()->role_id == 13) {
            $teammembers = DB::table('teammembers')
                ->where('id', auth()->user()->teammember_id)
                ->select('team_member', 'emailid',)
                ->first();
        } else {
            $teammembers = DB::table('teammembers')
                ->where('id', $request->selectedpartner)
                ->select('team_member', 'emailid',)
                ->first();
        }


  
  
  
  
  
  
  
  
  
7   7```				  

resources\views\backEnd\assignmentconfirmation\index.blade.php
					  
find <div style="width: 332px; text-align: center" class="resends">
 and only add if statment on div 
	

1
                                                  @if (auth()->user()->role_id == 13)
                                                      <div style="width: 332px; text-align: center" class="resends"><span
                                                              style="color: rgba(41, 45, 50, 0.85); font-size: 16px; font-family: Inter; font-weight: 300; word-wrap: break-word">Didn’t
                                                              receive the OTP?</span><span
                                                              style="color: rgba(41, 45, 50, 0.85); font-size: 16px; font-family: Inter; font-weight: 500; word-wrap: break-word">
                                                              <a id="yesid"
                                                                  data-id="{{ $clientList->assignmentgenerate_id }}"
                                                                  data-status="0" data-resend="true"
                                                                  class="font-weight-500" style="color:#37a000;">
                                                                  Resend</a>
                                                          </span>
                                                      </div>
                                                  @endif





2
	


                                                  @if (auth()->user()->role_id == 13)
                                                      <div style="width: 332px; text-align: center" class="resends"><span
                                                              style="color: rgba(41, 45, 50, 0.85); font-size: 16px; font-family: Inter; font-weight: 300; word-wrap: break-word">Didn’t
                                                              receive the OTP?</span><span
                                                              style="color: rgba(41, 45, 50, 0.85); font-size: 16px; font-family: Inter; font-weight: 500; word-wrap: break-word">
                                                              <a id="noid"
                                                                  data-id="{{ $clientList->assignmentgenerate_id }}"
                                                                  data-status="1" data-resend="true"
                                                                  class="font-weight-500" style="color:#37a000;">
                                                                  Resend</a>
                                                          </span>
                                                      </div>
                                                  @endif	
												  
				

				
												  
												  
8    8```

resources\views\backEnd\assignmentconfirmation\index.blade.php
$('#sendOtpBtn').on('click', function(e) {
		
		
  <script>
      $(document).ready(function() {
          $('#managervarificationmodal').on('hidden.bs.modal', function() {
              var formElement = $(this).find('form')[0];
              if (formElement) {
                  formElement.reset();
              }
              // Reset Select2 dropdowns
              $(this).find('select').val(null).trigger('change');
              //   $(this).find('input[type="hidden"]').val('');

          });
      });
  </script>
  
  
  
  
  
  
  
  
  
  
					  
Required OTP to be received to other partner along with Lead Partner, while "Closing an Assignment" and "Confirmation Module" ```end 


bugs timesheet hour wla 
vsalocal, vsademo, vsalive done
2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
public function timesheet_teamlist()
 'totaltime' => $group->sum('totaltime'), after this line add below line 
 
 
 
        'dayscount' => $group->sum('dayscount'),




resources\views\backEnd\timesheet\myteamindex.blade.php
 @if (isset($jobDatas->dayscount) && $jobDatas->dayscount != 0)


                                      @if (Auth::user()->role_id == 11)
                                          @if (isset($jobDatas->dayscount) && $jobDatas->dayscount != 0)
                                              <td>{{ $jobDatas->dayscount }}</td>
                                          @else
                                              <td>{{ $jobDatas->totaldays }}</td>
                                          @endif
                                      @else
                                          @if (isset($jobDatas->dayscount) && $jobDatas->dayscount != 0)
                                              <td>{{ $jobDatas->dayscount }}</td>
                                          @else
                                              <td>{{ $jobDatas->totaldays }}</td>
                                          @endif
                                      @endif

timesheetreport  table se delet this id 
15149
15274
15275
15403

bugs timesheet hour wla end hare 

Need option to fill mutiple days timesheet at once ```start
vsalocal, vsademo, vsalive//..

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


   public function create(Request $request)
  {
    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();
    $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')->get();
    $teammember = Teammember::where('role_id', '!=', 11)->with('title', 'role')->get();
    if (auth()->user()->role_id == 11) {
      $client = Client::where('status', 1)->select('id', 'client_name', 'client_code')->orderBy('client_name', 'ASC')->get();
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();

      $clientssbefore = DB::table('assignmentteammappings')
        ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        // i have add this line becouse manager contain it but staff not contain it so basically after add this code no contain staff and manager 
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      $clientssafter = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();
      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      // if ($holidaydatecheck) {
      //   $clientIds = [29, 32, 33, 34];
      // } else {
      //   // if not holidays then go hare
      //   $dayOfWeek = $selectedDate1->format('w');
      //   if ($selectedDate1->format('l') == 'Saturday') {
      //     $dayOfMonth = $selectedDate1->format('j');
      //     // Calculate which Saturday of the month it is
      //     $saturdayNumber = ceil($dayOfMonth / 7);
      //     // offholiday client name will be show on 2nd and 4rth sturday
      //     if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
      //       $clientIds = [29, 32, 33, 34];
      //     } else {
      //       $clientIds = [29, 32, 34];
      //     }
      //   } else {
      //     $clientIds = [29, 32, 34];
      //   }
      // }

      $clientIds = [29, 32, 33, 34];

      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientssafter->merge($clientssbefore)->merge($clients);
    } elseif (auth()->user()->role_id == 13) {
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();

      $clientss = DB::table('clients')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.client_id', '=', 'clients.id')
        ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', '=', 'assignmentbudgetings.assignmentgenerate_id')
        ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
        ->where('assignmentbudgetings.status', 1)
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id);
        })
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->distinct()
        ->orderBy('clients.client_name', 'ASC')
        ->get();

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      // if ($holidaydatecheck) {
      //   $clientIds = [29, 32, 33, 34];
      // } else {
      //   // if not holidays then go hare
      //   $dayOfWeek = $selectedDate1->format('w');
      //   if ($selectedDate1->format('l') == 'Saturday') {
      //     $dayOfMonth = $selectedDate1->format('j');
      //     // Calculate which Saturday of the month it is
      //     $saturdayNumber = ceil($dayOfMonth / 7);
      //     // offholiday client name will be show on 2nd and 4rth sturday
      //     if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
      //       $clientIds = [29, 32, 33, 34];
      //     } else {
      //       $clientIds = [29, 32, 34];
      //     }
      //   } else {
      //     $clientIds = [29, 32, 34];
      //   }
      // }
      $clientIds = [29, 32, 33, 34];

      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientss->merge($clients);
    } else {
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();

      $clientss = DB::table('assignmentteammappings')
        ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        // i have add this line becouse manager contain it but staff not contain it so basically after add this code no contain staff and manager 
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();

      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      // if ($holidaydatecheck) {
      //   $clientIds = [29, 32, 33, 34];
      // } else {
      //   // if not holidays then go hare
      //   $dayOfWeek = $selectedDate1->format('w');
      //   if ($selectedDate1->format('l') == 'Saturday') {
      //     $dayOfMonth = $selectedDate1->format('j');
      //     // Calculate which Saturday of the month it is
      //     $saturdayNumber = ceil($dayOfMonth / 7);
      //     // offholiday client name will be show on 2nd and 4rth sturday
      //     if (auth()->user()->role_id == 14) {
      //       if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
      //         $clientIds = [29, 32, 33, 34];
      //       } else {
      //         $clientIds = [29, 32, 34];
      //       }
      //     } else {
      //       if ($saturdayNumber == 1.0 || $saturdayNumber == 2.0 || $saturdayNumber == 3.0 || $saturdayNumber == 4.0 || $saturdayNumber == 5.0) {
      //         $clientIds = [29, 32, 33, 34];
      //       }
      //     }
      //   } else {
      //     $clientIds = [29, 32, 34];
      //   }
      // }
      $clientIds = [29, 32, 33, 34];

      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientss->merge($clients);
    }
    $assignment = Assignment::select('id', 'assignment_name')->get();
    if ($request->ajax()) {

      if (isset($request->timesheetdate)) {
        if ($permotioncheck && auth()->user()->role_id == 13) {
          echo "<option value=''>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);


          $clientssbefore = DB::table('assignmentteammappings')
            ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          $clientssafter = DB::table('assignmentmappings')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->where(function ($query) {
              $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
            })
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            // ->whereNotNull('clients.client_name')
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // if you selected sturday date then offholydays client will be show otherwise not

          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          // if ($holidaydatecheck) {
          //   $clientIds = [29, 32, 33, 34];
          // } else {
          //   // if not holidays then go hare
          //   $dayOfWeek = $selectedDate1->format('w');
          //   if ($selectedDate1->format('l') == 'Saturday') {
          //     $dayOfMonth = $selectedDate1->format('j');
          //     // Calculate which Saturday of the month it is
          //     $saturdayNumber = ceil($dayOfMonth / 7);
          //     // offholiday client name will be show on 2nd and 4rth sturday
          //     if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
          //       $clientIds = [29, 32, 33, 34];
          //     } else {
          //       $clientIds = [29, 32, 34];
          //     }
          //   } else {
          //     $clientIds = [29, 32, 34];
          //   }
          // }

          $clientIds = [29, 32, 33, 34];
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          // $client = $clientss->merge($clients);
          $client = $clientssafter->merge($clientssbefore)->merge($clients);
          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        } elseif (auth()->user()->role_id == 13) {
          echo "<option value=''>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);

          $clientss = DB::table('assignmentmappings')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->where(function ($query) {
              $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id)
                ->orWhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id);
            })
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            // ->whereNotNull('clients.client_name')
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // if you selected sturday date then offholydays client will be show otherwise not

          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          // if ($holidaydatecheck) {
          //   $clientIds = [29, 32, 33, 34];
          // } else {
          //   // if not holidays then go hare
          //   $dayOfWeek = $selectedDate1->format('w');
          //   if ($selectedDate1->format('l') == 'Saturday') {
          //     $dayOfMonth = $selectedDate1->format('j');
          //     // Calculate which Saturday of the month it is
          //     $saturdayNumber = ceil($dayOfMonth / 7);
          //     // offholiday client name will be show on 2nd and 4rth sturday
          //     if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
          //       $clientIds = [29, 32, 33, 34];
          //     } else {
          //       $clientIds = [29, 32, 34];
          //     }
          //   } else {
          //     $clientIds = [29, 32, 34];
          //   }
          // }

          $clientIds = [29, 32, 33, 34];

          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          $client = $clientss->merge($clients);

          // foreach ($client as $clients) {
          //   if ($clients->client_name !== 'Official Travel') {
          //     echo "<option value='" . $clients->id . "'>" . $clients->client_name . ' ( ' . $clients->client_code . ' )' . "</option>";
          //   }
          // }

          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        } else {

          echo "<option value=''>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $clientss = DB::table('assignmentteammappings')
            ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();
          // ->get();

          // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // $client = $clientss->merge($clients);



          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          // if ($holidaydatecheck) {
          //   $clientIds = [29, 32, 33, 34];
          // } else {
          //   // if not holidays then go hare
          //   $dayOfWeek = $selectedDate1->format('w');
          //   if ($selectedDate1->format('l') == 'Saturday') {
          //     $dayOfMonth = $selectedDate1->format('j');
          //     // Calculate which Saturday of the month it is
          //     $saturdayNumber = ceil($dayOfMonth / 7);
          //     // offholiday client name will be show on 2nd and 4rth sturday
          //     if (auth()->user()->role_id == 14) {
          //       if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
          //         $clientIds = [29, 32, 33, 34];
          //       } else {
          //         $clientIds = [29, 32, 34];
          //       }
          //     } else {
          //       if ($saturdayNumber == 1.0 || $saturdayNumber == 2.0 || $saturdayNumber == 3.0 || $saturdayNumber == 4.0 || $saturdayNumber == 5.0) {
          //         $clientIds = [29, 32, 33, 34];
          //       }
          //     }
          //   } else {
          //     $clientIds = [29, 32, 34];
          //   }
          // }

          $clientIds = [29, 32, 33, 34];
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          $client = $clientss->merge($clients);

          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        }
      }

      if (isset($request->cid)) {
        if ($permotioncheck && auth()->user()->role_id == 13) {
          echo "<option value=''>Select Assignment</option>";

          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();

            $id = $clients[0]->id;
            $assignments = DB::table('assignmentbudgetings')->where('client_id', $id)
              ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignments.assignmentname')
              ->orderBy('assignment_name');
          } else {
            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            $assignments = DB::table('assignmentbudgetings')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->where(function ($query) {
                $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                  ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignmentbudgetings.assignmentname');

            $additionalAssignments = DB::table('assignmentbudgetings')
              ->join('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->leftJoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
              ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              ->where(function ($query) {
                $query->whereNull('assignmentteammappings.status')
                  ->orWhere('assignmentteammappings.status', '=', 1);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignmentbudgetings.assignmentname');

            $assignments = $assignments->union($additionalAssignments)->orderBy('assignment_name')->get();
            // dd($assignments);
          }

          foreach ($assignments as $sub) {
            echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
          }
        } elseif (auth()->user()->role_id == 13) {

          echo "<option value=''>Select Assignment</option>";
          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              // ->whereIn('id', [29, 32, 33, 34])
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();
            // dd($clients);
            $id = $clients[0]->id;
            foreach (
              DB::table('assignmentbudgetings')->where('client_id', $id)
                ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
                ->orderBy('assignment_name')->get() as $sub
            ) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          } else {
            // dd('hi 3');

            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);
            // dd($selectedDate);
            foreach (
              DB::table('assignmentbudgetings')
                ->select(
                  'assignmentbudgetings.assignmentgenerate_id',
                  'assignments.assignment_name',
                  'assignmentbudgetings.assignmentname'
                )
                ->where('assignmentbudgetings.client_id', $request->cid)
                ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
                ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
                ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
                ->where(function ($query) {
                  $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                    ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id)
                    ->orWhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id);
                })
                ->where(function ($query) use ($selectedDate) {
                  $query->whereNull('otpverifydate')
                    ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
                })
                ->orderBy('assignment_name')
                ->distinct() // Ensure unique rows
                ->get() as $sub
            ) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          }
        } else {

          echo "<option value=''>Select Assignment</option>";

          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              // ->whereIn('id', [29, 32, 33, 34])
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();
            // dd($clients);
            $id = $clients[0]->id;
            foreach (
              DB::table('assignmentbudgetings')->where('client_id', $id)
                ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
                ->orderBy('assignment_name')->get() as $sub
            ) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          } else {
            //  i have add this code after kartic bindal problem 
            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            foreach (
              DB::table('assignmentbudgetings')
                ->join('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->where('assignmentbudgetings.client_id', $request->cid)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                //  ->where('assignmentteammappings.status', '!=', 0)
                // ->whereNull('assignmentteammappings.status')
                ->where(function ($query) {
                  $query->whereNull('assignmentteammappings.status')
                    ->orWhere('assignmentteammappings.status', '=', 1);
                })
                ->where(function ($query) use ($selectedDate) {
                  $query->whereNull('otpverifydate')
                    //   ->orWhere('otpverifydate', '>=', $selectedDate);
                    // // ->orWhere('otpverifydate', '>=', $selectedDate);
                    ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
                })
                ->orderBy('assignment_name')->get() as $sub
            ) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          }
        }
      }

      if (isset($request->assignment)) {
        // dd($request->assignment);
        if (auth()->user()->role_id == 11) {
          echo "<option value=''>Select Partner</option>";
          foreach (
            DB::table('assignmentmappings')

              ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
              ->leftjoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
              ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
              ->select('team.team_member as team_member', 'team.id', 'teammembers.id', 'teammembers.team_member')
              ->get() as $subs
          ) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } elseif ($permotioncheck && auth()->user()->role_id == 13) {
          echo "<option value=''>Select Partner</option>";
          // dd($request->assignment);
          $partnerbefore = DB::table('assignmentmappings')
            ->leftJoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->leftJoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('teammembers.id', 'teammembers.team_member');

          // $partnerafter = DB::table('assignmentmappings')
          //   ->leftJoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
          //   ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
          //   ->select('teammembers.id', 'teammembers.team_member');

          $partnerafter = DB::table('assignmentmappings')
            ->leftJoin('teammembers as leadpartner', 'leadpartner.id', '=', 'assignmentmappings.leadpartner')
            ->leftJoin('teammembers as otherpartner', 'otherpartner.id', '=', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->where(function ($query) {
              $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
            })
            ->select(DB::raw("
            CASE
                WHEN assignmentmappings.leadpartner = " . auth()->user()->teammember_id . " THEN leadpartner.id
                WHEN assignmentmappings.otherpartner = " . auth()->user()->teammember_id . " THEN otherpartner.id
            END as id,
            CASE
                WHEN assignmentmappings.leadpartner = " . auth()->user()->teammember_id . " THEN leadpartner.team_member
                WHEN assignmentmappings.otherpartner = " . auth()->user()->teammember_id . " THEN otherpartner.team_member
            END as team_member
        "));

          $partnerresult = $partnerafter->union($partnerbefore)->get();
          foreach ($partnerresult as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } elseif (auth()->user()->role_id == 13) {
          echo "<option value=''>Select Partner</option>";
          foreach (
            DB::table('teammembers')
              ->where('id', auth()->user()->teammember_id)
              ->select('teammembers.id', 'teammembers.team_member')
              ->get() as $subs
          ) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } else {

          echo "<option value=''>Select Partner</option>";
          foreach (
            DB::table('assignmentmappings')

              ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
              ->leftjoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
              ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
              ->select('team.team_member as team_member', 'team.id', 'teammembers.id', 'teammembers.team_member')
              ->get() as $subs
          ) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        }
      }
    } else {

      $authUserId = auth()->user()->teammember_id;

      // Fetch common data
      $lasttimesheetsubmiteddata = DB::table('timesheetreport')
        ->where('teamid', $authUserId)
        ->latest()
        ->first();

      $datanotexistaftermonday = null;
      if ($lasttimesheetsubmiteddata) {
        $carbondate = Carbon::parse($lasttimesheetsubmiteddata->enddate);
        $nextMonday = $carbondate->copy()->next(Carbon::MONDAY);
        $timesheetRecordcheck = DB::table('timesheetusers')
          ->where('status', '0')
          ->where('createdby', $authUserId)
          ->where('date', $nextMonday->format('Y-m-d'))
          ->exists();

        if (!$timesheetRecordcheck) {
          $datanotexistaftermonday = $nextMonday->format('Y-m-d');
        }
      }

      $timesheetmaxDateRecord = DB::table('timesheetusers')
        ->where('status', '0')
        ->where('createdby', $authUserId)
        ->orderBy('date', 'desc')
        ->get();



      // Available dates extract hare
      $availableDates = $timesheetmaxDateRecord->pluck('date')->toArray();

      $dateSelectionresult = null;
      if (!empty($availableDates)) {
        // Min aur Max Date get
        $minDate = Carbon::parse(min($availableDates));
        $maxDate = Carbon::parse(max($availableDates));

        // Continuous date range generate
        $allDates = [];
        while ($minDate->lte($maxDate)) {
          $allDates[] = $minDate->toDateString();
          $minDate->addDay();
        }

        // dd($availableDates);
        // Missing dates find
        $missingDates = array_diff($allDates, $availableDates);
        // First missing date get hare
        $dateSelectionresult = reset($missingDates);

        if (!$dateSelectionresult) {
          $decrementonedays = $maxDate->copy()->addDay()->toDateString();
          $dateSelectionresult = $decrementonedays;
        }
      }

      // Fetch rejoining data
      $rejoiningdate = $this->getRejoiningDate($authUserId, $lasttimesheetsubmiteddata);


      $newteammember = null;
      if (!$lasttimesheetsubmiteddata) {
        // Fetch new team member joining date
        $newteammember = DB::table('teammembers')
          ->where('id', $authUserId)
          ->value('joining_date');
      }

      return view('backEnd.timesheet.create', compact('client', 'teammember', 'assignment', 'partner', 'timesheetrejectData', 'lasttimesheetsubmiteddata', 'timesheetmaxDateRecord', 'newteammember', 'rejoiningdate', 'dateSelectionresult', 'datanotexistaftermonday'));
    }
  }









22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\create.blade.php

replace all code hare 


 <!--Third party Styles(used by this page)-->
 <link href="{{ url('backEnd/plugins/select2/dist/css/select2.min.css') }}" rel="stylesheet">
 <link href="{{ url('backEnd/plugins/select2-bootstrap4/dist/select2-bootstrap4.min.css') }}" rel="stylesheet">
 <link href="{{ url('backEnd/plugins/jquery.sumoselect/sumoselect.min.css') }}" rel="stylesheet">

 <style>
     tr td:first-child a.ui-state-default {
         /* background-color: rgb(234, 0, 0) !important; */
         background-image: linear-gradient(to right, #34b4e5, rgba(255, 0, 0, 1));
         color: white !important;
     }

     tr th:first-child span {
         color: rgb(249, 5, 5) !important;
     }
 </style>

 @extends('backEnd.layouts.layout') @section('backEnd_content')
     <div class="body-content">
         <div class="row">
             <div class="col-md-12 col-lg-12">
                 <div class="card mb-4">
                     <form method="post" action="{{ route('timesheet.store') }}" enctype="multipart/form-data"
                         id="timesheet-form">
                         @csrf
                         <div class="card-header" style="background:#37A000">
                             <div class="d-flex justify-content-between align-items-center">
                                 <div class="col-md-6">
                                     <h6 style="color: white" class="fs-17 font-weight-600 mb-0">Add Timesheet</h6>
                                 </div>

                                 <div class="col-md-5 d-flex align-items-center gap-3">
                                     <p style="color: white; margin-right: 15px;">
                                         <b>From Date:</b>
                                         <input type="text" id="datepickers1" name="todate" readonly>
                                     </p>

                                     <p style="color: white;">
                                         <b>To Date:</b>
                                         <input type="text" id="datepickers2" name="fromdate" readonly>
                                     </p>
                                 </div>
                             </div>
                         </div>
                         <div class="card-body">
                             @if ($timesheetrejectData && $timesheetrejectData->status == 2)
                                 <div class="text-center">
                                     <a href="{{ url('rejectedlist') }}" class="text-danger font-weight-bold">Please submit
                                         your rejected timesheet</a>
                                 </div>
                             @endif
                             @component('backEnd.components.alert')
                             @endcomponent
                             @include('backEnd.timesheet.form')
                             <hr class="my-4">
                         </div>
                     </form>
                 </div>
             </div>
         </div>
     </div>
 @endsection

 <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

 <script>
     $(document).ready(function() {
         function generateFields(date1Str, date2Str, existingDates = []) {
             let date1Parts = date1Str.split("-");
             let date2Parts = date2Str.split("-");

             let formattedDate1 = new Date(`${date1Parts[2]}-${date1Parts[1]}-${date1Parts[0]}`);
             let formattedDate2 = new Date(`${date2Parts[2]}-${date2Parts[1]}-${date2Parts[0]}`);

             let timeDifference = formattedDate2 - formattedDate1;
             let differenceDays = timeDifference / (1000 * 60 * 60 * 24);

             let fieldContainer = $("#fieldContainer");
             fieldContainer.empty();

             for (let i = 0; i <= differenceDays; i++) {
                 let currentDate = new Date(formattedDate1);
                 currentDate.setDate(currentDate.getDate() + i);

                 let formattedDate = ('0' + currentDate.getDate()).slice(-2) + '-' +
                     ('0' + (currentDate.getMonth() + 1)).slice(-2) + '-' +
                     currentDate.getFullYear();

                 if (existingDates.includes(formattedDate)) {
                     continue;
                 }

                 let fieldHtml = `
                <div class="field_wrapper p-3 mb-4" data-index="${i+1}" style="border: 1px solid #ddd; box-shadow: 0 2px 8px rgba(0,0,0,0.1); border-radius: 8px;">
                    <div class="row row-sm mb-2">
                        <div class="col-2">
                            <input type="text" id="day${i+1}" name="day${i+1}" class="form-control" value="${formattedDate}" readonly>
                        </div>
                        <div class="col-2">
                            <input type="text" class="time form-control" id="totalhours${i+1}" name="totalhour${i+1}" value="{{ $timesheet->hour ?? '0' }}" autocomplete="off" readonly>
                        </div>
                    </div>
                    <div class="row row-sm showdiv${i+1}" id="additionalFields${i+1}">
                        <div class="col-2">
                            <div class="form-group">
                                <label class="font-weight-600">Client Name <span class="text-danger">*</span></label>
                                <select class="language form-control refresh" name="client_id${i+1}[]" id="client${i+1}">
                                    <option value="">Select Client</option>
                                    @foreach ($client as $clientData)
                                        <option value="{{ $clientData->id }}">{{ $clientData->client_name }} ({{ $clientData->client_code }})</option>
                                    @endforeach
                                </select>
                            </div>
                        </div>
                        <div class="col-2">
                            <div class="form-group">
                                <label class="font-weight-600">Assignment Name <span class="text-danger">*</span></label>
                                <select class="form-control key refreshoption assignmentvalue${i+1}" name="assignment_id${i+1}[]" id="assignment${i+1}"></select>
                            </div>
                        </div>
                        <div class="col-2">
                            <div class="form-group">
                                <label class="font-weight-600">Partner <span class="text-danger">*</span></label>
                                <select class="language form-control refreshoption partnervalue${i+1}" id="partner${i+1}" name="partner${i+1}[]"></select>
                            </div>
                        </div>
                        <div class="col-2">
                            <div class="form-group">
                                <label class="font-weight-600">Work Item <span class="text-danger">*</span></label>
                                <textarea name="workitem${i+1}[]" class="form-control key workItem${i+1} refresh workitemnvalue${i+1}" style="height: 40px;"></textarea>
                            </div>
                        </div>
                        <div class="col-2">
                            <div class="form-group">
                                <label class="font-weight-600">Location <span class="text-danger">*</span></label>
                                <input type="text" name="location${i+1}[]" class="form-control key location${i+1} refresh locationvalue${i+1}">
                            </div>
                        </div>
                        <div class="col-1">
                            <div class="form-group">
                                <label class="font-weight-600">Hour <span class="text-danger">*</span></label>
                                <input type="number" class="form-control hour${i+1} refresh" id="hour${i+1}" name="hour${i+1}[]" oninput="calculateTotal(this)" value="0" step="1">
                            </div>
                        </div>
                        <div class="col-1">
                            <div class="form-group" style="margin-top: 36px;">
                                <a href="javascript:void(0);" class="add_button" id="plusbuttion${i+1}" data-index="${i+1}" title="Add field">
                                    <img src="{{ url('backEnd/image/add-icon.png') }}" />
                                </a>
                            </div>
                        </div>
                    </div>
                </div>`;
                 fieldContainer.append(fieldHtml);
             }
         }

         function fetchAndRender() {
             let date1Str = $("#datepickers1").val();
             let date2Str = $("#datepickers2").val();

             if (!date1Str || !date2Str) return;

             $.ajax({
                 url: "{{ url('filterleavedata') }}",
                 type: "GET",
                 data: {
                     start_date: date1Str,
                     end_date: date2Str
                 },
                 success: function(existingDates) {
                     generateFields(date1Str, date2Str, existingDates);
                 },
                 error: function() {
                     alert("Something went wrong while fetching leave data.");
                 }
             });
         }

         // Trigger on page load (if both dates are already filled)
         fetchAndRender();

         // Trigger on end date change
         //  $('#datepickers2').on('change', fetchAndRender);
     });
 </script>


 <script>
     $(document).ready(function() {
         // Object to store fields by date
         let storedFields = {};
         $('#datepickers2').on('change', function() {
             const startDate = new Date($("#datepickers1").val().split('-').reverse().join('-'));
             const endDate = new Date($(this).val().split('-').reverse().join('-'));

             // Calculate all dates in the range
             const allDates = [];
             for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
                 allDates.push(new Date(d));
             }

             // Process existing fields
             $('.field_wrapper').each(function() {
                 const fieldDate = new Date($(this).find('input[name^="day"]').val().split('-')
                     .reverse().join('-'));

                 if (fieldDate > endDate) {
                     // Store field if it's beyond the new end date
                     const dateKey = $(this).find('input[name^="day"]').val();
                     storedFields[dateKey] = $(this).detach();
                 }
             });

             // Add back fields that are now within range
             allDates.forEach(date => {
                 const dateStr = formatDate(date);
                 if (storedFields[dateStr]) {
                     $('#fieldContainer').append(storedFields[dateStr]);
                     // After append delete from storedFields
                     delete storedFields[dateStr];
                 }
             });
         });

         // Helper function to format date as dd-mm-yyyy
         function formatDate(date) {
             // hare padStart(2, '0') means like return 5 then it will be 05 
             const day = String(date.getDate()).padStart(2, '0');
             const month = String(date.getMonth() + 1).padStart(2, '0');
             return `${day}-${month}-${date.getFullYear()}`;
         }
     });
 </script>


 <script>
     $(document).ready(function() {
         function handleClientChange(clientId) {

             var cid = $('#' + clientId).val();
             var datepickers = $('#datepickers1').val();
             var clientNumber = parseInt(clientId.replace('client', ''));

             if (cid == 33) {
                 var datepickers = $('#day' + clientNumber).val();
                 //   var datepickers = "08-03-2025";
                 //   var datepickers = "14-03-2025";

                 if (!datepickers) {
                     alert("You cannot select this client from the child dropdown.");
                     $('#client' + clientNumber).val('');
                     return;
                 }


                 $.ajax({
                     type: "get",
                     url: "{{ url('holidaysselect') }}",
                     data: {
                         cid: cid,
                         datepickers: datepickers
                     },

                     success: function(response) {
                         //   console.log(response);
                         var parts = datepickers.split('-');
                         var formattedDate = parts[2] + '-' + parts[1] + '-' + parts[0];
                         var selectedDate = new Date(formattedDate);
                         var dayOfWeek = selectedDate.getDay();
                         var roleId = response.roleId;

                         if (roleId == 13 || roleId == 14) {
                             if (
                                 (response.holidayName && response.holidayName !== "null") ||
                                 (dayOfWeek === 6 && (response.saturday === '2nd Saturday' ||
                                     response.saturday === '4th Saturday'))
                             ) {
                                 applyOffHolidayUI(response, clientNumber);
                             } else {
                                 alert(
                                     'Selection of Off/Holiday client is only allowed on holidays or on 2nd and 4th Saturdays.'
                                 );
                                 $('#client' + clientNumber).val('');
                             }

                         } else {
                             if ((response.holidayName && response.holidayName !== "null") ||
                                 dayOfWeek === 6) {
                                 applyOffHolidayUI(response, clientNumber);
                             } else {
                                 alert(
                                     'Selection of Off/Holiday client is only allowed on holidays or Saturdays.'
                                 );
                                 $('#client' + clientNumber).val('');
                             }
                         }
                     }
                 });

                 function applyOffHolidayUI(response, clientNumber) {
                     var workitem = (response.holidayName && response.holidayName !== "null") ?
                         response.holidayName : (response.saturday || '');
                     var location = 'N/A';
                     var time = 0;

                     $('.assignmentvalue' + clientNumber).html(
                         `<option value="${response.assignmentgenerate_id}">${response.assignment_name} (${response.assignmentname}/${response.assignmentgenerate_id})</option>`
                     );
                     $('.partnervalue' + clientNumber).html(
                         `<option value="${response.team_memberid}">${response.team_member}</option>`
                     );
                     $('.workitemnvalue' + clientNumber).val(workitem).prop('readonly', true);
                     $('.locationvalue' + clientNumber).val(location).prop('readonly', true);
                     $('#totalhours' + clientNumber).val(time);
                     $('#hour' + clientNumber).val(time).prop('readonly', true);
                     $('#plusbuttion' + clientNumber).addClass('d-none');
                     // Remove ALL extra fields inside the same container when select offholidays client
                     $('#client' + clientNumber).closest('.field_wrapper').find('.extra_field').remove();
                 }
             } else {
                 $.ajax({
                     type: "get",
                     url: "{{ url('timesheet/create') }}",
                     data: {
                         cid: cid,
                         datepickers: datepickers
                     },
                     success: function(res) {
                         $('.assignmentvalue' + clientNumber).empty().append(res);
                         $('.partnervalue' + clientNumber).empty();
                         $('.workitemnvalue' + clientNumber).val('').prop('readonly',
                             false);
                         $('.locationvalue' + clientNumber).val('').prop('readonly',
                             false);
                         $('#hour' + clientNumber).prop('readonly', false);
                         $('#plusbuttion' + clientNumber).removeClass('d-none');
                         //   $('#totalhours' + clientNumber).val(0);
                     }
                 });
             }
         }

         function handleAssignmentChange(assignmentId) {
             var assignment = $('#' + assignmentId).val();
             $.ajax({
                 type: "get",
                 url: "{{ url('timesheet/create') }}",
                 data: {
                     assignment: assignment
                 },
                 success: function(res) {
                     $('#' + assignmentId.replace('assignment', 'partner')).html(res);
                 }
             });
         }

         function calculateTotal(hourId) {
             //   alert(hourId);
             var originalhournubmer = parseInt(hourId.replace('hour', ''));
             var newnumber = originalhournubmer >= 10 ? Math.floor(originalhournubmer / 10) :
                 originalhournubmer;


             //   sum of total child filed like hour10, hour11, etc
             var total = 0;
             for (var i = 0; i < 5; i++) {
                 var input = $(`#hour${newnumber}${i}`);
                 if (input.length) {
                     var val = parseFloat(input.val()) || 0;
                     total += val;
                 }
             }

             // Also check the base hour like (hour1)
             var baseHourInput = $(`#hour${newnumber}`);
             var baseVal = parseFloat(baseHourInput.val()) || 0;
             total += baseVal;

             //  if (total > 12) {
             //      alert("The total hours cannot be greater than 12.");
             //      // reset current field
             //      $(`#${hourId}`).val(0);
             //      //   calculateTotal(hourId); 
             //      return;
             //  }
             if (total > 12) {
                 alert("The total hours cannot be greater than 12.");
                 // Reset current field to 0
                 $(`#${hourId}`).val(0);

                 total = 0;
                 // Sum base hour (e.g., hour1)
                 var baseVal = parseFloat($(`#hour${newnumber}`).val()) || 0;
                 total += baseVal;

                 // Sum child hours (e.g., hour10, hour11, etc.)
                 for (var i = 0; i < 5; i++) {
                     var input = $(`#hour${newnumber}${i}`);
                     if (input.length) {
                         // Skip the field we just reset if it's a child field
                         if (input.attr('id') !== hourId) {
                             total += parseFloat(input.val()) || 0;
                         }
                     }
                 }
             }

             // Set value to totalhours
             $(`#totalhours${newnumber}`).val(total);
         }

         $(document).on("click", ".add_button", function() {
             // Get index of the clicked button
             let index = $(this).data("index");
             // Get the wrapper div
             let wrapper = $(`#additionalFields${index}`);
             // Count existing fields
             let fieldCount = wrapper.find('.extra_field').length;

             if (fieldCount < 4) {
                 let idincreament = `${index}${fieldCount}`;
                 //   console.log('index', index);
                 //   console.log('fieldCount', idincreament);
                 let newFieldHtml = `
       <div class="row row-sm extra_field" data-index="${idincreament}" style="padding: 15px;">
           <div class="col-2">
               <div class="form-group">
                   <label class="font-weight-600">Client Name <span class="text-danger">*</span></label>
                   <select class="language form-control refresh" name="client_id${index}[]" id="client${idincreament}">
                       <option value="">Select Client</option>
                       @foreach ($client as $clientData)
                           <option value="{{ $clientData->id }}">
                               {{ $clientData->client_name }} ({{ $clientData->client_code }})
                           </option>
                       @endforeach
                   </select>
               </div>
           </div>
           <div class="col-2">
               <div class="form-group">
                   <label class="font-weight-600" style="min-width: max-content;">Assignment Name <span class="text-danger">*</span></label>
                   <select class="form-control key refreshoption assignmentvalue${idincreament}" name="assignment_id${index}[]" id="assignment${idincreament}"></select>
               </div>
           </div>
           <div class="col-2">
               <div class="form-group">
                   <label class="font-weight-600">Partner <span class="text-danger">*</span></label>
                   <select class="language form-control refreshoption partnervalue${idincreament}" name="partner${index}[]" id="partner${idincreament}"></select>
               </div>
           </div>
           <div class="col-2">
               <div class="form-group">
                   <label class="font-weight-600" style="width:100px;">Work Item <span class="text-danger">*</span></label>
                   <textarea type="text" name="workitem${index}[]" class="form-control key workItem${idincreament} refresh workitemnvalue${idincreament}" style="height: 40px;"></textarea>
               </div>
           </div>
           <div class="col-2">
               <div class="form-group">
                   <label class="font-weight-600" style="width:100px;">Location <span class="text-danger">*</span></label>
                   <input type="text" name="location${index}[]" class="form-control key location${idincreament} refresh locationvalue${idincreament}">
               </div>
           </div>
           <div class="col-1">
               <div class="form-group">
                   <label class="font-weight-600">Hour <span class="text-danger">*</span></label>
                   <input type="number" class="form-control hour${idincreament} refresh" id="hour${idincreament}" name="hour${index}[]" oninput="calculateTotal(this)" value="0" step="1">
               </div>
           </div>
           <div class="col-1">
               <div class="form-group" style="margin-top: 36px; margin-left: 5px;">
                   <a href="javascript:void(0);" class="remove_button" title="Remove field">
                       <img src="{{ url('backEnd/image/remove-icon.png') }}" />
                   </a>
               </div>
           </div>
       </div>`;

                 wrapper.append(newFieldHtml);
             } else {
                 alert("You can only add up to 4 fields per section.");
             }
         });

         //   $(document).on("click", ".remove_button", function() {
         //       let subtract = $(this).closest(".extra_field").find("[id^='hour']").val();
         //       let total = $(this).closest(".extra_field").find(".field_wrapper").find(".totalhours")
         //           .val();

         //       let result = total - subtract;
         //       $(this).closest(".extra_field").find(".field_wrapper").find(".totalhours")
         //           .val(result);

         //       $(this).closest(".extra_field").remove();
         //   });

         $(document).on("click", ".remove_button", function() {
             // Get the hour value of the field being removed
             var hourInput = $(this).closest(".extra_field").find("[id^='hour']");
             var hoursToSubtract = parseFloat(hourInput.val()) || 0;

             // Get the field wrapper and the total hours input
             var fieldWrapper = $(this).closest(".field_wrapper");
             var totalHoursInput = fieldWrapper.find("[id^='totalhours']");

             // Calculate new total
             var currentTotal = parseFloat(totalHoursInput.val()) || 0;
             var newTotal = currentTotal - hoursToSubtract;

             // Update the total (ensure it doesn't go below 0)
             totalHoursInput.val(Math.max(0, newTotal));

             //   console.log("hourInput:", hourInput);
             //   console.log("hoursToSubtract:", hoursToSubtract);
             //   console.log("fieldWrapper:", fieldWrapper);
             //   console.log("totalHoursInput:", totalHoursInput);
             //   console.log("currentTotal:", currentTotal);
             //   console.log("newTotal:", newTotal);
             //   console.log("totalHoursInput:", totalHoursInput);

             // Remove the field
             $(this).closest(".extra_field").remove();
         });


         $(document).on("change", "[id^='client']", function() {
             //   alert('hi ');
             handleClientChange($(this).attr("id"));
         });

         $(document).on("change", "[id^='assignment']", function() {
             handleAssignmentChange($(this).attr("id"));
         });

         //   $(document).on("input", "[class*='hour']", function() {
         //       calculateTotal($(this).attr("id"));
         //   });
         $(document).on("change", "[class*='hour']", function() {
             calculateTotal($(this).attr("id"));
         });

     });
 </script>

 <script>
     $(function() {
         $('#timesheet-form').on('submit', function(e) {
             let isValid = true;
             let errorMessage = '';

             $('.field_wrapper, .extra_field').each(function() {
                 const index = $(this).data('index');
                 const client = $(`#client${index}`).val();
                 const assignment = $(`#assignment${index}`).val();
                 const partner = $(`#partner${index}`).val();
                 const workItem = $(`.workItem${index}`).val();
                 const location = $(`.location${index}`).val();
                 const hour = $(`#hour${index}`).val();

                 if (!client) {
                     isValid = false;
                     errorMessage = 'Please select a client.';
                     $(`#client${index}`).focus();
                     return false;
                 }
                 if (!assignment) {
                     isValid = false;
                     errorMessage = 'Please select an assignment.';
                     $(`#assignment${index}`).focus();
                     return false;
                 }
                 if (!partner) {
                     isValid = false;
                     errorMessage = 'Please select a partner.';
                     $(`#partner${index}`).focus();
                     return false;
                 }
                 if (!workItem) {
                     isValid = false;
                     errorMessage = 'Please enter a work item.';
                     $(`.workItem${index}`).focus();
                     return false;
                 }
                 if (!location) {
                     isValid = false;
                     errorMessage = 'Please enter a location.';
                     $(`.location${index}`).focus();
                     return false;
                 }
                 if (!hour || isNaN(hour) || (hour <= 0 && client != 33)) {
                     isValid = false;
                     errorMessage = 'Please enter a valid hour.';
                     console.log("client:", client);
                     console.log("hour:", hour);
                     $(`#hour${index}`).focus();
                     return false;
                 }
             });

             if (!isValid) {
                 e.preventDefault();
                 alert(errorMessage);
             }
         });
     });
 </script>


 <script>
     $(function() {
         $('input[name="daterange"]').daterangepicker({
             opens: 'left'
         }, function(start, end, label) {
             console.log("A new date selection was made: " + start.format('YYYY-MM-DD') + ' to ' + end
                 .format('YYYY-MM-DD'));
         });
     });
 </script>

 {{-- Refresh page --}}
 <script>
     $(function() {
         $('#datepickers').on('change', function() {
             var timesheetdate = $(this).val();
             //   var datepickers = $('#datepickers').val();

             var refreshpage = $('.refresh');
             refreshpage.val('').prop("readonly", false);
             $('.refreshoption option').remove();
             //   $("#hour1,#hour2,#hour3,#hour4,#hour5").prop("readonly", false);
             $("#hour1,#hour2,#hour3,#hour4,#hour5").val(0);

             //   alert(datepickers);
             $.ajax({
                 type: "get",
                 url: "{{ url('timesheet/create') }}",
                 data: {
                     timesheetdate: timesheetdate
                 },
                 success: function(res) {
                     $('#client').html(res);
                     $('#client1').html(res);
                     $('#client2').html(res);
                     $('#client3').html(res);
                     $('#client4').html(res);
                 },
                 error: function() {},
             });
         });
     });
 </script>
 <script>
     $(function() {
         var startDate = new Date();
         $("#datepickers").datepicker({
             maxDate: startDate,
             dateFormat: 'dd-mm-yy'
         });
     });
 </script>

 <script>
     // Pass the PHP data to JavaScript
     var lasttimesheetsubmiteddata = @json($lasttimesheetsubmiteddata);
     var timesheetmaxDateRecord = @json($timesheetmaxDateRecord);
     var dateSelectionresult = @json($dateSelectionresult);
     var newteammember = @json($newteammember);
     var rejoiningdate = @json($rejoiningdate);
     var datanotexistaftermonday = @json($datanotexistaftermonday);
 </script>

 <!--Page Active Scripts(used by this page)-->
 <script src="{{ url('backEnd/dist/js/pages/forms-basic.active.js') }}"></script>
 <!--Page Scripts(used by all page)-->
 <script src="{{ url('backEnd/dist/js/sidebar.js') }}"></script>











22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\form.blade.php
replace all code hare 


<div id="fieldContainer">

</div>
<hr>



<div class="form-group">
    <button type="submit" class="btn btn-success" style="float:right"> Save</button>
    <a class="btn btn-secondary" href="{{ url('timesheet') }}">Back</a>
</div>














22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\js.blade.php
 if (datanotexistaftermonday && !rejoiningdate) {
 
      <script>
         document.addEventListener('DOMContentLoaded', function() {
             // Declare endDate outside of the conditions
             let endDate = null;

             // Function to parse and validate dates
             function parseDate(date) {
                 let parsedDate = new Date(date);
                 if (isNaN(parsedDate)) {
                     console.error("Invalid date format:", date);
                     return null;
                 }
                 return parsedDate;
             }

             // Helper function to adjust endDate
             function adjustEndDateForWeekend(date) {
                 if (date.getDay() === 6) {
                     console.log("Incremented date is Sunday, adding another day.");
                     date.setDate(date.getDate() + 1); // Increment by one more day
                 }
             }

             // Check the conditions for calculating the endDate
             if (datanotexistaftermonday && !rejoiningdate) {
                 endDate = parseDate(datanotexistaftermonday);
                 if (endDate) endDate.setDate(endDate.getDate() - 1);
                 if (endDate) adjustEndDateForWeekend(endDate);
             } else if (rejoiningdate && timesheetmaxDateRecord.length === 0) {
                 console.log("Using rejoiningdate data:", rejoiningdate);
                 endDate = parseDate(rejoiningdate);
                 if (endDate) endDate.setDate(endDate.getDate() - 1);
             } else if (newteammember && !lasttimesheetsubmiteddata) {
                 if (!lasttimesheetsubmiteddata && timesheetmaxDateRecord.length === 0) {
                     endDate = parseDate(newteammember);
                     if (endDate) endDate.setDate(endDate.getDate() - 1);
                 } else {
                     endDate = parseDate(dateSelectionresult);
                     if (endDate) endDate.setDate(endDate.getDate() - 1);
                 }
             } else if (lasttimesheetsubmiteddata && timesheetmaxDateRecord.length > 0 && dateSelectionresult) {
                 endDate = parseDate(dateSelectionresult);
                 if (endDate) endDate.setDate(endDate.getDate() - 1);
                 //  if (endDate) adjustEndDateForWeekend(endDate);
             } else if (lasttimesheetsubmiteddata && timesheetmaxDateRecord.length === 0 && !dateSelectionresult) {
                 endDate = parseDate(lasttimesheetsubmiteddata.enddate);
                 if (endDate) adjustEndDateForWeekend(endDate);
             }

             // Set date in the datepicker if endDate is valid
             if (endDate) {
                 let today = new Date();
                 today.setHours(0, 0, 0, 0);
                 endDate.setHours(0, 0, 0, 0);

                 // If endDate is before today, shift it to tomorrow
                 if (endDate.getTime() < today.getTime()) {
                     endDate.setDate(endDate.getDate() + 1);
                 }

                 let originalDate = new Date(endDate);

                 // **Find Next Sunday**  
                 while (endDate.getDay() !== 0) {
                     endDate.setDate(endDate.getDate() + 1);
                 }

                 //  prevent date after current date 
                 if (endDate.getTime() > today.getTime()) {
                     endDate = new Date(today);
                     //  endDate.setDate(today.getDate());
                 }

                 console.log('Original Date:', originalDate);
                 console.log('Next Sunday:', endDate);

                 // **Format Dates**
                 let toDateFormatted = ('0' + originalDate.getDate()).slice(-2) + '-' +
                     ('0' + (originalDate.getMonth() + 1)).slice(-2) + '-' +
                     originalDate.getFullYear();

                 let fromDateFormatted = ('0' + endDate.getDate()).slice(-2) + '-' +
                     ('0' + (endDate.getMonth() + 1)).slice(-2) + '-' +
                     endDate.getFullYear();

                 // **Set values in inputs**
                 document.getElementById('datepickers1').value = toDateFormatted; // To Date
                 document.getElementById('datepickers2').value = fromDateFormatted; // From Date (Next Sunday)

                 // **Initialize Datepickers**
                 $("#datepickers1").datepicker({
                     maxDate: originalDate, // Original Date
                     minDate: originalDate, // Original Date
                     dateFormat: 'dd-mm-yy'
                 });

                 $("#datepickers2").datepicker({
                     maxDate: endDate, // Next Sunday
                     minDate: originalDate, // Original Date
                     dateFormat: 'dd-mm-yy'
                 });
                 console.log("Adjusted date set in datepicker:", endDate);
             } else {
                 console.log("No valid timesheet or submitted date data found to set datepicker.");
             }
         });
     </script>






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
routes\web.php
find   Route::get('/totaltimeshow/filter', [TimesheetController::class, 'assignmentHourShowfilter']);
add this route 

  Route::get('/filterleavedata', [TimesheetController::class, 'filterleavedata']);





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

   public function filterleavedata(Request $request)
  {
    $start = Carbon::createFromFormat('d-m-Y', $request->start_date)->format('Y-m-d');
    $end = Carbon::createFromFormat('d-m-Y', $request->end_date)->format('Y-m-d');
    // dd('djd');

    $dates = DB::table('timesheetusers')
      ->where('status', '0')
      ->where('client_id', 134)
      ->where('createdby', auth()->user()->teammember_id)
      ->whereBetween('date', [$start, $end])
      ->pluck('date')
      ->map(function ($date) {
        return Carbon::parse($date)->format('d-m-Y');
      });
    // dd($dates);

    return response()->json($dates);
  }










22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


   public function holidaysselect(Request $request)
  {
    if ($request->ajax()) {

      $selectedDate = date('Y-m-d', strtotime($request->datepickers));

      // Get the day of the week (0 for Sunday, 6 for Saturday)
      $dayOfWeek = date('w', strtotime($selectedDate));
      if ($dayOfWeek == 6) {
        // Get the day of the month
        $dayOfMonth = date('j', strtotime($selectedDate));
        // Calculate which Saturday of the month it is
        $saturdayNumber = ceil($dayOfMonth / 7);
        if ($saturdayNumber == 1.0) {
          $saturday = '1st Saturday';
        } elseif ($saturdayNumber == 2.0) {
          $saturday = '2nd Saturday';
        } elseif ($saturdayNumber == 3.0) {
          $saturday = '3rd Saturday';
        } elseif ($saturdayNumber == 4.0) {
          $saturday = '4th Saturday';
        } elseif ($saturdayNumber == 5.0) {
          $saturday = '5th Saturday';
        }
      }
      $holidayname = DB::table('holidays')->where('startdate', $selectedDate)->select('holidayname')->first();
      $selectassignment = DB::table('assignmentbudgetings')->where('client_id', $request->cid)
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->orderBy('assignment_name')->first();
      $selectpartner = DB::table('assignmentmappings')
        ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
        ->where('assignmentmappings.assignmentgenerate_id', $selectassignment->assignmentgenerate_id)
        ->select('teammembers.team_member', 'teammembers.id')
        ->first();

      $roleId = auth()->user()->role_id;

      return response()->json([
        'holidayName' => $holidayname->holidayname ?? 'null',
        'saturday' => $saturday ?? 'null',
        'assignmentid' => $selectassignment->id,
        'assignmentgenerate_id' => $selectassignment->assignmentgenerate_id,
        'assignmentname' => $selectassignment->assignmentname,
        'assignment_name' => $selectassignment->assignment_name,
        'team_member' => $selectpartner->team_member,
        'team_memberid' => $selectpartner->id,
        'roleId' =>   $roleId,
      ]);
    }
  }
  
  
  
  
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\create.blade.php  
 alert("The total hours cannot be greater than 12.");
replace it  if (total > 12) {

             if (total > 12) {
                 alert("The total hours cannot be greater than 12.");
                 // Reset current field to 0
                 $(`#${hourId}`).val(0);

                 total = 0;
                 // Sum base hour (e.g., hour1)
                 var baseVal = parseFloat($(`#hour${newnumber}`).val()) || 0;
                 total += baseVal;

                 // Sum child hours (e.g., hour10, hour11, etc.)
                 for (var i = 0; i < 5; i++) {
                     var input = $(`#hour${newnumber}${i}`);
                     if (input.length) {
                         // Skip the field we just reset if it's a child field
                         if (input.attr('id') !== hourId) {
                             total += parseFloat(input.val()) || 0;
                         }
                     }
                 }
             }






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


   public function store(Request $request)
  {
    try {
      $Newteammeber = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->first();

      // check promotion data
      $pormotionandrejoiningdata = DB::table('teammembers')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
        ->where('teammembers.id', auth()->user()->teammember_id)
        ->select(
          'teammembers.team_member',
          'teammembers.staffcode',
          'teammembers.joining_date',
          'teamrolehistory.newstaff_code',
          'teamrolehistory.rejoiningdate',
          'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
        )
        ->first();

      $joiningDate = $pormotionandrejoiningdata->joining_date ? Carbon::parse($pormotionandrejoiningdata->joining_date) : null;
      $rejoiningDateRaw = $pormotionandrejoiningdata->rejoiningdate ?? $pormotionandrejoiningdata->samepostrejoiningdate;
      $rejoiningDate = $rejoiningDateRaw ? Carbon::parse($rejoiningDateRaw) : null;
      $requestDate = Carbon::parse($request->day1);

      // hare only created timesheet before joinig date like NA
      if (!$Newteammeber || $rejoiningDate) {
        if ($rejoiningDate && $requestDate < $rejoiningDate) {
          return redirect('timesheet/mylist')->with('statuss', ['msg' => 'You can not fill timesheet before Rejoining date : ' . $rejoiningDate->format('d-m-Y')]);
        }

        if ($joiningDate && $requestDate < $joiningDate) {
          return redirect('timesheet/mylist')->with('statuss', ['msg' => 'You can not fill timesheet before Joining date : ' . $joiningDate->format('d-m-Y')]);
        }

        // Determine base date
        $baseDate = $rejoiningDate ?? $joiningDate;
        $previousSunday = $baseDate->copy()->startOfWeek(Carbon::SUNDAY);
        $period = CarbonPeriod::create($previousSunday, $baseDate);

        $datesToInsert = collect($period)->slice(1, -1); // skip first and last day

        foreach ($datesToInsert as $date) {
          $dateString = $date->toDateString();

          $alreadyExists = DB::table('timesheets')
            ->where('date', $dateString)
            ->where('created_by', auth()->user()->teammember_id)
            ->exists();

          if (!$alreadyExists) {
            $timesheetId = DB::table('timesheets')->insertGetId([
              'created_by' => auth()->user()->teammember_id,
              'month' => $date->format('F'),
              'date' => $dateString,
              'created_at' => now(),
            ]);

            DB::table('timesheetusers')->insert([
              'date' => $dateString,
              'client_id' => 29,
              'workitem' => 'NA',
              'location' => 'NA',
              'timesheetid' => $timesheetId,
              'hour' => 0,
              'totalhour' => 0,
              'assignment_id' => 213,
              'partner' => 887,
              'createdby' => auth()->user()->teammember_id,
              'created_at' => now(),
              'updated_at' => now(),
            ]);
          }
        }
      }


      if ($requestDate >= $joiningDate) {
        if ($rejoiningDate && $requestDate < $rejoiningDate) {
          return redirect('timesheet')->with('success', ['msg' => 'You can not fill timesheet before Rejoining date : ' . $rejoiningDate->format('d-m-Y')]);
        }

        $data = $request->except(['_token', 'teammember_id', 'amount']);

        // insert data in timesheet and timesheetusers table 
        for ($j = 1; $j <= 7; $j++) {
          $dayKey = 'day' . $j;
          if (!isset($request->$dayKey)) {
            continue;
          }
          // dd($request->$dayKey);
          // check allready submited
          if (date('w', strtotime($request->$dayKey)) == 0) {
            $previousSaturday = date('Y-m-d', strtotime('-1 day', strtotime($request->$dayKey)));
            $previousSaturdayFilled = DB::table('timesheetusers')
              ->where('createdby', auth()->user()->teammember_id)
              ->where('date', $previousSaturday)
              ->where('status', 1)
              ->first();

            if ($previousSaturdayFilled != null) {
              $output = array('msg' => 'You already submitted for this week');
              return back()->with('success', $output);
            }
          }

          $previouschck = DB::table('timesheetusers')
            ->where('createdby', auth()->user()->teammember_id)
            ->where('date', date('Y-m-d', strtotime($request->$dayKey)))
            ->where('status', 1)
            ->first();

          if ($previouschck != null) {
            $output = array('msg' => 'You already submitted for this week');
            return back()->with('success', $output);
          }

          $previoussavechck = DB::table('timesheetusers')
            ->where('createdby', auth()->user()->teammember_id)
            ->where('date', date('Y-m-d', strtotime($request->$dayKey)))
            ->where('status', 0)
            ->first();

          if ($previoussavechck != null) {
            $output = array('msg' => 'You already submitted for this date');
            return back()->with('success', $output);
          }

          // today timesheet validation 
          $timesheetAccess = DB::table('teammembers')
            ->where('id', auth()->user()->teammember_id)
            ->value('timesheet_access');

          $currentDate = Carbon::now()->format('d-m-Y');
          // $currentDate = "07-03-2025";

          if ($timesheetAccess == 0  && $currentDate == $request->$dayKey && Carbon::now()->hour < 18) {
            $output = array('msg' => 'You can only fill today timesheet after 6:00 pm');
            return back()->with('success', $output);
          }

          // Exam leave validation  optimized code 
          $leaves = DB::table('applyleaves')
            ->where('createdby', auth()->user()->teammember_id)
            ->where('status', '!=', 2)
            ->select('from', 'to')
            ->get();

          $currentday = Carbon::parse($request->$dayKey)->format('Y-m-d');

          // Proceed only if leaves exist
          if (!$leaves->isEmpty()) {
            foreach ($leaves as $leave) {
              $start = Carbon::parse($leave->from);
              $end = Carbon::parse($leave->to);

              if ($currentday >= $start->format('Y-m-d') && $currentday <= $end->format('Y-m-d')) {
                $output = array('msg' => 'You Have Leave for the Day (' . Carbon::parse($currentday)->format('d-m-Y') . '). Please Approved/Reject leave');
                return redirect('timesheet')->with('statuss', $output);
              }
            }
          }
          // Exam leave validation ends here

          $id = DB::table('timesheets')->insertGetId([
            'created_by' => auth()->user()->teammember_id,
            'month' => date('F', strtotime($request->$dayKey)),
            'date' => date('Y-m-d', strtotime($request->$dayKey)),
            'created_at' => now(),
            'updated_at' => now(),
          ]);

          $count = count($request->{'assignment_id' . $j});
          for ($k = 0; $k < $count; $k++) {
            $assignment = DB::table('assignmentmappings')->where('assignmentgenerate_id', $request->{'assignment_id' . $j}[$k])->first();

            DB::table('timesheetusers')->insert([
              'date' => date('Y-m-d', strtotime($request->$dayKey)),
              'client_id' => $request->{'client_id' . $j}[$k],
              'assignmentgenerate_id' => $request->{'assignment_id' . $j}[$k],
              'workitem' => $request->{'workitem' . $j}[$k],
              'location' => $request->{'location' . $j}[$k],
              'timesheetid' => $id,
              'hour' => $request->{'hour' . $j}[$k],
              'totalhour' => $request->{'totalhour' . $j},
              'assignment_id' => $assignment->assignment_id ?? null,
              'partner' => $request->{'partner' . $j}[$k],
              'createdby' => auth()->user()->teammember_id,
              'created_at' => now(),
              'updated_at' => now(),
            ]);

            // total hour update
            if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
              $getTotalTeamHour = DB::table('assignmentteammappings')
                ->join('assignmentmappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
                ->where('assignmentmappings.assignmentgenerate_id', $request->{'assignment_id' . $j}[$k])
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                ->value('teamhour') ?? 0;

              $finalResult = $getTotalTeamHour + $request->{'hour' . $j}[$k];

              DB::table('assignmentteammappings')
                ->join('assignmentmappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
                ->where('assignmentmappings.assignmentgenerate_id', $request->{'assignment_id' . $j}[$k])
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                ->update(['teamhour' => $finalResult]);
            }

            if (auth()->user()->role_id == 13) {

              $assignmentdata = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->{'assignment_id' . $j}[$k])
                ->first();

              $finalresultleadpatner =  $assignmentdata->leadpartnerhour + $request->{'hour' . $j}[$k];
              $finalresultotherpatner =  $assignmentdata->otherpartnerhour + $request->{'hour' . $j}[$k];

              if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
                $update = DB::table('assignmentmappings')
                  ->where('assignmentgenerate_id', $request->{'assignment_id' . $j}[$k])
                  ->where('leadpartner', auth()->user()->teammember_id)
                  ->update(['leadpartnerhour' => $finalresultleadpatner]);
              }
              if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
                $update = DB::table('assignmentmappings')
                  ->where('assignmentgenerate_id', $request->{'assignment_id' . $j}[$k])
                  ->where('otherpartner', auth()->user()->teammember_id)
                  ->update(['otherpartnerhour' => $finalresultotherpatner]);
              }

              if ($assignmentdata->otherpartner != auth()->user()->teammember_id && $assignmentdata->leadpartner != auth()->user()->teammember_id) {
                $getTotalTeamHour = DB::table('assignmentteammappings')
                  ->join('assignmentmappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
                  ->where('assignmentmappings.assignmentgenerate_id', $request->{'assignment_id' . $j}[$k])
                  ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                  ->value('teamhour') ?? 0;

                $finalResult = $getTotalTeamHour + $request->{'hour' . $j}[$k];

                DB::table('assignmentteammappings')
                  ->join('assignmentmappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
                  ->where('assignmentmappings.assignmentgenerate_id', $request->{'assignment_id' . $j}[$k])
                  ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                  ->update(['teamhour' => $finalResult]);
              }
            }
          }
        }
        // dd('COMPLETED');
      } else {
        return redirect('timesheet')->with('success', ['msg' => 'You can not fill timesheet before Rejoining date : ' . $rejoiningDate->format('d-m-Y')]);
      }

      $output = array('msg' => 'Create Successfully');
      if (auth()->user()->role_id == 14 || auth()->user()->role_id == 13 || auth()->user()->role_id == 15) {
        return redirect('timesheet/mylist')->with('success', $output);
      } else {
        return redirect('timesheet')->with('success', $output);
      }
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }






Need option to fill mutiple days timesheet at once ```end hare 





Required attachment to be visible in notification module in OMS ```start
vsalocal, vsademo, vsalive 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\notification\index.blade.php

{{-- <link href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css" rel="stylesheet"> --}}
<link href="https://cdn.datatables.net/buttons/1.7.1/css/buttons.dataTables.min.css" rel="stylesheet">





<table id="examplee" class="display nowrap">
replace table tag

                    <table id="examplee" class="table display table-bordered table-striped table-hover">




<th>Target</th>

                                @if (Auth::user()->role_id == 18 || Auth::user()->role_id == 11)
                                    <th>Target</th>
                                @endif
                                <th>Attachment</th>
								
				

	

	
			
			
								
 $targetTypes = $allTargets[$notificationData->duplicate_notifications]   after this td add below code

 
                                    <td>
                                        @if ($notificationData && $notificationData->realname)
                                            <a href="{{ asset('storage/app/public/image/task/' . $notificationData->attachment) }}"
                                                target="_blank">
                                                {{ $notificationData->realname ?? 'NA' }}
                                            </a>
                                        @else
                                            {{ 'NA' }}
                                        @endif
                                    </td>








$(document).ready(function() {

<script>
    $(document).ready(function() {
        const isRole11 = {{ Auth::user()->role_id == 11 ? 'true' : 'false' }};

        const nonOrderableColumns = isRole11 ? [0, 1, 3, 4] : [0, 1, 3];
        const exportColumns = isRole11 ? [1, 2, 3, 4] : [1, 2, 3];

        $('#examplee').DataTable({
            dom: 'Bfrtip',
            order: [
                [2, 'desc']
            ],
            columnDefs: [{
                targets: nonOrderableColumns,
                orderable: false
            }],
            buttons: [{
                    extend: 'copyHtml5',
                    exportOptions: {
                        columns: [0, ':visible']
                    }
                },
                {
                    extend: 'excelHtml5',
                    filename: 'Notification',
                    exportOptions: {
                        columns: ':visible',
                        format: {
                            body: function(data, row, column) {
                                const cleanedText = $(data).text().trim();

                                if (column === 1) {
                                    const parts = cleanedText.split('-');
                                    return parts.length === 3 ?
                                        `${parts[2]}-${parts[1]}-${parts[0]}` :
                                        cleanedText;
                                }
                                return cleanedText;
                            }
                        }
                    }
                },
                {
                    extend: 'pdfHtml5',
                    filename: 'Notification',
                    exportOptions: {
                        columns: exportColumns
                    }
                },
                'colvis'
            ]
        });
    });
</script>		

							

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\NotificationController.php
$notification_id = DB::table('notifications')->insertGetId([

                    'attachment'    => $name,
                    'realname'      => $realname,








    public function store(Request $request)
    {
        $request->validate([
            'attachment' => 'nullable|mimes:png,pdf,jpeg,jpg,xls,xlsx|max:4120',
        ], [
            'attachment.max' => 'The file may not be greater than 5 MB.',
        ]);
 
        try {
            $authid = auth()->user()->teammember_id;
            $data = $request->except(['_token']);
 
            // Initialize the attachment path
            $attachmentPath = null;
            $name = null;
            $realname = null;
            $mimeType = null;
            if ($request->hasFile('attachment')) {
                $file = $request->file('attachment');
                $realname = $file->getClientOriginalName();
                $name = time() . $realname;
                // $attachmentPath = public_path('backEnd/image/test/' . $name);
                $attachmentPath = storage_path('app/public/image/task/' . $name);
                // $file->move('backEnd/image/test', $name);
                $file->storeAs('public/image/task', $name);
                $mimeType = $file->getClientMimeType();
            }
 
            // dd($mimeType);
 
            $duplicatecodemax = DB::table('notifications')->max('duplicate_notifications');
            $maxincreament = $duplicatecodemax ? $duplicatecodemax + 1 : 2001;
 
            foreach ($request->targettype as $targetType) {
                $notification_id = DB::table('notifications')->insertGetId([
                    'title'         => $request->title,
                    'created_by'    => $authid,
                    'targettype'    => $targetType,
                    'mail_content'  => $request->mail_content,
                    'attachment'    => $name,
                    'realname'      => $realname,
                    'duplicate_notifications'    => $maxincreament,
                    'created_at'    => date('Y-m-d H:i:s'),
                    'updated_at'    => date('Y-m-d H:i:s'),
                ]);
 
                // Check if the targettype is 1 and insert team member IDs
                if ($targetType == 1 && isset($request->teammember_id)) {
                    foreach ($request->teammember_id as $teammember_id) {
                        DB::table('notificationtargets')->insert([
                            'notification_id' => $notification_id,
                            'teammember_id'   => $teammember_id,
                            'created_at'      => date('Y-m-d'),
                            'updated_at'      => date('Y-m-d'),
                        ]);
                    }
                }
            }
 
            // 1 exist or not in array of $request->targettype
            if (in_array(1, $request->targettype)) {
                $teammembers = Teammember::wherein('id', $request->teammember_id)->pluck('emailid')->toArray();
 
                // dd($teammembers);
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'attachment' =>  $request->attachment,
                        'emailid' =>  $teammember,
                    );
 
 
                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);
 
                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
 
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
            if (in_array(2, $request->targettype)) {
 
                $teammembers = Teammember::where('status', 1)->pluck('emailid')->toArray();
                //    dd($teammembers);
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );
 
                    //  $data['mail']=$teammembers;
                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);
 
                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
            if (in_array(3, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 13)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );
 
                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);
 
                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
            if (in_array(4, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 14)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );
                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);
 
                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
            if (in_array(5, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 15)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );
                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);
 
                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
            if (in_array(6, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 16)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );
                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);
 
                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
            if (in_array(7, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 17)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
 
                    );
 
                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);
 
                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
 
            $output = array('msg' => 'Sent Successfully');
            return back()->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }
	


	
			
	
resources\views\backEnd\notification\index.blade.php
$targetTypes =

	    <td class="textfixed">



resources\views\backEnd\notification\view.blade.php
<div class="card-body"


             <div class="card-body" style="font-family: 'Segoe UI', sans-serif;">
                 <div>
                     {!! $notificationData->mail_content !!}
                 </div>
                 @if ($notificationData && $notificationData->realname)
                     <div
                         style="border-top: 1px solid #ddd; padding-top: 10px; margin-top: 10px; display: flex; align-items: center;">
                         <span style="font-size: 15px; margin-right: 10px;"> <strong>Attachment:</strong></span>
                         <a href="{{ asset('storage/app/public/image/task/' . $notificationData->attachment) }}"
                             target="_blank" style="text-decoration: underline;">
                             {{ $notificationData->realname }}
                         </a>
                     </div>
                 @endif
             </div>
			 
			 
			 
			 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222		 
resources\views\backEnd\notification\create.blade.php
@endsection after this add all below code ```111


<script src="{{ url('backEnd/ckeditor/ckeditor.js') }}"></script>
<script>
    ClassicEditor
        .create(document.querySelector('#editor'), {
            // toolbar: [ 'heading', '|', 'bold', 'italic', 'link' ]
        })
        .then(editor => {
            window.editor = editor;
        })
        .catch(err => {
            console.error(err.stack);
        });
</script>
<script type="text/javascript" src="http://www.datejs.com/build/date.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        // Add required validation
        $('form').on('submit', function(e) {
            // Check if Summernote content is empty
            var summernoteContent = $('#summernote').summernote('isEmpty');
            if (summernoteContent) {
                alert('Announcement Content is required.');
                e.preventDefault(); // Prevent form submission
                return false;
            }

            // Get the submit button
            const sendButton = document.getElementById('sendButton');
            // Disable the submit button to prevent multiple submissions
            if (sendButton) {
                sendButton.disabled = true;
                sendButton.textContent = "Sending...";
            }
        });
    });
</script>


<script>
    $(document).ready(function() {
        $('#exampleFormControlSelect111').on('change', function() {
            if (this.value == '1') {
                $("#designation").show();
                document.getElementById("designationinput").required = true;
            } else {
                $("#designation").hide();
                document.getElementById("designationinput").required = false;
            }
        });
    });
</script>


after that all script remove from form blade file 



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\notification\form.blade.php
Send</button>

    <button type="submit" id="sendButton" class="btn btn-success" style="float:right">Send</button>
			 


		

2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\NotificationController.php

          public function store(Request $request)
    {
        $request->validate([
            'attachment' => 'nullable|mimes:png,pdf,jpeg,jpg,xls,xlsx|max:4120',
        ], [
            'attachment.max' => 'The file may not be greater than 5 MB.',
        ]);

        try {
            $authid = auth()->user()->teammember_id;
            $data = $request->except(['_token']);

            // Initialize the attachment path
            $attachmentPath = null;
            $name = null;
            $realname = null;
            $mimeType = null;
            if ($request->hasFile('attachment')) {
                $file = $request->file('attachment');
                $realname = $file->getClientOriginalName();
                $name = time() . $realname;
                // $attachmentPath = public_path('backEnd/image/test/' . $name);
                $attachmentPath = storage_path('app/public/image/task/' . $name);
                // $file->move('backEnd/image/test', $name);
                $file->storeAs('public/image/task', $name);
                $mimeType = $file->getClientMimeType();
            }

            // dd($mimeType);

            $duplicatecodemax = DB::table('notifications')->max('duplicate_notifications');
            $maxincreament = $duplicatecodemax ? $duplicatecodemax + 1 : 2001;

            foreach ($request->targettype as $targetType) {
                $notification_id = DB::table('notifications')->insertGetId([
                    'title'         => $request->title,
                    'created_by'    => $authid,
                    'targettype'    => $targetType,
                    'mail_content'  => $request->mail_content,
                    'attachment'    => $name,
                    'realname'      => $realname,
                    'duplicate_notifications'    => $maxincreament,
                    'created_at'    => date('Y-m-d H:i:s'),
                    'updated_at'    => date('Y-m-d H:i:s'),
                ]);

                // Check if the targettype is 1 and insert team member IDs
                if ($targetType == 1 && isset($request->teammember_id)) {
                    foreach ($request->teammember_id as $teammember_id) {
                        DB::table('notificationtargets')->insert([
                            'notification_id' => $notification_id,
                            'teammember_id'   => $teammember_id,
                            'created_at'      => date('Y-m-d'),
                            'updated_at'      => date('Y-m-d'),
                        ]);
                    }
                }
            }

            // 1 exist or not in array of $request->targettype
            if (in_array(1, $request->targettype)) {
                $teammembers = Teammember::wherein('id', $request->teammember_id)->pluck('emailid')->toArray();

                // dd($teammembers);
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'attachment' =>  $request->attachment,
                        'emailid' =>  $teammember,
                    );


                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);

                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });

                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
            if (in_array(2, $request->targettype)) {

                $teammembers = Teammember::where('status', 1)->pluck('emailid')->toArray();
                //    dd($teammembers);
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );

                    //  $data['mail']=$teammembers;
                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);

                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
            if (in_array(3, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 13)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );

                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);

                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
            if (in_array(4, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 14)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );
                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);

                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
            if (in_array(5, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 15)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );
                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);

                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
            if (in_array(6, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 16)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );
                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);

                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }
            if (in_array(7, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 17)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,

                    );

                    try {
                        Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name, $mimeType) {
                            $msg->to($data['emailid']);
                            $msg->subject($data['title']);

                            // Attach the file to the email
                            if ($attachmentPath != null) {
                                $msg->attach($attachmentPath, [
                                    'as' => $name,
                                    'mime' => $mimeType,
                                ]);
                            }
                        });
                        Log::info("Email sent successfully to: " . $data['emailid']);
                    } catch (\Exception $e) {
                        Log::error("Failed to send email to: " . $data['emailid'] . ". Error: " . $e->getMessage());
                    }
                }
            }

            $output = array('msg' => 'Sent Successfully');
            return back()->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }
		
	


	
add column realname in notification tables 

Required attachment to be visible in notification module in OMS ```end 


Required a new report for "Pending Independence Confirmation" under the Report tab. ```start hare
vsalocal, vsademo, vsalive//..
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php
<li><a href="{{ url('attendance') }}">Attendance</a></li>


                               @php
                                  $roleId = Auth::user()->role_id;

                                  // create menu using alphabatically hare
                                  $menuItems = [
                                      [
                                          'label' => 'Active Team Report',
                                          'url' => url('adminteammember'),
                                          'roles' => [11],
                                      ],
                                      [
                                          'label' => 'Assignment Report',
                                          'url' => url('assignment_report'),
                                          'roles' => [11, 13, 14, 15],
                                      ],
                                      [
                                          'label' => 'Assignment Time Report',
                                          'url' => url('totaltimeshow'),
                                          'roles' => [11],
                                      ],
                                      [
                                          'label' => 'Assignment Viewer Report',
                                          'url' => url('assignmentviewer'),
                                          'roles' => [11],
                                      ],
                                      [
                                          'label' => 'Attendance',
                                          'url' => url('attendance'),
                                          'roles' => [11, 13, 14, 15],
                                      ],
                                      [
                                          'label' => 'Client List Report',
                                          'url' => url('client-list'),
                                          'roles' => [11, 13],
                                      ],
                                      [
                                          'label' => 'Promotion/Rejoining Report',
                                          'url' => url('permotionrejoiningreport'),
                                          'roles' => [11],
                                      ],
                                      [
                                          'label' => 'Independence',
                                          'url' => url('independencereport'),
                                          'roles' => [11, 13],
                                      ],
                                      [
                                          'label' => 'Team Timesheet Report',
                                          'url' => url('admintimesheetlist'),
                                          'roles' => [11, 13],
                                      ],
                                  ];

                                  //Timesheet Report if teamid available
                                  if (in_array($roleId, [13, 14, 15]) && !empty($permissiontimesheet->teamid)) {
                                      $menuItems[] = [
                                          'label' => 'Timesheet Report',
                                          'url' => url('mytimesheetlist', $permissiontimesheet->teamid),
                                          'roles' => [13, 14, 15],
                                      ];
                                  }

                                  // hare filter all menu using roleId
                                  $filteredMenu = array_filter($menuItems, function ($item) use ($roleId) {
                                      return in_array($roleId, $item['roles']);
                                  });

                                  // Sort the menu alphabetically by label name hare like A, B, C compare first later to another first latter
                                  usort($filteredMenu, function ($a, $b) {
                                      return strcmp($a['label'], $b['label']);
                                  });

                              @endphp

                              <ul class="nav-second-level">
                                  @foreach ($filteredMenu as $item)
                                      <li><a href="{{ $item['url'] }}">{{ $item['label'] }}</a></li>
                                  @endforeach
                              </ul>








22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
find and add both route after this   Route::any('/independencepending/mail/{id}', [IndependenceController::class, 'pendingmail']);

  Route::get('/independencereport', [IndependenceController::class, 'independencereport']);
  Route::any('/filterindependencereport',  [IndependenceController::class, 'filterindependencereport']);








22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\IndependenceController.php
public function store(Request $request)
add below code after this 

       public function independencereport()
    {
        // remove old input data hare 
        session()->forget('_old_input');
        // All assignment data 
        $assignmentRecords = DB::table('assignmentmappings')
            ->where('independenceform', 2)
            ->get();

        $assignmentgenerateid = $assignmentRecords->pluck('assignmentgenerate_id')->unique()->toArray();

        // All teammember data 
        $mainQuery = DB::table('assignmentmappings')
            ->join('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
            ->join('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
            ->join('roles', 'roles.id', '=', 'teammembers.role_id')
            ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
                $join->on('teamrolehistoryteam.teammember_id', '=', 'assignmentteammappings.teammember_id')
                    ->whereRaw('teamrolehistoryteam.created_at < assignmentmappings.created_at');
            })
            ->whereIn('assignmentmappings.assignmentgenerate_id', $assignmentgenerateid)
            ->select(
                'teammembers.id as teammember_id',
                'teammembers.staffcode',
                'roles.rolename',
                'teammembers.team_member',
                'assignmentmappings.assignmentgenerate_id',
                'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
            );

        // Lead partner data  
        $leadPartnerQuery = DB::table('assignmentmappings')
            ->join('teammembers', 'teammembers.id', '=', 'assignmentmappings.leadpartner')
            ->join('roles', 'roles.id', '=', 'teammembers.role_id')
            ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
                $join->on('teamrolehistoryteam.teammember_id', '=', 'assignmentmappings.leadpartner')
                    ->whereRaw('teamrolehistoryteam.created_at < assignmentmappings.created_at');
            })
            ->whereIn('assignmentmappings.assignmentgenerate_id', $assignmentgenerateid)
            ->select(
                'teammembers.id as teammember_id',
                'teammembers.staffcode',
                'roles.rolename',
                'teammembers.team_member',
                'assignmentmappings.assignmentgenerate_id',
                'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
            );

        // other partner data 
        $otherPartnerQuery = DB::table('assignmentmappings')
            ->join('teammembers', 'teammembers.id', '=', 'assignmentmappings.otherpartner')
            ->join('roles', 'roles.id', '=', 'teammembers.role_id')
            ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
                $join->on('teamrolehistoryteam.teammember_id', '=', 'assignmentmappings.otherpartner')
                    ->whereRaw('teamrolehistoryteam.created_at < assignmentmappings.created_at');
            })
            ->whereIn('assignmentmappings.assignmentgenerate_id', $assignmentgenerateid)
            ->select(
                'teammembers.id as teammember_id',
                'teammembers.staffcode',
                'roles.rolename',
                'teammembers.team_member',
                'assignmentmappings.assignmentgenerate_id',
                'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
            );

        // Merging hare all data 
        $independence = $mainQuery
            ->union($leadPartnerQuery)
            ->union($otherPartnerQuery)
            ->get();

        $searchedfiled = $independence;

        // independences submitted or not 
        $independencespendingornot = DB::table('independences')
            ->whereIn('assignmentgenerate_id', $assignmentgenerateid)
            ->get()
            ->groupBy(function ($item) {
                return $item->assignmentgenerate_id . '-' . $item->createdby;
            });

        // dd($independencespendingornot);
        return view('backEnd.independence.independencereport', compact('independence', 'independencespendingornot', 'searchedfiled'));
    }






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\independence\independencereport.blade.php
replace all code 

{{-- <link href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css" rel="stylesheet"> --}}
<link href="https://cdn.datatables.net/buttons/1.7.1/css/buttons.dataTables.min.css" rel="stylesheet">

<link href="{{ url('backEnd/plugins/select2/dist/css/select2.min.css') }}" rel="stylesheet">
<link href="{{ url('backEnd/plugins/select2-bootstrap4/dist/select2-bootstrap4.min.css') }}" rel="stylesheet">
<link href="{{ url('backEnd/plugins/jquery.sumoselect/sumoselect.min.css') }}" rel="stylesheet">

@extends('backEnd.layouts.layout') @section('backEnd_content')
    <div class="content-header row align-items-center m-0">
        <nav aria-label="breadcrumb" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
            @if (Auth::user()->role_id == 11 || Auth::user()->role_id == 13)
                @if (Request::is('filterindependencereport'))
                    <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right">
                        <li>
                            <a href="{{ url('independencereport') }}" style="float: right"
                                class="btn btn-success ml-2">Back</a>
                        </li>
                    </ol>
                @endif
            @endif
        </nav>
        <div class="col-sm-8 header-title p-0">
            <div class="media">
                <div class="header-icon text-success mr-3"><i class="typcn typcn-puzzle-outline"></i></div>
                <div class="media-body">
                    <h1 class="font-weight-bold" style="color:black;">Independence Confirmation</h1>
                    <small>Independence</small>
                </div>
            </div>
        </div>
    </div>

    <div class="body-content">
        <div class="card mb-4">
            @component('backEnd.components.alert')
            @endcomponent
            <div class="card-body">
                <div class="table-responsive">

                    <form method="post" action="{{ url('filterindependencereport') }}" enctype="multipart/form-data"
                        style="margin-bottom: -11px;">
                        @csrf
                        <div class="row">
                            <div class="col-md-{{ Request::is('filterindependencereport') ? '3' : '4' }} col-sm-6">
                                <div class="form-group">
                                    <strong><label for="teammemberId">Team Member</label></strong>
                                    <select class="language form-control" name="teammemberId">
                                        <option value="">Please Select One</option>
                                        @foreach ($searchedfiled->unique('teammember_id') as $independenceData)
                                            <option value="{{ $independenceData->teammember_id }}"
                                                {{ old('teammemberId') == $independenceData->teammember_id ? 'selected' : '' }}>
                                                {{ $independenceData->team_member }}
                                                ({{ $independenceData->teamnewstaffcode ?? ($independenceData->staffcode ?? '') }})
                                            </option>
                                        @endforeach
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-3 col-sm-6 mb-3">
                                <div class="form-group">
                                    <strong><label for="assignmentId">Assignment Id</label></strong>
                                    <select class="language form-control" name="assignmentId">
                                        <option value="">Please Select One</option>
                                        @foreach ($searchedfiled->unique('assignmentgenerate_id') as $independenceData)
                                            <option value="{{ $independenceData->assignmentgenerate_id }}"
                                                {{ old('assignmentId') == $independenceData->assignmentgenerate_id ? 'selected' : '' }}>
                                                {{ $independenceData->assignmentgenerate_id }}
                                            </option>
                                        @endforeach
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-3 col-sm-6 mb-3">
                                <div class="form-group">
                                    <strong><label for="statusId">Status</label></strong>
                                    <select class="language form-control" name="statusId">
                                        <option value="">Please Select One</option>
                                        <option value="Pending"{{ old('statusId') == 'Pending' ? 'selected' : '' }}>Pending
                                        </option>
                                        <option value="Submitted" {{ old('statusId') == 'Submitted' ? 'selected' : '' }}>
                                            Submitted</option>
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-2 col-sm-6 mb-3">
                                <div class="form-group">
                                    <label for="search">&nbsp;</label>
                                    <button type="submit" class="btn btn-success btn-block">Search</button>
                                </div>
                            </div>

                            @if (Request::is('filterindependencereport'))
                                <div class="col-1 d-flex justify-content-center align-items-center">
                                    <div class="form-group m-0">
                                        <a href="{{ url('/independencereport') }}">
                                            <img src="{{ url('backEnd/image/reload.png') }}"
                                                style="width: 30px; height: 30px;" alt="Reload">
                                        </a>
                                    </div>
                                </div>
                            @endif
                        </div>
                    </form>

                    <table id="examplee" class="table display table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Team Member</th>
                                <th>Staff Code</th>
                                <th>Assignment Id</th>
                                <th>Status</th>
                                <th>Submitted Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($independence as $independenceData)
                                @php
                                    // data like  "MAN100025-936"
                                    $key =
                                        $independenceData->assignmentgenerate_id .
                                        '-' .
                                        $independenceData->teammember_id;
                                    // if data exist then find data otherwise assign null value hare
                                    $independenceItem = $independencespendingornot[$key][0] ?? null;
                                    // dd($independenceData);
                                @endphp
                                <tr>
                                    <td style="display: none;">{{ $independenceData->teammember_id }}</td>
                                    <td>
                                        @if ($independenceItem)
                                            <a href="{{ route('independence.show', $independenceItem->id) }}">
                                                {{ $independenceData->team_member }}
                                            </a>
                                        @else
                                            {{ $independenceData->team_member }}
                                        @endif
                                    </td>
                                    <td> {{ $independenceData->teamnewstaffcode ?? ($independenceData->staffcode ?? '') }}
                                    </td>
                                    <td>{{ $independenceData->assignmentgenerate_id }}</td>
                                    <td>
                                        @if ($independenceItem == null)
                                            <span class="badge badge-pill badge-warning">Pending</span>
                                        @else
                                            <span class="badge badge-pill badge-success">Submitted</span>
                                        @endif
                                    </td>
                                    <td>
                                        @if ($independenceItem)
                                            {{ date('d-m-Y', strtotime($independenceItem->created_at)) }}
                                            {{ date('h:i A', strtotime($independenceItem->created_at)) }}
                                        @endif
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
@endsection


<script src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/dataTables.buttons.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/1.7.1/js/buttons.print.min.js"></script>
{{-- date sorting  --}}
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script>
    $(document).ready(function() {
        $('#examplee').DataTable({
            dom: 'lBfrtip',
            columnDefs: [{
                    targets: [0, 1, 2, 3],
                    orderable: false
                },
                {
                    targets: 5, // Submitted Date column
                    type: 'date', // assign date column 
                    render: function(data, type, row) {
                        // date value when sorting/filtering
                        if (type === 'sort' || type === 'type') {
                            return data ? moment(data, 'DD-MM-YYYY hh:mm A').format(
                                'YYYY-MM-DD HH:mm') : '';
                        }
                        return data;
                    }
                }
            ],
            buttons: [{
                    extend: 'excelHtml5',
                    filename: 'Independence Confirmation',
                    exportOptions: {
                        columns: ':visible'
                    },
                    customize: function(xlsx) {
                        var sheet = xlsx.xl.worksheets['sheet1.xml'];
                        $('c', sheet).each(function() {
                            var originalText = $(this).find('is t').text();
                            var cleanedText = originalText.replace(/\s+/g, ' ').trim();
                            $(this).find('is t').text(cleanedText);
                        });
                    }
                },
                'colvis'
            ]
        });
    });
</script>

<script>
    $(document).ready(function() {
        $('form').submit(function(event) {
            var teammemberId = $("[name='teammemberId']").val();
            var assignmentId = $("[name='assignmentId']").val();
            var statusId = $("[name='statusId']").val();

            if (!teammemberId && !assignmentId && !statusId) {
                alert("Please select at least one filter option before searching.");
                $("[name='teammemberId']").focus();
                event.preventDefault();
                return false;
            }
        });
    });
</script>







22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\IndependenceController.php
after this  public function independencereport()

       public function filterindependencereport(Request $request)
    {
        // All assignment data 
        $assignmentRecords = DB::table('assignmentmappings')
            ->where('independenceform', 2)
            ->get();

        $assignmentgenerateid = $assignmentRecords->pluck('assignmentgenerate_id')->unique()->toArray();

        // Base query for team members
        $mainQuery = DB::table('assignmentmappings')
            ->join('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
            ->join('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
            ->join('roles', 'roles.id', '=', 'teammembers.role_id')
            ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
                $join->on('teamrolehistoryteam.teammember_id', '=', 'assignmentteammappings.teammember_id')
                    ->whereRaw('teamrolehistoryteam.created_at < assignmentmappings.created_at');
            })
            ->whereIn('assignmentmappings.assignmentgenerate_id', $assignmentgenerateid)
            ->select(
                'teammembers.id as teammember_id',
                'teammembers.staffcode',
                'roles.rolename',
                'teammembers.team_member',
                'assignmentmappings.assignmentgenerate_id',
                'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
            );

        $leadPartnerQuery = DB::table('assignmentmappings')
            ->join('teammembers', 'teammembers.id', '=', 'assignmentmappings.leadpartner')
            ->join('roles', 'roles.id', '=', 'teammembers.role_id')
            ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
                $join->on('teamrolehistoryteam.teammember_id', '=', 'assignmentmappings.leadpartner')
                    ->whereRaw('teamrolehistoryteam.created_at < assignmentmappings.created_at');
            })
            ->whereIn('assignmentmappings.assignmentgenerate_id', $assignmentgenerateid)
            ->select(
                'teammembers.id as teammember_id',
                'teammembers.staffcode',
                'roles.rolename',
                'teammembers.team_member',
                'assignmentmappings.assignmentgenerate_id',
                'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
            );

        $otherPartnerQuery = DB::table('assignmentmappings')
            ->join('teammembers', 'teammembers.id', '=', 'assignmentmappings.otherpartner')
            ->join('roles', 'roles.id', '=', 'teammembers.role_id')
            ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
                $join->on('teamrolehistoryteam.teammember_id', '=', 'assignmentmappings.otherpartner')
                    ->whereRaw('teamrolehistoryteam.created_at < assignmentmappings.created_at');
            })
            ->whereIn('assignmentmappings.assignmentgenerate_id', $assignmentgenerateid)
            ->select(
                'teammembers.id as teammember_id',
                'teammembers.staffcode',
                'roles.rolename',
                'teammembers.team_member',
                'assignmentmappings.assignmentgenerate_id',
                'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
            );

        // Merge all records
        $independence = $mainQuery
            ->union($leadPartnerQuery)
            ->union($otherPartnerQuery)
            ->get();

        $searchedfiled = $independence;

        // Filter logic start from hare 
        $teammemberId = $request->input('teammemberId');
        $assignmentId = $request->input('assignmentId');
        $statusId = $request->input('statusId');


        $filtered = $independence->filter(function ($item) use ($teammemberId, $assignmentId, $statusId) {

            $key = $item->assignmentgenerate_id . '-' . $item->teammember_id;

            $isSubmitted = DB::table('independences')
                ->where('assignmentgenerate_id', $item->assignmentgenerate_id)
                ->where('createdby', $item->teammember_id)
                ->exists();

            $statusCheck = true;
            if ($statusId === 'Pending' && $isSubmitted) {
                $statusCheck = false;
            } elseif ($statusId === 'Submitted' && !$isSubmitted) {
                $statusCheck = false;
            }

            // hare this is return true and false 
            return (!$teammemberId || $item->teammember_id == $teammemberId)
                && (!$assignmentId || $item->assignmentgenerate_id == $assignmentId)
                && $statusCheck;
        });

        // Create grouping array hare like $filteredKeys = ['MAN001-779', 'MAN001-778']
        $filteredKeys = $filtered->map(function ($item) {
            return $item->assignmentgenerate_id . '-' . $item->teammember_id;
        });
        // Filter logic end hare 

        $independencespendingornot = DB::table('independences')
            ->whereIn(DB::raw("CONCAT(assignmentgenerate_id, '-', createdby)"), $filteredKeys->toArray())
            ->get()
            ->groupBy(function ($item) {
                return $item->assignmentgenerate_id . '-' . $item->createdby;
            });;

        $request->flash();

        return view('backEnd.independence.independencereport', [
            // i have reste vold data hare 
            'independence' => $filtered->values(),
            'independencespendingornot' => $independencespendingornot,
            'searchedfiled' => $searchedfiled,
        ]);
    }






Required a new report for "Pending Independence Confirmation" under the Report tab. ```end hare 



Arrange all the sub-tabs inside the Report tab in ascending order ```start
vsalocal, vsademo, vsalive//..
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php
<li><a href="{{ url('adminteammember') }}">Active Team Report</a></li>

                             @php
                                  $roleId = Auth::user()->role_id;

                                  // create menu using alphabatically hare
                                  $menuItems = [
                                      [
                                          'label' => 'Active Team Report',
                                          'url' => url('adminteammember'),
                                          'roles' => [11],
                                      ],
                                      [
                                          'label' => 'Assignment Report',
                                          'url' => url('assignment_report'),
                                          'roles' => [11, 13, 14, 15],
                                      ],
                                      [
                                          'label' => 'Assignment Time Report',
                                          'url' => url('totaltimeshow'),
                                          'roles' => [11],
                                      ],
                                      [
                                          'label' => 'Assignment Viewer Report',
                                          'url' => url('assignmentviewer'),
                                          'roles' => [11],
                                      ],
                                      [
                                          'label' => 'Attendance',
                                          'url' => url('attendance'),
                                          'roles' => [11, 13, 14, 15],
                                      ],
                                      [
                                          'label' => 'Client List Report',
                                          'url' => url('client-list'),
                                          'roles' => [11, 13],
                                      ],
                                      [
                                          'label' => 'Promotion/Rejoining Report',
                                          'url' => url('permotionrejoiningreport'),
                                          'roles' => [11],
                                      ],
                                      [
                                          'label' => 'Independence',
                                          'url' => url('independencereport'),
                                          'roles' => [11, 13],
                                      ],
                                      [
                                          'label' => 'Team Timesheet Report',
                                          'url' => url('admintimesheetlist'),
                                          'roles' => [11, 13],
                                      ],
                                  ];

                                  //Timesheet Report if teamid available
                                  if (in_array($roleId, [13, 14, 15]) && !empty($permissiontimesheet->teamid)) {
                                      $menuItems[] = [
                                          'label' => 'Timesheet Report',
                                          'url' => url('mytimesheetlist', $permissiontimesheet->teamid),
                                          'roles' => [13, 14, 15],
                                      ];
                                  }

                                  // hare filter all menu using roleId
                                  $filteredMenu = array_filter($menuItems, function ($item) use ($roleId) {
                                      return in_array($roleId, $item['roles']);
                                  });

                                  // Sort the menu alphabetically by label name hare like A, B, C compare first later to another first latter
                                  usort($filteredMenu, function ($a, $b) {
                                      return strcmp($a['label'], $b['label']);
                                  });

                              @endphp

                              <ul class="nav-second-level">
                                  @foreach ($filteredMenu as $item)
                                      <li><a href="{{ $item['url'] }}">{{ $item['label'] }}</a></li>
                                  @endforeach
                              </ul>
							  
				

				

Arrange all the sub-tabs inside the Report tab in ascending order ```end hare 





Required a Delete action for "Qualification documents". ```start
vsalocal, vsademo, vsalive done 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
routes\web.php
remove it
 
  Route::get('qualification/delete/{id}', [BackEndController::class, 'deletequalification']);


app\Http\Controllers\BackEndController.php
remove it 

  public function deletequalification(Request $request, $id)
  {

    try {

      $filedetaails = DB::table('teammember_document_files')->where(['id' => $id])->first();
      if ($filedetaails->document_file) {
        // public\backEnd\image\teammember
        $destinationPath = public_path('backEnd/image/teammember/document_file');
        // Delete the existing file if it exists
        $existingFilePath = $destinationPath . '/' . $filedetaails->document_file;
        if (file_exists($existingFilePath)) {
          unlink($existingFilePath);
        } else {
          $output = ['msg' => "File name {$filedetaails->document_file} does not exist"];
          return back()->with('statuss', $output);
        }
      }
      DB::table('teammember_document_files')->where(['id' => $id])->delete();

      $actionName = class_basename($request->route()->getActionname());
      $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
      $userId = auth()->user()->teammember_id;
      DB::table('activitylogs')->insert([
        'user_id' => $userId,
        'ip_address' => $request->ip(),
        'activitytitle' => $pagename,
        'description' => 'Qualification Deleted: Details ( teammember id = ' . $filedetaails->teamember_id . ', qualification name = ' . $filedetaails->qualification . ', document file name = ' . $filedetaails->document_file . ', Delated By = ' . $userId . ' )',
        'created_at' => now(),
        'updated_at' => now(),
      ]);

      $output = array('msg' => 'Deleted Successfully');
      return back()->with('success', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\teammember\form.blade.php

                  <table class="table display table-bordered table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Qualification</th>
                            <th>Document File</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach ($teamqualification as $teamqualificationData)
                            <tr>
                                <td>{{ $teamqualificationData->qualification ?? '' }}</td>

                                {{-- ! this is for vsalive --}}
                                {{-- <td><a target="blank" target="blank" data-toggle="tooltip"
                                        title="{{ $teamqualificationData->document_file }}"
                                        href="{{ url('backEnd/image/teammember/document_file/' . $teamqualificationData->document_file ?? '') }}">
                                        {{ $teamqualificationData->original_file ?? '' }}</a>
                                </td> --}}

                                {{-- this is for vsalocal --}}
                                <td><a target="blank" target="blank" data-toggle="tooltip"
                                        title="{{ $teamqualificationData->document_file }}"
                                        href="{{ url('backEnd/image/teammember/document_file/' . $teamqualificationData->document_file ?? '') }}">
                                        {{ $teamqualificationData->document_file ?? '' }}</a>
                                </td>
                                <td>
                                    <a href="{{ url('teamqualification/delete/' . $teamqualificationData->id) }}"
                                        onclick="return confirm('Are you sure you want to delete this item?');"
                                        class="btn btn-danger-soft btn-sm"><i class="far fa-trash-alt"></i></a>
                                </td>
                            </tr>
                        @endforeach
                    </tbody>
                </table>
 
 





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222


find   Route::get('/adminteammember', [TeammemberController::class, 'adminteammembers']);

add 
  Route::get('teamqualification/delete/{id}', [TeammemberController::class, 'deletequalification']);







22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php
after it public function adminteammembers()
add 

    public function deletequalification(Request $request, $id)
    {
        try {
            $filedetaails = DB::table('teammember_document_files')->where(['id' => $id])->first();
            if ($filedetaails->document_file) {
                // public\backEnd\image\teammember
                $destinationPath = public_path('backEnd/image/teammember/document_file');
                // Delete the existing file if it exists
                $existingFilePath = $destinationPath . '/' . $filedetaails->document_file;
                if (file_exists($existingFilePath)) {
                    unlink($existingFilePath);
                } else {
                    $output = ['msg' => "File name {$filedetaails->document_file} does not exist"];
                    return back()->with('statuss', $output);
                }
            }
            DB::table('teammember_document_files')->where(['id' => $id])->delete();

            $actionName = class_basename($request->route()->getActionname());
            $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
            $userId = auth()->user()->teammember_id;
            DB::table('activitylogs')->insert([
                'user_id' => $userId,
                'ip_address' => $request->ip(),
                'activitytitle' => $pagename,
                'description' => 'Qualification Deleted: Details ( teammember id = ' . $filedetaails->teamember_id . ', qualification name = ' . $filedetaails->qualification . ', document file name = ' . $filedetaails->document_file . ', Delated By = ' . $userId . ' )',
                'created_at' => now(),
                'updated_at' => now(),
            ]);

            $output = array('msg' => 'Deleted Successfully');
            return back()->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }




       public function deletequalification(Request $request, $id)
    {
        try {

            $filedetaails = DB::table('teammember_document_files')->where(['id' => $id])->first();
            if ($filedetaails->document_file) {
                // public\backEnd\image\teammember
                // $destinationPath = storage_path('backEnd/image/teammember/document_file');
                $destinationPath = public_path('backEnd/image/teammember/document_file');
                // Delete the existing file if it exists
                $existingFilePath = $destinationPath . '/' . $filedetaails->document_file;
                if (file_exists($existingFilePath)) {
                    unlink($existingFilePath);
                }
                // else {
                //     $output = ['msg' => "File name {$filedetaails->document_file} does not exist"];
                //     return back()->with('statuss', $output);
                // }
            }
            DB::table('teammember_document_files')->where(['id' => $id])->delete();

            $actionName = class_basename($request->route()->getActionname());
            $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
            $userId = auth()->user()->teammember_id;
            DB::table('activitylogs')->insert([
                'user_id' => $userId,
                'ip_address' => $request->ip(),
                'activitytitle' => $pagename,
                'description' => 'Qualification Deleted: Details ( teammember id = ' . $filedetaails->teamember_id . ', qualification name = ' . $filedetaails->qualification . ', document file name = ' . $filedetaails->document_file . ', Delated By = ' . $userId . ' )',
                'created_at' => now(),
                'updated_at' => now(),
            ]);

            $output = array('msg' => 'Deleted Successfully');
            return back()->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }






teammember_document_files replace in local only 

Required a Delete action for "Qualification documents". ```end hare 


validation is not showing for 'Hour' column. ```start
vsalocal, vsademo, vsalive//..
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\create.blade.php


                   if (!hour || isNaN(hour) || (hour <= 0 && client != 33)) {
                     isValid = false;
                     errorMessage = 'Please enter a valid hour.';
                     console.log("client:", client);
                     console.log("hour:", hour);
                     $(`#hour${index}`).focus();
                     return false;
                 }
				 
				 
	

resources\views\backEnd\timesheet\create.blade.php
dayOfWeek === 6

                             if ((response.holidayName && response.holidayName !== "null") ||
                                 dayOfWeek === 6) {
                                 applyOffHolidayUI(response, clientNumber);
                             } else {
							 
							 
				  

validation is not showing for 'Hour' column. ```end hare 



Calendar Dates getting open for around 1 month. ```start 
vsalocal, vsademo, vsalive//..
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\js.blade.php
//  prevent date after current date 

                 //  prevent date after current date 
                 if (endDate.getTime() > today.getTime()) {
                     endDate = new Date(today);
                     //  endDate.setDate(today.getDate());
                 }
		
		

Calendar Dates getting open for around 1 month. ```end hare 


After a user rejoins, when the admin filters the data, a warning message appears like 'User left on (date)'. ```start 2nd time
Modification in the Attendance module included in this code 

vsalocal, vsademo, vsalive//..
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AttendanceController.php
public function adminattendancereport(Request $request)



        $singleusersearched = DB::table('teammembers')
            ->where('teammembers.id', $teamnid)
            ->leftJoin(
                'teamrolehistory',
                'teamrolehistory.teammember_id',
                '=',
                'teammembers.id',
            )
            ->leftJoin(
                'rejoiningsamepost',
                'rejoiningsamepost.teammember_id',
                '=',
                'teammembers.id',
            )
            ->select([
                'teammembers.id',
                'teammembers.team_member',
                'teammembers.staffcode',
                'teammembers.joining_date',
                'teammembers.team_member',
                DB::raw(
                    'COALESCE(teamrolehistory.rejoiniedexitdate, rejoiningsamepost.rejoiniedexitdate, teammembers.leavingdate) AS final_leavingdate',
                ),
                DB::raw('COALESCE(teamrolehistory.rejoiningdate, rejoiningsamepost.rejoiningdate,teamrolehistory.promotion_date) AS final_rejoining_date'),
            ])
            ->first();

        // dd($singleusersearched);

        // Check leaving date validation
        if ($singleusersearched && $singleusersearched->final_leavingdate) {
            $final_joiningdate = Carbon::parse($singleusersearched->final_rejoining_date);
            $final_leavingdate = Carbon::parse($singleusersearched->final_leavingdate);
            if ($final_leavingdate->gt($final_joiningdate)) {
                if ($startdate->gt($final_leavingdate)) {
                    $output = ['msg' => 'User left on ' . $final_leavingdate->format('d-m-Y') . ', cannot select beyond this date.'];
                    $request->flash();
                    return redirect()->to('attendance')->with('statuss', $output);
                }
            }
        }
		
		
		
		
	

	
		
		
and 



        $query = DB::table('attendances')
            ->join('teammembers', 'teammembers.id', '=', 'attendances.employee_name')
            ->leftJoin('teamrolehistory', function ($join) {
                $join->on('teamrolehistory.teammember_id', '=', 'attendances.employee_name')
                    ->whereRaw('DATE(teamrolehistory.created_at) <= attendances.fulldate');
            })
            ->leftJoin('rejoiningsamepost', function ($join) {
                $join->on('rejoiningsamepost.teammember_id', '=', 'attendances.employee_name')
                    ->whereRaw('DATE(rejoiningsamepost.rejoiningdate) <= attendances.fulldate');
            })
            // ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
            ->leftJoin('roles as current_role', 'current_role.id', '=', 'teammembers.role_id')
            ->leftJoin('roles as roleidold', 'roleidold.id', '=', 'teamrolehistory.roleid_old')
            ->leftJoin('roles as roleidnew', 'roleidnew.id', '=', 'teamrolehistory.roleid_new')
            ->select([
                'attendances.*',
                'teammembers.team_member',
                'teammembers.staffcode',
                'teammembers.employment_status',
                // Role names
                'current_role.rolename as current_role_name',
                'roleidold.rolename as old_role_name',
                'roleidnew.rolename as new_role_name',
                'teamrolehistory.newstaff_code',
                // Combine rejoining dates 
                DB::raw('COALESCE(teamrolehistory.rejoiningdate, rejoiningsamepost.rejoiningdate,teamrolehistory.promotion_date) AS final_rejoining_date'),
                'teammembers.joining_date'
            ]);






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\adminattendance.blade.php

 <th>Joining / Rejoining Date</th>



 <td> {{ $attendanceData->month }}</td> find and before this line and @foreach ($attendanceDatas as $attendanceData)
   
   

                             @foreach ($attendanceDatas as $attendanceData)
                                <tr>
                                    @php
                                        $promotionandrejoin = DB::table('teamrolehistory')
                                            ->leftJoin('roles', 'roles.id', '=', 'teamrolehistory.roleid_old')
                                            ->where('teammember_id', $attendanceData->employee_name)
                                            ->value('roles.rolename');
                                    @endphp
                                    <td style="display: none;">{{ $attendanceData->id }}</td>
                                    <td>{{ $attendanceData->team_member }}</td>
                                    <td> {{ $attendanceData->newstaff_code ?? ($attendanceData->staffcode ?? '') }}
                                    </td>
                                    <td> {{ !$attendanceData->old_role_name && $promotionandrejoin ? $promotionandrejoin : $attendanceData->current_role_name }}
                                    </td>
                                    <td> {{ $attendanceData->final_rejoining_date ? date('d-m-Y', strtotime($attendanceData->final_rejoining_date)) : date('d-m-Y', strtotime($attendanceData->joining_date)) }}
                                    </td>
									
									

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\teamattendance.blade.php

<th>Joinig / Rejoining Date</th>


 <td> {{ $attendanceData->month }}</td> find and before this line and @foreach ($attendanceDatas as $attendanceData)



                           @foreach ($attendanceDatas as $attendanceData)
                                <tr>
                                    @php
                                        $promotionandrejoin = DB::table('teamrolehistory')
                                            ->leftJoin('roles', 'roles.id', '=', 'teamrolehistory.roleid_old')
                                            ->where('teammember_id', $attendanceData->employee_name)
                                            ->value('roles.rolename');
                                    @endphp
                                    <td style="display: none;">{{ $attendanceData->id }}</td>
                                    <td>{{ $attendanceData->team_member }}</td>
                                    <td> {{ $attendanceData->newstaff_code ?? ($attendanceData->staffcode ?? '') }}
                                    </td>
                                    <td> {{ !$attendanceData->old_role_name && $promotionandrejoin ? $promotionandrejoin : $attendanceData->current_role_name }}
                                    </td>
                                    <td> {{ $attendanceData->final_rejoining_date ? date('d-m-Y', strtotime($attendanceData->final_rejoining_date)) : date('d-m-Y', strtotime($attendanceData->joining_date)) }}
                                    </td>
									
							

							
									


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php
 public function rejoinstore(Request $request)
 $checkrole = DB::table('teammembers')
 

        $checkrole = DB::table('teammembers')
            ->where('id', $request->employeeid)
            ->select('id', 'role_id', 'staffcode', 'staffcodenumber', 'joining_date')
            ->first();
			
		

		



 public function rejoinstore(Request $request)  
 add after this function 

 

       private function updateOrInsertAttendance($employeeId, $rejoiningDate, $joiningDate)
    {

        $rejoining_date = Carbon::parse($rejoiningDate);
        $formatted_date = $rejoining_date->format('Y-m-d');
        $month = $rejoining_date->format('F');
        $year = $rejoining_date->format('Y');
        $dayOfExit = $rejoining_date->day;
        $totalDaysInExitMonth = $rejoining_date->daysInMonth;
        $timestampcreated = $formatted_date . ' ' . now()->format('H:i:s');

        $attendance = DB::table('attendances')
            ->where('employee_name', $employeeId)
            ->where('month', $month)
            ->where('year', $year)
            ->first();

        if ($attendance) {

            $daysToColumns = [
                1 => 'one',
                2 => 'two',
                3 => 'three',
                4 => 'four',
                5 => 'five',
                6 => 'six',
                7 => 'seven',
                8 => 'eight',
                9 => 'nine',
                10 => 'ten',
                11 => 'eleven',
                12 => 'twelve',
                13 => 'thirteen',
                14 => 'fourteen',
                15 => 'fifteen',
                16 => 'sixteen',
                17 => 'seventeen',
                18 => 'eighteen',
                19 => 'ninghteen',
                20 => 'twenty',
                21 => 'twentyone',
                22 => 'twentytwo',
                23 => 'twentythree',
                24 => 'twentyfour',
                25 => 'twentyfive',
                26 => 'twentysix',
                27 => 'twentyseven',
                28 => 'twentyeight',
                29 => 'twentynine',
                30 => 'thirty',
                31 => 'thirtyone'
            ];

            $updateData = [];
            foreach ($daysToColumns as $day => $column) {
                if ($day >= $dayOfExit && $day <= $totalDaysInExitMonth) {
                    // $updateData[$column] = 'X';
                    $updateData[$column] = null;
                }
            }

            DB::table('attendances')
                ->where('id', $attendance->id)
                ->update(array_merge([
                    'fulldate' => $formatted_date,
                    'created_at' => $timestampcreated,
                    'updated_at' => $timestampcreated,
                ], $updateData));
        } else {
            DB::table('attendances')->insert([
                'employee_name' => $employeeId,
                'month' => $month,
                'year' => $year,
                'dateofjoining' => $joiningDate,
                'fulldate' => $formatted_date,
                'created_at' => $timestampcreated,
                'updated_at' => $timestampcreated,
            ]);
        }
    }
	
	


	



 public function rejoinstore(Request $request) 
 'created_at' => Carbon::createFromFormat('Y-m-d', $request->rejoining_date)->toDateTimeString(),  find this 

                DB::table('teamrolehistory')->insert([
                    'teammember_id' => $request->employeeid,
                    'roleid_old' => $checkrole->role_id,
                    'roleid_new' => $request->designationtype,
                    'oldstaff_code' =>  $checkrole->staffcode,
                    'newstaff_code' => $newstaffcoderesult,
                    'old_staffcodenumber' => $checkrole->staffcodenumber,
                    'new_staffcodenumber' => $staffcode,
                    'rejoiningdate' => date('Y-m-d', strtotime($request->rejoining_date)),
                    //hare goes to created date 
                    'rejoiningcreated' => now(),
                    'rejointimesheetstatus' => 1,
                    //hare goes to rejoining date from form becouse all condition apply on create column it is common column for pormotion and rejoining
                    'created_at' => Carbon::createFromFormat('Y-m-d', $request->rejoining_date)->toDateTimeString(),
                    'updated_at' => now(),
                ]);
                $this->updateOrInsertAttendance($request->employeeid, $request->rejoining_date, $checkrole->joining_date);
	
	
	
	
	
	
	
 public function rejoinstore(Request $request) 	
DB::table('rejoiningsamepost')->insert([  find it 	
	
              DB::table('rejoiningsamepost')->insert([
                'teammember_id' => $request->employeeid,
                'rejoiningdate' => date('Y-m-d', strtotime($request->rejoining_date)),
                'created_at' => now(),
                'updated_at' => now(),
            ]);

            $this->updateOrInsertAttendance($request->employeeid, $request->rejoining_date, $checkrole->joining_date);









22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php

 public function permotionandrejoinstore(Request $request)
 
 
        $checkrole = DB::table('teammembers')
            ->where('id', $request->employeeid)
            ->select('id', 'role_id', 'staffcode', 'staffcodenumber', 'joining_date')
            ->first();
			
			
			
	
	


'created_at' => Carbon::createFromFormat('Y-m-d', $request->promotion_date)->toDateTimeString(),	
after this code 


            $this->updateOrInsertAttendance($request->employeeid, $request->promotion_date, $checkrole->joining_date);
	





After a user rejoins, when the admin filters the data, a warning message appears like 'User left on (date)'. ```end hare 2nd time
Implementation in the Attendance module








Whenever 'To' date is edited before submitting timesheet, all inputed data gets omitted. ```start
vsalocal, vsademo, vsalive//..
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\create.blade.php
find fetchAndRender();
after this line comment it 

         // Trigger on end date change
         //  $('#datepickers2').on('change', fetchAndRender);





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\create.blade.php
find   fetchAndRender(); after this script
add this script 

 <script>
     $(document).ready(function() {
         // Object to store fields by date
         let storedFields = {};
         $('#datepickers2').on('change', function() {
             const startDate = new Date($("#datepickers1").val().split('-').reverse().join('-'));
             const endDate = new Date($(this).val().split('-').reverse().join('-'));

             // Calculate all dates in the range
             const allDates = [];
             for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
                 allDates.push(new Date(d));
             }

             // Process existing fields
             $('.field_wrapper').each(function() {
                 const fieldDate = new Date($(this).find('input[name^="day"]').val().split('-')
                     .reverse().join('-'));

                 if (fieldDate > endDate) {
                     // Store field if it's beyond the new end date
                     const dateKey = $(this).find('input[name^="day"]').val();
                     storedFields[dateKey] = $(this).detach();
                 }
             });

             // Add back fields that are now within range
             allDates.forEach(date => {
                 const dateStr = formatDate(date);
                 if (storedFields[dateStr]) {
                     $('#fieldContainer').append(storedFields[dateStr]);
                     // After append delete from storedFields
                     delete storedFields[dateStr];
                 }
             });
         });

         // Helper function to format date as dd-mm-yyyy
         function formatDate(date) {
             // hare padStart(2, '0') means like return 5 then it will be 05 
             const day = String(date.getDate()).padStart(2, '0');
             const month = String(date.getMonth() + 1).padStart(2, '0');
             return `${day}-${month}-${date.getFullYear()}`;
         }
     });
 </script>





Whenever 'To' date is edited before submitting timesheet, all inputed data gets omitted. ```end hare 





Update the period from 'April to current month' to 'January to current month" in the Dashboard KPIs ```start
vsalocal, vsademo, vsalive//.. 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php
$currentMonth = $currentDate->format('F');
replace all places 

      // total working days start from january to december
      $currentDate = Carbon::now();
      $currentMonth = $currentDate->format('F');
      $startDate = Carbon::create($currentDate->year, 1, 1);
      $endDate = Carbon::create($currentDate->year, 12, 31);
	  
	 



	 



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\index.blade.php
(April to
replace all places


 <small style="color:white;">Days ( January to {{ $currentMonth }} )</small>







22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
$currentMonth = $currentDate->format('F');
replace all places 


    // total working days startfrom january to december 
    $currentDate = Carbon::now();
    $currentMonth = $currentDate->format('F');
    $startDate = Carbon::create($currentDate->year, 1, 1);
    $endDate = Carbon::create($currentDate->year, 12, 31);





Update the period from 'April to current month' to 'January to current month" in the Dashboard KPIs ```end hare 



Incorrect UI after user rejoins ```start
vsalocal, vsademo, vsalive//..
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php
rejoinstore(Request $request)
 $checkrole = DB::table('teammembers')

        $checkrole = DB::table('teammembers')
            ->where('id', $request->employeeid)
            ->select('id', 'role_id', 'staffcode', 'staffcodenumber', 'joining_date')
            ->first();

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php

       private function updateOrInsertAttendance($employeeId, $rejoiningDate, $joiningDate)
    {

        $rejoining_date = Carbon::parse($rejoiningDate);
        $formatted_date = $rejoining_date->format('Y-m-d');
        $month = $rejoining_date->format('F');
        $year = $rejoining_date->format('Y');
        $dayOfExit = $rejoining_date->day;
        $totalDaysInExitMonth = $rejoining_date->daysInMonth;
        $timestampcreated = $formatted_date . ' ' . now()->format('H:i:s');

        $attendance = DB::table('attendances')
            ->where('employee_name', $employeeId)
            ->where('month', $month)
            ->where('year', $year)
            ->first();

        if ($attendance) {

            $daysToColumns = [
                1 => 'one',
                2 => 'two',
                3 => 'three',
                4 => 'four',
                5 => 'five',
                6 => 'six',
                7 => 'seven',
                8 => 'eight',
                9 => 'nine',
                10 => 'ten',
                11 => 'eleven',
                12 => 'twelve',
                13 => 'thirteen',
                14 => 'fourteen',
                15 => 'fifteen',
                16 => 'sixteen',
                17 => 'seventeen',
                18 => 'eighteen',
                19 => 'ninghteen',
                20 => 'twenty',
                21 => 'twentyone',
                22 => 'twentytwo',
                23 => 'twentythree',
                24 => 'twentyfour',
                25 => 'twentyfive',
                26 => 'twentysix',
                27 => 'twentyseven',
                28 => 'twentyeight',
                29 => 'twentynine',
                30 => 'thirty',
                31 => 'thirtyone'
            ];

            $updateData = [];
            foreach ($daysToColumns as $day => $column) {
                if ($day >= $dayOfExit && $day <= $totalDaysInExitMonth) {
                    // $updateData[$column] = 'X';
                    $updateData[$column] = null;
                }
            }

            DB::table('attendances')
                ->where('id', $attendance->id)
                ->update(array_merge([
                    'fulldate' => $formatted_date,
                    'created_at' => $timestampcreated,
                    'updated_at' => $timestampcreated,
                ], $updateData));
        } else {
            DB::table('attendances')->insert([
                'employee_name' => $employeeId,
                'month' => $month,
                'year' => $year,
                'dateofjoining' => $joiningDate,
                'fulldate' => $formatted_date,
                'created_at' => $timestampcreated,
                'updated_at' => $timestampcreated,
            ]);
        }
    }







Incorrect UI after user rejoins ```end hare 





'Leaving Date' is not getting updated in the Team List. ```start
vsalocal, vsademo, vsalive//..

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php
public function index()
if (auth()->user()->role_id == 11) {
$teammemberDatas = Teammember::with(['title', 'role']) replace this varable 


             $teammemberDatas = Teammember::with(['title', 'role'])
                ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
                ->whereNotIn('teammembers.id', [793, 878, 447])
                ->select([
                    'teammembers.*',
                    'teamrolehistory.newstaff_code',
                    // Combine leavingdate and joiningdate
                    DB::raw('COALESCE(teamrolehistory.rejoiniedexitdate, rejoiningsamepost.rejoiniedexitdate, teammembers.leavingdate) AS final_leavingdate'),
                    DB::raw('COALESCE(teamrolehistory.rejoiningdate, rejoiningsamepost.rejoiningdate, teammembers.joining_date) AS final_joiningdate'),
                ])
                // ->groupBy('teammembers.id')
                ->get();




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\teammember\index.blade.php
replace it 
strtotime($teammemberData->joining_date)) }}</td>

      <td>{{ date('d-m-Y', strtotime($teammemberData->final_joiningdate)) }}</td>
	
	
	
	
strtotime($teammemberData->leavingdate)) }}</td>
replace it 


 <td>{{ date('d-m-Y', strtotime($teammemberData->final_leavingdate)) }}</td>





'Leaving Date' is not getting updated in the Team List. ```end hare 




Column name for rejoining in the 'Edit Team Member' should be correct ```start
vsalocal, vsademo, vsalive//..
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php
 public function edit($id)
 $teammember = Teammember::where('teammembers.id', $id)
 
 
         $teammember = Teammember::where('teammembers.id', $id)
            ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
            ->select([
                'teammembers.*',
                // Combine leavingdate and joiningdate
                DB::raw('COALESCE(teamrolehistory.rejoiniedexitdate, rejoiningsamepost.rejoiniedexitdate, teammembers.leavingdate) AS final_leavingdate'),
                DB::raw('COALESCE(teamrolehistory.rejoiningdate, rejoiningsamepost.rejoiningdate, teammembers.joining_date) AS final_joiningdate'),
            ])
            ->first();
			
			
			
			
 


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\teammember\form.blade.php
name="joining_date"


    <div class="col-3">
        <div class="form-group">
            <label class="font-weight-600">Joining
                @if (Request::is('teammember/*/edit'))
                    / Rejoining
                @endif Date <span class="text-danger">*</span>
            </label>
            <input type="date" required id="example-date-input" name="joining_date"
                value="{{ $teammember->final_joiningdate ?? '' }}" class="form-control datevalidation"
                placeholder="Enter joining_date">
        </div>
    </div>





find text name="leavingdate"



    <div class="col-3">
        <div class="form-group">
            <label class="font-weight-600">Leaving Date</label>
            <input type="date" id="example-date-input" name="leavingdate"
                value="{{ $teammember->final_leavingdate ?? '' }}" class="form-control datevalidation"
                placeholder="Enter Leaving Date">
        </div>
    </div>
	
	
	
	
	
	
	22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php
  if ($request->leavingdate != null && $request->status == 1) {
  
  



            } else {
                $rejoinExists = DB::table('teamrolehistory')
                    ->where('teammember_id', $id)
                    ->whereNotNull('rejoiningdate')
                    ->exists();

                $rejoinSamePostExists = DB::table('rejoiningsamepost')
                    ->where('teammember_id', $id)
                    ->whereNotNull('rejoiningdate')
                    ->exists();

                if ($rejoinExists || $rejoinSamePostExists) {
                    $data = $request->except(['_token', 'qualification', 'document_file', 'joining_date', 'leavingdate']);
                }
                Teammember::find($id)->update($data);
            }
				 
	

	
		


		
				 
app\Http\Controllers\TeammemberController.php
 $rejoiningleavedate = DB::table('teamrolehistory')


                        if ($rejoiningleavedate) {
                            DB::table('teamrolehistory')
                                ->where('id', $rejoiningleavedate->id)
                                ->update([
                                    'rejoiniedexitdate' => $request->leavingdate,
                                    'rejoiningdate' => $request->joining_date,
                                ]);
                        } else {
                            DB::table('rejoiningsamepost')
                                ->where('teammember_id',  $id)
                                ->update([
                                    'rejoiniedexitdate' => $request->leavingdate,
                                    'rejoiningdate' => $request->joining_date,
                                ]);
                        }
						
						





Column name for rejoining in the 'Edit Team Member' should be correct ``` end hare 






At the time of Assignment view page, user is not able to add 'Other Partner' or 'Additional Partner'. ```start
vsalocal, vsademo, vsalive//..

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\viewassignment.blade.php



                                                <form id="exampleModal120111" method="post"
                                                    action="{{ url('otherpatner/update') }}"
                                                    enctype="multipart/form-data">
                                                    @csrf
                                                    <div class="modal-body">
                                                        <div class="details-form-field form-group row">
                                                            <div class="col-6">
                                                                <div class="form-group">
                                                                    <label class="font-weight-600">Partner Name : <span
                                                                            class="text-danger">*</span></label>
                                                                    <select required class="language form-control"
                                                                        id="exampleFormControlSelect1"
                                                                        name="otherpatnerid">
                                                                        <option value="">Please Select One</option>
                                                                        @foreach ($addonpartner as $teammemberData)
                                                                            <option value="{{ $teammemberData->id }}">
                                                                                {{ $teammemberData->team_member }} (
                                                                                {{ $teammemberData->newstaff_code ?? ($teammemberData->staffcode ?? '') }})
                                                                            </option>
                                                                        @endforeach
                                                                    </select>
                                                                    <input type="hidden" name="assignmentgenerate_id"
                                                                        value="{{ $assignmentbudgetingDatas->assignmentgenerate_id }}"
                                                                        class=" form-control">
                                                                </div>
                                                            </div>
                                                            <div class="col-6">
                                                                <div class="form-group">
                                                                    <label class="font-weight-600">Type : <span
                                                                            class="text-danger">*</span></label>
                                                                    <select required class="language form-control"
                                                                        name="typeid">
                                                                        <option value="">Please Select One</option>
                                                                        {{-- <option value="0">Lead Partner</option> --}}
                                                                        <option value="1">Other Partner</option>
                                                                        <option value="2">Additional Partner</option>
                                                                    </select>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="modal-footer">
                                                        {{-- <button type="button" class="btn btn-danger"
                                                            data-dismiss="modal">Close</button> --}}
                                                        <button type="submit" class="btn btn-success">Submit</button>
                                                    </div>
                                                </form>                                              








22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ChecklistanswerController.php


    public function otherpatnerUpdate(Request $request)
    {
        try {
            // dd($request);
            DB::beginTransaction();
            $assignmentId = $request->assignmentgenerate_id;
            $partnerId = $request->otherpatnerid;
            $partnertype = $request->typeid;

            // Fetch assignment mapping once
            $assignmentMapping = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $assignmentId)
                ->first();

            $assignmentTeammapping = DB::table('assignmentteammappings')
                ->where('assignmentmapping_id', $assignmentMapping->id)
                ->where('teammember_id', $partnerId)
                ->first();

            // Check if the partner is already assigned as lead or other partner
            if ($assignmentMapping->leadpartner == $partnerId || $assignmentMapping->otherpartner == $partnerId || $assignmentTeammapping) {
                return back()->with('statuss', ['msg' => 'This partner is already assigned']);
            }


            // If `otherpartner` is null, update directly
            if ($partnertype == 1) {
                if (!is_null($assignmentMapping->otherpartner)) {
                    return back()->with('statuss', ['msg' => 'This other partner is already assigned please choose additional partner']);
                }
                DB::table('assignmentmappings')
                    ->where('id', $assignmentMapping->id)
                    ->update(['otherpartner' => $partnerId]);
            } else {
                // Insert new mapping into `assignmentteammappings`
                DB::table('assignmentteammappings')->insert([
                    'assignmentmapping_id' => $assignmentMapping->id,
                    'teammember_id' => $partnerId,
                    'type' => 1,
                    'status' => 1,
                    'teamhour' => 0,
                    'created_at' => now(),
                    'updated_at' => now()
                ]);
            }

            // assignment assigned mail start from hare
            $assignmentbudgeting = DB::table('assignmentbudgetings')
                ->where('assignmentgenerate_id', $assignmentId)
                ->first();

            $clientname = DB::table('clients')
                ->where('id', $assignmentbudgeting->client_id)
                ->select('client_name', 'client_code')
                ->first();

            $assignment_name = DB::table('assignments')
                ->where('id', $assignmentbudgeting->assignment_id)->select('assignment_name')->pluck('assignment_name')->first();


            $teamemailpartner = DB::table('teammembers')
                ->where('id', $assignmentMapping->leadpartner)
                ->select('emailid', 'team_member', 'staffcode')
                ->first();

            $teamemailotherpartner = DB::table('teammembers')
                ->where('id', $partnerId)
                ->select('emailid', 'team_member', 'staffcode')
                ->first();

            $teamleader = DB::table('assignmentteammappings')
                ->where('assignmentmapping_id',  $assignmentMapping->id)
                ->where('type', '!=', 1)
                ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
                ->select('teammembers.team_member', 'teammembers.staffcode')
                ->get();

            $data = [
                'assignmentid'      => $assignmentId,
                'clientname'        => $clientname->client_name,
                'clientcode'        => $clientname->client_code,
                'assignmentname'    => $request->assignmentname,
                'assignment_name'   => $assignment_name,
                'emailid'           => $teamemailotherpartner->emailid,
                'otherpatner'       => $teamemailotherpartner,
                'assignmentpartner' => $teamemailpartner,
                'teamleader'        => $teamleader,
                'periodend' => $assignmentMapping->periodend,
                'assignmentgenerate' => $assignmentId,
            ];

            $this->sendAssignmentEmail($data);

            DB::commit();
            // assignment assigned mail end hare
            $output = array('msg' => 'This partner has been added successfully.');
            return back()->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }








At the time of Assignment view page, user is not able to add 'Other Partner' or 'Additional Partner'. ```end hare 



Appointment letter - click on Attachment throws error ```start
vsalocal, vsademo, vsalive//..
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AppointmentletterController.php
replace store function 
 
     public function store(Request $request)
    {
        $request->validate([
            'Name' => "required",
        ]);

        try {
            $data = $request->except(['_token']);
            if ($request->hasFile('attachment')) {
                $file = $request->file('attachment');
                $name = $file->getClientOriginalName();
                $attachmentPath = storage_path('app/public/image/task/' . $name);
                $file->storeAs('public/image/task', $name);
                $data['attachment'] = $name;
            }

            $data['createdby'] = auth()->user()->teammember_id;
            appointmentletter::Create($data);

            $output = array('msg' => 'Create Successfully');
            return back()->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }







22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\appointmentletter\index.blade.php
find text  @if ($appointmentletterData->attachment != null)
replace if block 
 
 
                                    @if ($appointmentletterData->attachment != null)
                                        <td>
                                            <a href="{{ asset('storage/app/public/image/task/' . $appointmentletterData->attachment) }}"
                                                target="blank">
                                                <i class="fas fa-file-pdf">{{ $appointmentletterData->attachment }}</i>
                                            </a>
                                        </td>
                                    @else
                                        <td></td>
                                    @endif
									
	

	

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AppointmentletterController.php ##``

     public function update(Request $request, $id)
    {
        $request->validate([
            'Name' => "required",
        ]);
        try {
            $data = $request->except(['_token']);
            if ($request->hasFile('attachment')) {
                $file = $request->file('attachment');
                $name = $file->getClientOriginalName();
                $attachmentPath = storage_path('app/public/image/task/' . $name);
                $file->storeAs('public/image/task', $name);
                $data['attachment'] = $name;
            }
            $data['updatedby'] = auth()->user()->teammember_id;
            Appointmentletter::find($id)->update($data);
            $output = array('msg' => 'Updated Successfully');
            return redirect('appointmentletter')->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }




									
									
Appointment letter - click on Attachment throws error ```end hare	

								

Missing Assignment in the Manager Role ```start
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ReportController.php
remove all // public function who is commented on vsalive and vsademo done 

 $assignmentmappingcloseData = $assignmentmappingClosedotherpartner->merge($assignmentmappingClosedleadpartner);



 $assignmentmappingcloseData = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->leftJoin('assignments', 'assignments.id', '=', 'assignmentmappings.assignment_id')
        ->where('assignmentbudgetings.status', '0')
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->where(function ($query) {
          $userId = auth()->user()->teammember_id;
          $query->where('assignmentmappings.leadpartner', $userId)
            ->orWhere('assignmentmappings.otherpartner', $userId)
            ->orWhere('assignmentteammappings.teammember_id', $userId);
        })
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
          'assignmentmappings.otherpartner'
        )
        ->distinct()
        ->get();




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\clientlist.blade.php
 @foreach ($clientassignment as $clientassignmentDatas)
 
 
                                             @php
                                                $additionalpartnercheck = DB::table('assignmentteammappings')
                                                    ->where('assignmentmapping_id', $clientassignmentDatas->id)
                                                    ->where('teammember_id', auth()->user()->teammember_id)
                                                    ->where('type', 1)
                                                    ->first();
                                            @endphp
											
											
											
											       @if (
                                                        $clientassignmentDatas->leadpartner == auth()->user()->teammember_id ||
                                                            $clientassignmentDatas->otherpartner == auth()->user()->teammember_id ||
                                                            $additionalpartnercheck)
 





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\yearwisepartnerlist.blade.php  dought


                             <th class="textfixed">Additional Partner</th>


                                    @foreach ($otherassigned as $assignmentmappingDatas)
                                        <tr>
                                            <td>
                                                <a
                                                    href="{{ url('/viewassignment/' . $assignmentmappingDatas->assignmentgenerate_id) }}">
                                                    {{ $assignmentmappingDatas->assignmentgenerate_id }}
                                                </a>
                                            </td>
                                            <td class="textfixed">
                                                {{ $assignmentmappingDatas->assignment_name }}
                                                @if ($assignmentmappingDatas->assignmentname)
                                                    ({{ $assignmentmappingDatas->assignmentname }})
                                                @endif
                                            </td>
                                            <td class="textfixed">{{ $assignmentmappingDatas->client_name }}</td>
                                            <td>{{ $assignmentmappingDatas->client_code }}</td>
                                            <td class="textfixed">
                                                @if ($assignmentmappingDatas->duedate)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingDatas->duedate)) }}
                                                @endif
                                            </td>
                                            <td class="textfixed">
                                                @if ($assignmentmappingDatas->periodend)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodend)) }}
                                                @endif
                                            </td>
                                            <td class="textfixed">{{ $assignmentmappingDatas->lead_name ?? '' }}</td>
                                            <td>
                                                {{ $assignmentmappingDatas->lead_newcode ?? ($assignmentmappingDatas->lead_code ?? '') }}
                                            </td>
                                            <td class="textfixed">{{ $assignmentmappingDatas->other_name ?? '' }}</td>
                                            <td>
                                                {{ $assignmentmappingDatas->other_newcode ?? ($assignmentmappingDatas->other_code ?? '') }}
                                            </td>
                                            <td class="textfixed">
                                                {{-- $assignmentTeams[$assignmentmappingDatas->id] not exist then create empty error using [] --}}
                                                @foreach ($assignmentTeams[$assignmentmappingDatas->id] ?? [] as $sub)
                                                    @if ($sub && $sub->type == 1)
                                                        {{ $sub->team_member }} ({{ $sub->staffcode }}),
                                                    @endif
                                                @endforeach
                                            </td>
                                            <td class="textfixed">
                                                @foreach ($assignmentTeams[$assignmentmappingDatas->id] ?? [] as $sub)
                                                    @if ($sub && $sub->type != 1)
                                                        <a class="avatar avatar-xs" data-toggle="tooltip"
                                                            title="{{ $sub->team_member }} ({{ $sub->staffcode }})">
                                                            <img src="{{ $sub->profilepic
                                                                ? asset('backEnd/image/teammember/profilepic/' . $sub->profilepic)
                                                                : url('backEnd/image/dummy.png') }}"
                                                                class="avatar-img rounded-circle" alt="...">
                                                        </a>
                                                    @endif
                                                @endforeach
                                            </td>
                                            @if (auth()->user()->role_id != 15 && auth()->user()->role_id != 11)
                                                <td>
                                                    <a href="{{ url('/assignmentlist/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                                        class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                </td>
                                            @endif
                                        </tr>
                                    @endforeach






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php
  public function yearWise(Request $request)
   elseif (auth()->user()->role_id == 13) {
  

       } elseif (auth()->user()->role_id == 13) {
            $clientid = $request->clientid;
            $assigned =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                    'assignmentbudgetings.assignmentname'
                )->distinct()->get();

            $otherassigned = DB::table('assignmentmappings')
                ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
                ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
                ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
                ->leftJoin('assignments', 'assignments.id', '=', 'assignmentmappings.assignment_id')
                ->leftJoin('teammembers as lead', 'lead.id', '=', 'assignmentmappings.leadpartner')
                ->leftJoin('teamrolehistory as leadrole', 'leadrole.teammember_id', '=', 'lead.id')
                ->leftJoin('teammembers as other', 'other.id', '=', 'assignmentmappings.otherpartner')
                ->leftJoin('teamrolehistory as otherrole', 'otherrole.teammember_id', '=', 'other.id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where(function ($query) {
                    $userId = auth()->user()->teammember_id;
                    $query->where('assignmentmappings.otherpartner', $userId)
                        ->orWhere('assignmentteammappings.teammember_id', $userId);
                })
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                    'assignmentbudgetings.assignmentname',
                    'lead.team_member as lead_name',
                    'lead.staffcode as lead_code',
                    'leadrole.newstaff_code as lead_newcode',
                    'other.team_member as other_name',
                    'other.staffcode as other_code',
                    'otherrole.newstaff_code as other_newcode'
                )
                ->distinct()
                ->get();

            $assignmentIds = $otherassigned->pluck('id');


            $assignmentTeams = DB::table('assignmentteammappings')
                ->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
                ->whereIn('assignmentteammappings.assignmentmapping_id', $assignmentIds)
                // ->where('assignmentteammappings.type', '!=', 1)
                ->select('assignmentteammappings.assignmentmapping_id', 'assignmentteammappings.type', 'teammembers.*')
                ->get()
                ->groupBy('assignmentmapping_id');
            // dd($assignmentTeams);

            return view('backEnd.assignmentmapping.yearwisepartnerlist', compact('assigned', 'otherassigned', 'clientid', 'assignmentTeams'));
        }



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php
 public function index()
elseif (auth()->user()->role_id == 13) {




  $assignment = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
        ->leftJoin('assignments', 'assignments.id', '=', 'assignmentbudgetings.assignment_id')
        ->leftJoin('clients', 'clients.id', '=', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $userId = auth()->user()->teammember_id;
          $query->where('assignmentmappings.leadpartner', $userId)
            ->orWhere('assignmentmappings.otherpartner', $userId)
            ->orWhere('assignmentteammappings.teammember_id', $userId);
        })
        ->where('assignmentbudgetings.status', 1)
        ->select([
          'assignmentmappings.id',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        ])
        ->distinct()
        ->take(5)
        ->get();






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php
 public function index()
 } elseif (auth()->user()->role_id == 13) {
 
            $assignmentmappingData = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->where(function ($query) {
                    $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                        ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id)
                        ->orWhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id);
                })
                ->where('assignmentbudgetings.status', 1)
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                ->distinct()->get(); 
 






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\report\assignmentreport.blade.php

 <th>Other Partner Code</th>
 
 1
                                           
                                            <th>Additional Partner</th>

                                                <td>
                                                    @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 1)->get() as $sub)
                                                        {{ $sub->team_member }} ,
                                                    @endforeach
                                                </td>
												
												
												

2

                                            <th>Additional Partner</th>
											
                                            <td>
                                                @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingcloseDatas->id)->where('assignmentteammappings.type', 1)->get() as $sub)
                                                    {{ $sub->team_member }} ,
                                                @endforeach
                                            </td>	


											

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\clientlist.blade.php
<th class="textfixed">Other Partner Code</th>

                                  <th class="textfixed">Additional Partner</th>

                                     
find  @if ($otherPartner && $otherPartner->team_member)



                                            <td class="textfixed">
                                                @foreach (DB::table('assignmentmappings')->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
                $join->on('teamrolehistoryteam.teammember_id', '=', 'assignmentteammappings.teammember_id')->on('teamrolehistoryteam.created_at', '<', 'assignmentmappings.created_at');
            })->where('assignmentmappings.id', $clientassignmentDatas->id)->where('assignmentteammappings.type', 1)->select('assignmentmappings.*', 'assignmentteammappings.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.profilepic', 'teamrolehistoryteam.newstaff_code')->get() as $sub)
                                                    {{ $sub->team_member }}
                                                    ({{ $sub->newstaff_code ?? ($sub->staffcode ?? '') }})
                                                @endforeach
                                            </td>




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\yearwise.blade.php

                              <th class="textfixed">Additional Partner</th>



                                  <td>
                                        @if ($otherPartner && $otherPartner->team_member)
                                            {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }}
                                        @endif
                                    </td>

                                    <td class="textfixed">
                                        @foreach (DB::table('assignmentmappings')->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')->leftJoin('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
                $join->on('teamrolehistoryteam.teammember_id', '=', 'assignmentteammappings.teammember_id')->on('teamrolehistoryteam.created_at', '<', 'assignmentmappings.created_at');
            })->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 1)->select('assignmentmappings.*', 'assignmentteammappings.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.profilepic', 'teamrolehistoryteam.newstaff_code')->get() as $sub)
                                            {{ $sub->team_member }} ({{ $sub->newstaff_code ?? ($sub->staffcode ?? '') }})
                                        @endforeach
                                    </td>



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\report\openandcloseassignment.blade.php


                                <th>Other Partner Code</th>
                                <th>Additional Partner</th>
								
								
								
                                    <td>
                                        @if ($otherPartner && $otherPartner->team_member)
                                            {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }}
                                        @endif
                                    </td>
                                    <td>
                                        @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 1)->get() as $sub)
                                            {{ $sub->team_member }}
                                        @endforeach
                                    </td>

done above all code related this task only left reject timesheet 
4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444dd
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
 public function timesheeteditstore(Request $request)
  if (!is_numeric($request->assignment_id)) {
  if (auth()->user()->role_id == 13) {
  
  and after this block aad below code  if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
 
 
 
   $gettotalteamhour = DB::table('assignmentteammappings')
          ->join('assignmentmappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
          ->where('assignmentmappings.assignmentgenerate_id', $oldtimesheetdata->assignmentgenerate_id)
          ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
          ->value('teamhour') ?? 0;

        $finalresult =  $gettotalteamhour - $oldtimesheetdata->hour;

        if ($finalresult >= 0) {
          DB::table('assignmentteammappings')
            ->join('assignmentmappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
            ->where('assignmentmappings.assignmentgenerate_id', $oldtimesheetdata->assignmentgenerate_id)
            ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->update(['teamhour' => $finalresult]);
        }

        $gettotalteamhournew = DB::table('assignmentteammappings')
          ->join('assignmentmappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
          ->where('assignmentmappings.assignmentgenerate_id', $request->assignment_id)
          ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
          ->value('teamhour') ?? 0;

        $finalresult =   $gettotalteamhournew + $request->hour;

        if ($finalresult >= 0) {
          DB::table('assignmentteammappings')
            ->join('assignmentmappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment_id)
            ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->update(['teamhour' => $finalresult]);
        }






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
 public function timesheeteditstore(Request $request)
   if (is_numeric($request->assignment_id)) {
  if (auth()->user()->role_id == 13) {
  
  and after this block aad below code   if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {

if ($assignmentdata->otherpartner != auth()->user()->teammember_id && $assignmentdata->leadpartner != auth()->user()->teammember_id) {
            $gettotalteamhour = DB::table('assignmentteammappings')
              ->join('assignmentmappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
              ->where('assignmentmappings.assignmentgenerate_id', $oldtimesheetdata->assignmentgenerate_id)
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              ->value('teamhour') ?? 0;

            $subtractoldhour =  $gettotalteamhour - $oldtimesheetdata->hour;
            $finalresult =  $subtractoldhour + $request->hour;

            if ($finalresult >= 0) {
              DB::table('assignmentteammappings')
                ->join('assignmentmappings', 'assignmentteammappings.assignmentmapping_id', '=', 'assignmentmappings.id')
                ->where('assignmentmappings.assignmentgenerate_id', $oldtimesheetdata->assignmentgenerate_id)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                ->update(['teamhour' => $finalresult]);
            }
          }



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php
public function clientassignmentList($id)
} elseif (auth()->user()->role_id == 13) {


        $assignmentmappingData = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->select('assignmentmappings.year')
                ->where('clients.id', $id)
                ->where(function ($query) {
                    $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                        ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id)
                        ->orWhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id);
                })
                ->distinct()->get();


Missing Assignment in the Manager Role  ```end hare 


Incorrect Joining date for employee who rejoins ```bugs
vsademo, 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AttendanceController.php
 find and replace it  ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')



            ->leftJoin('rejoiningsamepost', function ($join) {
                $join->on('rejoiningsamepost.teammember_id', '=', 'attendances.employee_name')
                    ->whereRaw('DATE(rejoiningsamepost.rejoiningdate) <= attendances.fulldate');
            })


Incorrect Joining date for employee who rejoins ```bugs end hare  


In the Team Application tab on the Partner ID, the latest data should appear by default ```start
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php
  public function index()
} else {


      $teamapplyleaveDatasfilter  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftJoin('roles', 'roles.id', '=', 'teammembers.role_id')
        ->leftJoin(DB::raw('
          (SELECT teammember_id, newstaff_code 
           FROM teamrolehistory 
           WHERE created_at = (SELECT MAX(created_at) 
                               FROM teamrolehistory th2 
                               WHERE th2.teammember_id = teamrolehistory.teammember_id)
          ) AS teamrolehistory
      '), function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id');
        })
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.emailid', 'roles.rolename', 'leavetypes.name', 'teamrolehistory.newstaff_code')
        ->distinct()
        ->get();
		
		
pass this varable in view $teamapplyleaveDatasfilter


and 

 } elseif ($permotioncheck && auth()->user()->role_id == 13) {


      $teamapplyleaveDatasfilter  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftJoin('roles', 'roles.id', '=', 'teammembers.role_id')
        ->leftJoin(DB::raw('
          (SELECT teammember_id, newstaff_code 
           FROM teamrolehistory 
           WHERE created_at = (SELECT MAX(created_at) 
                               FROM teamrolehistory th2 
                               WHERE th2.teammember_id = teamrolehistory.teammember_id)
          ) AS teamrolehistory
      '), function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id');
        })
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.emailid', 'roles.rolename', 'leavetypes.name', 'teamrolehistory.newstaff_code')
        ->distinct()
        ->get();
		
		
pass this varable in view $teamapplyleaveDatasfilter




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php
  public function filterDataAdmin(Request $request)
   $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);
     

    if (auth()->user()->role_id == 13) {
      $teamapplyleaveDatasfilter  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftJoin('roles', 'roles.id', '=', 'teammembers.role_id')
        ->leftJoin(DB::raw('
    (SELECT teammember_id, newstaff_code 
     FROM teamrolehistory 
     WHERE created_at = (SELECT MAX(created_at) 
                         FROM teamrolehistory th2 
                         WHERE th2.teammember_id = teamrolehistory.teammember_id)
    ) AS teamrolehistory
    '), function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id');
        })
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.emailid', 'roles.rolename', 'leavetypes.name', 'teamrolehistory.newstaff_code')
        ->distinct()
        ->get();
    } else {
      $teamapplyleaveDatasfilter  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftJoin('roles', 'roles.id', '=', 'teammembers.role_id')
        ->leftJoin(DB::raw('
      (SELECT teammember_id, newstaff_code 
     FROM teamrolehistory 
     WHERE created_at = (SELECT MAX(created_at) 
                         FROM teamrolehistory th2 
                         WHERE th2.teammember_id = teamrolehistory.teammember_id)
     ) AS teamrolehistory
     '), function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id');
        })
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.emailid', 'roles.rolename', 'leavetypes.name', 'teamrolehistory.newstaff_code')
        ->distinct()
        ->get();
    }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\teamapplication.blade.php
remove it 

     <div class="body-content">
     </div>
	 
	 
replace it  
                             <div class="col-3">
                                 <div class="form-group">
                                     <strong> <label class="font-weight-600">End Leave Period <span id="endPeriodAsterisk"
                                                 class="text-danger d-none">*</span></label></strong>
                                     <input type="date" class="form-control endclass" id="endperiod1" name="endperiod"
                                         value="{{ old('endperiod') }}">
                                 </div>
                             </div>
							 
							 
							 
							 
btn-block">Search</button>  after this div add below code 


                             <div class="col-1 d-flex justify-content-center align-items-center">
                                 <div class="form-group m-0">
                                     <a href="{{ url('/applyleave') }}">
                                         <img src="{{ url('backEnd/image/reload.png') }}"
                                             style="width: 30px; height: 30px;" alt="Reload">
                                     </a>
                                 </div>
                             </div>
							 
							 
							 
remove below code 

                             {{-- <tr>
                                 <div class="refresh-btn-container"
                                     style="position: relative; left: 305px; top: 34px; z-index: 1;">
                                     <a href="{{ url('/applyleave') }}" class="btn btn-success">Refresh</a>
                                 </div>
                             </tr> --}}



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\teamapplication.blade.php
 function validateDateRange(startSelector, endSelector, errorMessage) {
 
 
 remove this script from this file 


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\js.blade.php
add below code end of the file 

 @if (Request::is('applyleave') || Request::is('filtering-applyleve'))
     <script>
         $(document).ready(function() {
             function validateDateRange(startSelector, endSelector, errorMessage) {
                 var startDateInput = $(startSelector);
                 var endDateInput = $(endSelector);

                 function compareDates() {
                     var startDate = new Date(startDateInput.val());
                     var endDate = new Date(endDateInput.val());

                     if (startDate > endDate) {
                         alert(errorMessage);
                         endDateInput.val('');
                     }
                 }

                 startDateInput.on('input', compareDates);
                 endDateInput.on('blur', compareDates);
             }

             function validateYearInput(inputSelector) {
                 $(inputSelector).on('change', function() {
                     var input = $(this);
                     var dateValue = new Date(input.val());
                     var year = dateValue.getFullYear();
                     if (year.toString().length > 4) {
                         alert('Enter four digits for the year');
                         input.val('');
                     }
                 });
             }

             // Apply date range validation
             validateDateRange('#start1', '#end1',
                 "'End Request Date' should be greater than or equal to the 'Start Request Date'");
             validateDateRange('#startperiod1', '#endperiod1',
                 "'End Leave Period' should be greater than or equal to the 'Start Leave Period'");

             // Apply year validation
             validateYearInput('#start1');
             validateYearInput('#end1');
             validateYearInput('#startperiod1');
             validateYearInput('#endperiod1');


             // Validation on submit button click 
             //  $('form').submit(function(event) {
             $('#filterform').submit(function(event) {
                 var fields = ['#employee1', '#leave1', '#status1', '#start1', '#end1', '#startperiod1',
                     '#endperiod1'
                 ];

                 var allEmpty = fields.every(function(selector) {
                     return $(selector).val() === "";
                 });

                 if (allEmpty) {
                     alert("Please select data for filter");
                     event.preventDefault(); // Prevent form submission if all fields are empty
                 }

                 // Validate date pairs
                 var startDate = $('#start1').val();
                 var endDate = $('#end1').val();
                 var startPeriod = $('#startperiod1').val();
                 var endPeriod = $('#endperiod1').val();

                 function validateDatePair(start, end, asteriskId, message) {
                     if (start && !end) {
                         alert(message);
                         $(asteriskId).removeClass("d-none"); // Show the asterisk
                         event.preventDefault();
                         return false;
                     }
                     $(asteriskId).addClass("d-none"); // Hide the asterisk if validation passes
                     return true;
                 }

                 // Validate both date ranges and show the corresponding asterisk
                 if (!validateDatePair(startDate, endDate, "#endDateAsterisk",
                         "Please select an 'End Request Date'.") ||
                     !validateDatePair(startPeriod, endPeriod, "#endPeriodAsterisk",
                         "Please select an 'End Leave Period'.")) {
                     return; // Stop if any validation fails
                 }
                 // Validate date pairs end hare 

             });
         });
     </script>
 @endif



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\index.blade.php
replace all code in this file from  TempraryStore file\replace file\index.blade.php






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
public\backEnd\image\reload.png 
check hare capitallinternal.png imaage exist or not if exist then add reload image hare 






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\teamapplication.blade.php
replace all hare 

 <link href="https://cdn.datatables.net/buttons/1.7.1/css/buttons.dataTables.min.css" rel="stylesheet">

 <link href="{{ url('backEnd/plugins/select2/dist/css/select2.min.css') }}" rel="stylesheet">
 <link href="{{ url('backEnd/plugins/select2-bootstrap4/dist/select2-bootstrap4.min.css') }}" rel="stylesheet">
 <link href="{{ url('backEnd/plugins/jquery.sumoselect/sumoselect.min.css') }}" rel="stylesheet">
 
 
 
 
find it and replace 
<table id="examplee" class="display nowrap">

                     <table id="examplee" class="table display table-bordered table-striped table-hover">





In the Team Application tab on the Partner ID, the latest data should appear by default ```end hare 


The filter reset functionality should clear all applied filters ```start 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\teamapplication.blade.php
 value="{{ old('endperiod') }}">
 

                             <div class="col-{{ Request::is('applyleave') ? '4' : '3' }}">
                                 <div class="form-group">
                                     <strong> <label class="font-weight-600">End Leave Period <span id="endPeriodAsterisk"
                                                 class="text-danger d-none">*</span></label></strong>
                                     <input type="date" class="form-control endclass" id="endperiod1" name="endperiod"
                                         value="{{ old('endperiod') }}">
                                 </div>
                             </div>







 <div class="col-1 d-flex justify-content-center align-items-center">
 
 
 

                             @if (Request::is('filtering-applyleve'))
                                 <div class="col-1 d-flex justify-content-center align-items-center">
                                     <div class="form-group m-0">
                                         <a href="{{ url('/applyleave') }}">
                                             <img src="{{ url('backEnd/image/reload.png') }}"
                                                 style="width: 30px; height: 30px;" alt="Reload">
                                         </a>
                                     </div>
                                 </div>
                             @endif




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\myteamindex.blade.php

<label class="font-weight-600">End Date</label>

                          <div class="col-4" id="end-date-col">
                              <div class="form-group">
                                  <label class="font-weight-600">End Date</label>
                                  <input type="date" class="form-control" name="end" id="end">
                              </div>
                          </div>



<label class="font-weight-600">End Date</label>  after this div add below code 


                          <div class="col-1 d-flex justify-content-center align-items-center" id="reload-button-template">
                              <div class="form-group m-0 d-none">
                                  <a href="{{ url('/timesheet/allteamsubmitted') }}">
                                      <img src="{{ url('backEnd/image/reload.png') }}"
                                          style="width: 30px; height: 30px; margin-top: 12px;" alt="Reload">
                                  </a>
                              </div>
                          </div>
						  
						  
		

		
						  
						  
 var search9 = $('#end').val();

 
						  
              var search9 = $('#end').val();

              $('#end-date-col').removeClass('col-4').addClass('col-3');

              if ($('#reload-button-template .form-group').hasClass('d-none')) {
                  $('#reload-button-template .form-group').removeClass('d-none');
              }						  


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\assignmentlistwithhour.blade.php


 <link href="https://cdn.datatables.net/buttons/1.7.1/css/buttons.dataTables.min.css" rel="stylesheet">

 <link href="{{ url('backEnd/plugins/select2/dist/css/select2.min.css') }}" rel="stylesheet">
 <link href="{{ url('backEnd/plugins/select2-bootstrap4/dist/select2-bootstrap4.min.css') }}" rel="stylesheet">
 <link href="{{ url('backEnd/plugins/jquery.sumoselect/sumoselect.min.css') }}" rel="stylesheet">





<form method="get" action="{{ url('totaltimeshow/filter') }}" enctype="multipart/form-data">


                     <form method="get" action="{{ url('totaltimeshow/filter') }}" enctype="multipart/form-data">
                         @csrf
                         @php
                             $teamselect = $teammemberDatas->unique('teamid')->sortBy('team_member');
                             $partnerselect = $teammemberDatas
                                 ->unique('assignmentgenerate_id')
                                 ->sortBy('assignmentgenerate_id');
                         @endphp
                         <div class="row">
                             <div class="col-5">
                                 <div class="form-group">
                                     <strong><label for="employee">Teammember</label></strong>
                                     <select class="language form-control" id="employee" name="employee">
                                         <option value="">Please Select One</option>
                                         @foreach ($teamselect as $teammemberData)
                                             @php
                                                 $permotioncheck = $roleHistories->get($teammemberData->teamid);
                                                 $displayCode =
                                                     $permotioncheck->newstaff_code ?? $teammemberData->staffcode;
                                             @endphp
                                             <option value="{{ $teammemberData->teamid }}/{{ $teammemberData->role_id }}"
                                                 {{ old('employee') == $teammemberData->teamid . '/' . $teammemberData->role_id ? 'selected' : '' }}>
                                                 {{ $teammemberData->team_member }} ({{ $displayCode }})
                                             </option>
                                         @endforeach
                                     </select>
                                 </div>
                             </div>
                             <div class="col-{{ Request::is('totaltimeshow') ? '5' : '4' }}">
                                 <div class="form-group">
                                     <strong><label for="assignmentgenerateid">Assignment Id</label></strong>
                                     <select class="language form-control" id="assignmentgenerateid"
                                         name="assignmentgenerateid">
                                         <option value="">Please Select One</option>
                                         @foreach ($partnerselect as $assignmentData)
                                             <option value="{{ $assignmentData->assignmentgenerate_id }}"
                                                 {{ old('assignmentgenerateid') == $assignmentData->assignmentgenerate_id ? 'selected' : '' }}>
                                                 {{ $assignmentData->assignmentgenerate_id }}
                                             </option>
                                         @endforeach
                                     </select>
                                 </div>
                             </div>
                             <div class="col-2 mb-3">
                                 <div class="form-group">
                                     <label for="search">&nbsp;</label>
                                     <button type="submit" class="btn btn-success btn-block">Search</button>
                                 </div>
                             </div>
                             @if (Request::is('totaltimeshow/filter'))
                                 <div class="col-1 d-flex justify-content-center align-items-center">
                                     <div class="form-group m-0">
                                         <a href="{{ url('/totaltimeshow') }}">
                                             <img src="{{ url('backEnd/image/reload.png') }}"
                                                 style="width: 30px; height: 30px;" alt="Reload">
                                         </a>
                                     </div>
                                 </div>
                             @endif
                         </div>
                     </form>
					 
					

					
					 
					 
					 
					 
					 
<table id="examplee" class="display nowrap">



                     <table id="examplee" class="table display table-bordered table-striped table-hover">



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AttendanceController.php
public function index()
  if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
  
  
  
  
if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {  
    session()->forget('_old_input');





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\adminattendance.blade.php
<strong><label for="teammemberId">Employee Name</label></strong>

	
	
    <div class="col-md-{{ Request::is('attendance-filter') ? '3' : '4' }} col-sm-6 mb-3">





 <button type="submit" class="btn btn-success btn-block">Search</button> after this div
 

                            @if (Request::is('attendance-filter'))
                                <div class="col-1 d-flex justify-content-center align-items-center">
                                    <div class="form-group m-0">
                                        <a href="{{ url('/attendance') }}">
                                            <img src="{{ url('backEnd/image/reload.png') }}"
                                                style="width: 30px; height: 30px;" alt="Reload">
                                        </a>
                                    </div>
                                </div>
                            @endif
							
							

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\timesheetdownload.blade.php



                                  <th>Action</th>
                                  @if (Request::is('adminsearchtimesheet'))
                                      <th>Refresh</th>
                                  @endif

								  								  
								  
								  
<button type="submit" class="btn btn-success">Search</button> add below code after this td


								  
                                  @if (Request::is('adminsearchtimesheet'))
                                      <td class="d-flex justify-content-center align-items-center">
                                          <a href="{{ url('/admintimesheetlist') }}">
                                              <img src="{{ url('backEnd/image/reload.png') }}"
                                                  style="width: 30px; height: 30px;" alt="Reload">
                                          </a>
                                      </td>
                                  @endif	

								  



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
 public function admintimesheetlist(Request $request)



  public function admintimesheetlist(Request $request)
  {
    session()->forget('_old_input');


admin done 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\index.blade.php

                                    <div class="col-4">
                                        <div class="form-group">
                                            <strong> <label class="font-weight-600">End Leave Period <span
                                                        id="endPeriodAsterisk"
                                                        class="text-danger d-none">*</span></label></strong>
                                            <input type="date" class="form-control endclass" id="endperiod1"
                                                name="endperiod">
                                        </div>
                                    </div>
									
									
remove it  

                                   <div class="col-1 d-flex justify-content-center align-items-center">
                                        <div class="form-group m-0">
                                            <a href="{{ url('/applyleave') }}">
                                                <img src="{{ url('backEnd/image/reload.png') }}"
                                                    style="width: 30px; height: 30px;" alt="Reload">
                                            </a>
                                        </div>
                                    </div>									


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\myteamindex.blade.php
<img src="{{ url('backEnd/image/reload.png') }}"


                          <div class="col-1 d-flex justify-content-center align-items-center" id="reload-button-template">
                              <div class="form-group m-0 d-none">
                                  @if (Auth::user()->role_id == 13 && Request::is('timesheet/teamlist'))
                                      <a href="{{ url('/timesheet/teamlist') }}">
                                          <img src="{{ url('backEnd/image/reload.png') }}"
                                              style="width: 30px; height: 30px; margin-top: 12px;" alt="Reload">
                                      </a>
                                  @else
                                      <a href="{{ url('/timesheet/allteamsubmitted') }}">
                                          <img src="{{ url('backEnd/image/reload.png') }}"
                                              style="width: 30px; height: 30px; margin-top: 12px;" alt="Reload">
                                      </a>
                                  @endif
                              </div>
                          </div>




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\myteamindex.blade.php
 <div class="form-group m-0 d-none">
 
 
<div class="col-1 d-flex justify-content-center align-items-center" id="reload-button-template">
                              <div class="form-group m-0 d-none">
                                  @if (Auth::user()->role_id == 13 && Request::is('timesheet/teamlist'))
                                      <a href="{{ url('/timesheet/teamlist') }}">
                                          <img src="{{ url('backEnd/image/reload.png') }}"
                                              style="width: 30px; height: 30px; margin-top: 12px;" alt="Reload">
                                      </a>
                                  @elseif(Auth::user()->role_id == 11)
                                      <a href="{{ url('/timesheet/allteamsubmitted') }}">
                                          <img src="{{ url('backEnd/image/reload.png') }}"
                                              style="width: 30px; height: 30px; margin-top: 12px;" alt="Reload">
                                      </a>
                                  @elseif(Auth::user()->role_id == 13 && Request::is('timesheet/partnersubmitted'))
                                      <a href="{{ url('/timesheet/partnersubmitted') }}">
                                          <img src="{{ url('backEnd/image/reload.png') }}"
                                              style="width: 30px; height: 30px; margin-top: 12px;" alt="Reload">
                                      </a>
                                  @else
                                      {{-- <a href="{{ url('/timesheet/partnersubmitted') }}">
                                          <img src="{{ url('backEnd/image/reload.png') }}"
                                              style="width: 30px; height: 30px; margin-top: 12px;" alt="Reload">
                                      </a> --}}
                                  @endif
                              </div>
                          </div>




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\timesheetdownload.blade.php


                                  @if (Request::is('adminsearchtimesheet'))
                                      <td class="d-flex justify-content-center align-items-center">
                                          <a href="{{ url('/admintimesheetlist') }}">
                                              <img src="{{ url('backEnd/image/reload.png') }}"
                                                  style="width: 30px; height: 30px;" alt="Reload">
                                          </a>
                                      </td>
                                  @elseif (Request::is('searchingtimesheet'))
                                      <td class="d-flex justify-content-center align-items-center">
                                          <a href="{{ url('/mytimesheetlist/' . auth()->user()->teammember_id) }}">
                                              <img src="{{ url('backEnd/image/reload.png') }}"
                                                  style="width: 30px; height: 30px;" alt="Reload">
                                          </a>
                                      </td>
                                  @endif
								  




                                  @if (Request::is('adminsearchtimesheet'))
                                      <th>Refresh</th>
                                  @elseif (Request::is('searchingtimesheet'))
                                      <th>Refresh</th>
                                  @endif
								  
								  

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AttendanceController.php
public function index()



            } else {
            session()->forget('_old_input');




app\Http\Controllers\TimesheetController.php

  public function assignmentHourShow()
  {
    // Fetch all necessary data with a single query per table
    session()->forget('_old_input');
	
	
	
	
	
app\Http\Controllers\TimesheetController.php
 public function mytimesheetlist(Request $request, $teamid)




    session()->forget('_old_input');
    return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\teamattendance.blade.php
<button type="submit" class="btn btn-success btn-block">Search</button> after this dive add it 



                            @if (Request::is('attendance-filter'))
                                <div class="col-1 d-flex justify-content-center align-items-center">
                                    <div class="form-group m-0">
                                        <a href="{{ url('/attendance') }}">
                                            <img src="{{ url('backEnd/image/reload.png') }}"
                                                style="width: 30px; height: 30px;" alt="Reload">
                                        </a>
                                    </div>
                                </div>
                            @endif


<label for="teammemberId">




                           <div class="col-md-{{ Request::is('attendance-filter') ? '3' : '4' }} col-sm-6 mb-3">
 

 

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\myteamindex.blade.php


                          <div class="col-1 d-flex justify-content-center align-items-center" id="reload-button-template">
                              @php
                                  $reloadUrl = null;

                                  if (Auth::user()->role_id == 13 && Request::is('timesheet/teamlist')) {
                                      $reloadUrl = url('/timesheet/teamlist');
                                  } elseif (Auth::user()->role_id == 11) {
                                      $reloadUrl = url('/timesheet/allteamsubmitted');
                                  } elseif (Auth::user()->role_id == 13 && Request::is('timesheet/partnersubmitted')) {
                                      $reloadUrl = url('/timesheet/partnersubmitted');
                                  } elseif (
                                      (Auth::user()->role_id == 14 && Request::is('timesheet/teamlist')) ||
                                      (Auth::user()->role_id == 15 && Request::is('timesheet/teamlist'))
                                  ) {
                                      $reloadUrl = url('/timesheet/teamlist');
                                  }
                              @endphp

                              <div class="form-group m-0 d-none">
                                  @if ($reloadUrl)
                                      <a href="{{ $reloadUrl }}">
                                          <img src="{{ url('backEnd/image/reload.png') }}"
                                              style="width: 30px; height: 30px; margin-top: 12px;" alt="Reload">
                                      </a>
                                  @endif
                              </div>
                          </div>






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\timesheetdownload.blade.php
<img src="{{ url('backEnd/image/reload.png') }}"

                                  @php
                                      $reloadUrl = null;

                                      if (Request::is('adminsearchtimesheet')) {
                                          $reloadUrl = url('/admintimesheetlist');
                                      } elseif (Request::is('searchingtimesheet')) {
                                          $reloadUrl = url('/mytimesheetlist/' . auth()->user()->teammember_id);
                                      }
                                  @endphp

                                  @if ($reloadUrl)
                                      <td class="d-flex justify-content-center align-items-center">
                                          <a href="{{ $reloadUrl }}">
                                              <img src="{{ url('backEnd/image/reload.png') }}"
                                                  style="width: 30px; height: 30px;" alt="Reload">
                                          </a>
                                      </td>
                                  @endif
								  
								  
								  

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\independence\independencereport.blade.php
<button type="submit" class="btn btn-success 
after this dive 

                            @if (Request::is('filterindependencereport'))
                                <div class="col-1 d-flex justify-content-center align-items-center">
                                    <div class="form-group m-0">
                                        <a href="{{ url('/independencereport') }}">
                                            <img src="{{ url('backEnd/image/reload.png') }}"
                                                style="width: 30px; height: 30px;" alt="Reload">
                                        </a>
                                    </div>
                                </div>
                            @endif
							
							
							
							
							
 <strong><label for="teammemberId">Team Member</label></strong>

 
                            <div class="col-md-{{ Request::is('filterindependencereport') ? '3' : '4' }} col-sm-6">		
		


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\hrindex.blade.php
<button type="submit" class="btn btn-success" style="float:right"> Submit</button>
after this div add 

                        @if (Request::is('timesheet/search'))
                            <div class="col-1 d-flex justify-content-center align-items-center">
                                <div class="form-group m-0">
                                    <a href="{{ url('/timesheet/fulllist') }}">
                                        <img src="{{ url('backEnd/image/reload.png') }}" style="width: 30px; height: 30px;"
                                            alt="Reload">
                                    </a>
                                </div>
                            </div>
                        @endif




		


The filter reset functionality should clear all applied filters ```end hare 


The design of the navigation button should be fixed. ```start
vsalive, vsalocal
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\viewassignment.blade.php


 <div class="content-header row align-items-center m-0">
        <nav aria-label="breadcrumb" class="col-sm-6 order-sm-last mb-3 mb-sm-0 p-0">
            <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right"
                style="flex-wrap: nowrap; white-space: nowrap;">
                @if ($assignmentbudgetingDatas->independenceform == 2)
                    <li class="d-inline-block">
                        @if (in_array(Auth::user()->role_id, [11, 13]) || $assignmentbudgetingDatas->type == 0)
                            <a class="btn btn-danger"
                                href="{{ url('/independencelist/' . $assignmentbudgetingDatas->assignmentgenerate_id) }}">
                                Independence
                            </a>
                        @elseif (in_array(Auth::user()->role_id, [14, 15]) || $assignmentbudgetingDatas->type == 0)
                            <a class="btn btn-success"
                                href="{{ url('independence/create/' . $assignmentbudgetingDatas->assignmentgenerate_id) }}"
                                style="color: white">
                                Submit Independence Form
                            </a>
                        @endif
                    </li>
                @endif

                @if (Auth::user()->role_id == 11 || Auth::user()->role_id == 13 || Auth::user()->role_id == 14)
                    <li class="d-inline-block" style="margin-left: 13px;">
                        <a class="btn btn-success"
                            href="{{ url('/assignmentconfirmation/' . $assignmentbudgetingDatas->assignmentgenerate_id) }}">Confirmation
                        </a>
                    </li>
                @endif

                <li class="d-inline-block" style="margin-left: 13px;">
                    <a class="btn btn-info"
                        href="{{ url('/yearwise?' . 'year=' . $assignmentbudgetingDatas->year . '&&' . 'clientid=' . $assignmentbudgetingDatas->client_id) }}">Back</a>
                </li>

                <li class="d-inline-block" style="margin-left: 13px;">
                    <a class="btn btn-primary"
                        href="{{ url('assignmentfolders/' . $assignmentbudgetingDatas->assignmentgenerate_id) }}">
                        All Files And Folders</a>
                </li>
            </ol>
        </nav>

        <div class="col-sm-6 header-title p-0">
            <div class="media">
                <div class="header-icon text-success mr-3"><i class="typcn typcn-puzzle-outline"></i></div>
                <div class="media-body">
                    <h1 class="font-weight-bold">Assignment Details</h1>
                    <small>Assignment List</small>
                </div>
            </div>
        </div>
    </div>
	
	
	
	
	
	
	
	
	
	
	or 
	
	  <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right"
                style="flex-wrap: nowrap; white-space: nowrap;">
				
				
first li 
<li class="d-inline-block">

after all li 
 <li class="d-inline-block" style="margin-left: 13px;">				




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentfolder\index.blade.php
<nav aria-label="breadcrumb"

	
	  <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right"
                style="flex-wrap: nowrap; white-space: nowrap;">
				
				
first li 
<li class="d-inline-block">

after all li 
 <li class="d-inline-block" style="margin-left: 13px;">				




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\independence\indexlist.blade.php
<nav aria-label="breadcrumb"

	
	  <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right"
                style="flex-wrap: nowrap; white-space: nowrap;">
				
				
first li 
<li class="d-inline-block">

after all li 
 <li class="d-inline-block" style="margin-left: 13px;">	


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentfolderfile\index.blade.php
<nav aria-label="breadcrumb"

	
	  <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right"
                style="flex-wrap: nowrap; white-space: nowrap;">
				
				
first li 
<li class="d-inline-block">

after all li 
 <li class="d-inline-block" style="margin-left: 13px;">	




The design of the navigation button should be fixed. ```end hare 

Modification on Adding Multiple timesheet module ```start
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\create.blade.php


                 if (existingDates.includes(formattedDate)) {
                     continue;
                 }

                 let isSameDate = formattedDate1.getTime() === formattedDate2.getTime() && formattedDate1
                     .getDay() === 0;
                 let extraClass = currentDate.getDay() === 0 && !isSameDate ? 'sunday-field d-none' : '';

				 
	



	

<div class="field_wrapper p-3 mb-4" 	


    <div class="field_wrapper p-3 mb-4 ${extraClass}"









const endDate = new Date($(this).val().split('-').reverse().join('-'));

             const endDate = new Date($(this).val().split('-').reverse().join('-'));

             if (endDate.getDay() === 0) {
                 $('.sunday-field').removeClass('d-none');
             }








 $('#fieldContainer').append(storedFields[dateStr]);

                    if (storedFields[dateStr]) {
                     $('#fieldContainer').append(storedFields[dateStr]);
                     // If it's Sunday, remove d-none class when re-attaching
                     if (date.getDay() === 0) {
                         storedFields[dateStr].removeClass('d-none');
                     }








$('.field_wrapper, .extra_field').each(function() {

             $('.field_wrapper, .extra_field').each(function() {
                 if ($(this).hasClass('d-none')) {
                     // permanently remove hidden fields
                     $(this).remove();
                     return;
                 }
				 
				 
	


	
				 

				 
				 
							 
 if (!isValid) {
 

             if (!isValid) {
                 e.preventDefault();
                 alert(errorMessage);
             } else {
                 // Get the submit button
                 const saveButton = document.getElementById('saveButton');
                 // Disable the submit button to prevent multiple submissions
                 if (saveButton) {
                     saveButton.disabled = true;
                     saveButton.textContent = "Saving...";
                 }
             }
	
	
	
	
resources\views\backEnd\timesheet\form.blade.php


    <button type="submit" class="btn btn-success" id="saveButton" style="float:right"> Save</button>
			 





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\create.blade.php

remove this style tag 

 <style>
     tr td:first-child a.ui-state-default {
         /* background-color: rgb(234, 0, 0) !important; */
         background-image: linear-gradient(to right, #34b4e5, rgba(255, 0, 0, 1));
         color: white !important;
     }

     tr th:first-child span {
         color: rgb(249, 5, 5) !important;
     }
 </style>









 fetchAndRender(); after this line add below code 


         const datepickerStyles = `
                 <style id="customDatepickerStyles">
                   tr td:first-child a.ui-state-default {
                     background-image: linear-gradient(to right, #34b4e5, rgba(255, 0, 0, 1));
                     color: white !important;
                   }
                   tr th:first-child span {
                     color: rgb(249, 5, 5) !important;
                   }
                   tr td:last-child a.ui-state-default {
                     background-color: #007fff !important;
                     color: white !important;
                   }
                 </style>
              `;
         if (!$('#customDatepickerStyles').length) {
             $(datepickerStyles).insertAfter('.body-content');
         }
		 
		 
		 
		 
		 
		 
		 
		 
		 
	
	

allDates.forEach(date => {  after this code add below code 


             $('#customDatepickerStyles').remove();
             const datepickerStyles = `
                   <style id="customDatepickerStyles">
                     tr td:first-child a.ui-state-default {
                       background-image: linear-gradient(to right, #34b4e5, rgba(255, 0, 0, 1));
                       color: white !important;
                     }
                     tr th:first-child span {
                       color: rgb(249, 5, 5) !important;
                     }
                   </style>
                   `;
             if (!$('#customDatepickerStyles').length) {
                 $(datepickerStyles).insertAfter('.body-content');
             }	 
		 
	
	
	
	
	
	
	
if (!date1Str || !date2Str) return;
	
             if (!date1Str || !date2Str) return;

             // Convert to Date object assuming format is dd-mm-yyyy
             let [day, month, year] = date2Str.split("-");
             let formattedDate2 = new Date(`${year}-${month}-${day}`);

             // If Saturday (6), increment by 1 day
             if (formattedDate2.getDay() === 6) {
                 formattedDate2.setDate(formattedDate2.getDate() + 1);

                 // Reformat back to dd-mm-yyyy
                 let newDay = String(formattedDate2.getDate()).padStart(2, '0');
                 let newMonth = String(formattedDate2.getMonth() + 1).padStart(2, '0');
                 let newYear = formattedDate2.getFullYear();
                 date2Str = `${newDay}-${newMonth}-${newYear}`;
             }


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\js.blade.php
let fromDateFormatted = ('0' + endDate.getDate()).slice(-2)
remove this code 






                 // **Format Dates**
                 let toDateFormatted = ('0' + originalDate.getDate()).slice(-2) + '-' +
                     ('0' + (originalDate.getMonth() + 1)).slice(-2) + '-' +
                     originalDate.getFullYear();

                 let datepickers2value = new Date(endDate);
                 let fromDateFormatted;

                 let isSameDate = originalDate.getTime() === datepickers2value.getTime();
                 if (datepickers2value.getDay() === 0 && !isSameDate) {
                     datepickers2value.setDate(datepickers2value.getDate() - 1);
                     fromDateFormatted = ('0' + datepickers2value.getDate()).slice(-2) + '-' +
                         ('0' + (datepickers2value.getMonth() + 1)).slice(-2) + '-' +
                         datepickers2value.getFullYear();
                 } else {
                     fromDateFormatted = ('0' + endDate.getDate()).slice(-2) + '-' +
                         ('0' + (endDate.getMonth() + 1)).slice(-2) + '-' +
                         endDate.getFullYear();
                 }

                 // **Set values in inputs**
                 document.getElementById('datepickers1').value = toDateFormatted; // To Date
                 document.getElementById('datepickers2').value = fromDateFormatted; // From Date (Next Sunday)
                                  

	
	
	
	

	
	
	
	
			 
Modification on Adding Multiple timesheet module ```end hare 		 


Incorrect spelling in attendance report. ```start hare 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
<th>Joinig find all 

<th>Joining


Incorrect spelling in attendance report. end hare 


Missing Partner code, in Timesheet report tab. ```start hare 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function mytimesheetlist(Request $request, $teamid)
  {
    // dd($teamid);
    if (auth()->user()->role_id == 13) {
      $date = DB::table('timesheetreport')->where('id', $request->id)->first();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->where('timesheetusers.createdby', $teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        ->orderBy('date', 'DESC')
        ->take(7)
        ->get();


      // dd($timesheetData);
    } else {
      $date = DB::table('timesheetreport')->where('id', $request->id)->first();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->where('timesheetusers.createdby', $teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        ->orderBy('date', 'DESC')
        ->take(7)
        ->get();
    }
    session()->forget('_old_input');
    return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
  }
  
  
  
  
  
  
  
   public function searchingtimesheet(Request $request)
  {

    // Get all input from form
    $startDate = $request->input('startdate', null);
    $endDate = $request->input('enddate', null);
    $teamId = $request->input('teamid', null);
    $teammemberId = $request->input('teammemberId', null);
    // $year = $request->input('year', null);

    $teammembers = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.status', 1)
      ->whereIn('teammembers.role_id', [14, 15, 13, 11])
      ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
      ->orderBy('team_member', 'ASC')
      ->get();

    // For patner
    if (auth()->user()->role_id == 13) {
      $query = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        ->orderBy('date', 'DESC');



      if ($startDate && $endDate && $teamId) {
        $query->where(function ($q) use ($startDate, $endDate, $teamId) {
          $q->where('timesheetusers.createdby', $teamId)
            ->where('timesheetusers.date', '>=', $startDate)
            ->where('timesheetusers.date', '<=', $endDate);
        });
      }

      $timesheetData = $query->get();
      // dd($timesheetData);
      $request->flash();
      return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
    }
    // For staff and manager
    else {

      $query = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        ->orderBy('date', 'DESC');

      if ($startDate && $endDate && $teamId) {
        $query->where(function ($q) use ($startDate, $endDate, $teamId) {
          $q->where('timesheetusers.createdby', $teamId)
            ->where('timesheetusers.date', '>=', $startDate)
            ->where('timesheetusers.date', '<=', $endDate);
        });
      }
      $timesheetData = $query->get();
      // dd($timesheetData);

      $request->flash();
      return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
    }
  } 
  
  
  
  app\Http\Controllers\TimesheetController.php
  
  
   public function adminsearchtimesheet(Request $request)
  {

    if ($request->ajax()) {
      echo "<option value='null'>Select Assignment</option>";
      foreach (
        DB::table('assignmentbudgetings')
          ->where('assignmentbudgetings.client_id', $request->cid)
          ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
          ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
          ->orderBy('assignment_name')->get() as $sub
      ) {
        echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . ' )' . '( ' . $sub->assignmentgenerate_id . ' )' . "</option>";
      }
    } else {
      // Get all input from form
      $startDate = $request->input('startdate', null);
      $endDate = $request->input('enddate', null);
      $teamId = $request->input('teamid', null);
      $teammemberId = $request->input('teammemberId', null);
      // $year = $request->input('year', null);
      $clientId = $request->input('clientId', null);
      $assignmentIddummy = $request->input('assignmentId', null);

      if ($assignmentIddummy == 'null') {
        $assignmentId = null;
      } else {
        $assignmentId =  $assignmentIddummy;
      }
      // dd($assignmentId);
      $teammembers = DB::table('teammembers')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        ->where('teammembers.status', 1)
        ->whereIn('teammembers.role_id', [14, 15, 13, 11])
        ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
        ->orderBy('team_member', 'ASC')
        ->get();

      $clientsname = DB::table('clients')
        ->whereIn('status', [0, 1])
        ->select('id', 'client_name', 'client_code')
        ->orderBy('client_name', 'ASC')
        ->get();

      $assignmentsname = DB::table('timesheetusers')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignmentbudgetings.assignmentname')
        ->orderBy('assignmentname', 'Asc')
        ->distinct('assignmentname')
        ->get();

      if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {

        $timesheetData = DB::table('timesheetusers')
          ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
          ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
          ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
            $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
              ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
          })
          // When startDate and endDate exist then run 'when' clause
          ->when($startDate && $endDate && $teammemberId, function ($query) use ($startDate, $endDate, $teammemberId) {
            // dd('teammemberId');
            return $query->where('timesheetusers.createdby', $teammemberId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $clientId, function ($query) use ($startDate, $endDate, $clientId) {
            // dd($clientId);
            return $query->where('timesheetusers.client_id', $clientId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $assignmentId, function ($query) use ($startDate, $endDate, $assignmentId) {
            // dd('assignmentId');
            return $query->where('timesheetusers.assignmentgenerate_id', $assignmentId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $teammemberId == null && $clientId == null && $assignmentId == null, function ($query) use ($startDate, $endDate) {
            // dd('year');
            return $query->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->whereIn('timesheetusers.status', [1, 2, 3])
          ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
          ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
          ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
          ->leftJoin('teamrolehistory', function ($join) {
            $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
              ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
          })
          ->select(
            'timesheetusers.*',
            'assignments.assignment_name',
            'clients.client_name',
            'clients.client_code',
            'teammembers.team_member',
            'teammembers.staffcode',
            'patnerid.team_member as patnername',
            'patnerid.staffcode as patnerstaffcodee',
            'assignmentbudgetings.assignmentname',
            'teamrolehistory.newstaff_code as ptnrstaffcode',
            'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
            'assignmentbudgetings.created_at as assignmentcreated'
          )
          ->orderBy('date', 'DESC')
          ->get();

        $request->flash();
        return view('backEnd.timesheet.timesheetdownload', compact('timesheetData', 'teammembers', 'clientsname', 'assignmentsname', 'assignmentId'));
      }
    }
  } 
  
  
  
resources\views\backEnd\timesheet\timesheetdownload.blade.php

                                 @foreach ($timesheetData as $timesheetDatas)
                                      <tr>
                                          <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                          <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                          <td>{{ $timesheetDatas->teamnewstaffcode ?? ($timesheetDatas->staffcode ?? '') }}
                                          </td>
                                          <td class="textfixed"> <span style="display: none;">
                                                  {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                          </td>
                                          <td class="textfixed">
                                              @if ($timesheetDatas->date != null)
                                                  {{ date('l', strtotime($timesheetDatas->date)) }}
                                              @endif
                                          </td>
                                          <td class="textfixed">{{ $timesheetDatas->client_name ?? '' }}
                                          </td>
                                          <td>{{ $timesheetDatas->client_code ?? '' }}
                                          </td>
                                          <td class="textfixed">
                                              {{ $timesheetDatas->assignment_name ?? '' }}
                                              @if ($timesheetDatas->assignmentname != null)
                                                  ({{ $timesheetDatas->assignmentname ?? '' }})
                                              @endif
                                          </td>
                                          <td>
                                              {{ $timesheetDatas->assignmentgenerate_id ?? '' }}
                                          </td>
                                          <td class="textfixed"> {{ $timesheetDatas->workitem ?? '' }}</td>
                                          <td class="textfixed">{{ $timesheetDatas->location ?? '' }} </td>
                                          <td class="textfixed"> {{ $timesheetDatas->patnername ?? '' }}
                                          </td>
                                          <td>{{ $timesheetDatas->ptnrstaffcode ?? ($timesheetDatas->patnerstaffcodee ?? '') }}
                                          </td>
                                          <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                      </tr>
                                  @endforeach  


Missing Partner code, in Timesheet report tab. end hare 


Incorrect date picking in 'Attendance' module in rejoining case.  ```start
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php
if ($request->leavingdate != null && $request->status == 1) {
and replace this code if and else part of code 


            if ($request->leavingdate == null) {
                $data = $request->except(['_token', 'qualification', 'document_file']);
                // dd($data, 11);
                Teammember::find($id)->update($data);
                // Update User table 
                $updateData = ['status' => $request->status];
                if ($request->status == 0) {
                    $updateData['remember_token'] = null;
                }
                DB::table('users')->where('teammember_id', $id)->update($updateData);
            } else {
                $oldstatusvalue = Teammember::find($id);
                if ($oldstatusvalue->leavingdate != null) {
                    if ($request->leavingdate != null && $request->status == 1) {
                        $rejoinExists = DB::table('teamrolehistory')
                            ->where('teammember_id', $id)
                            ->whereNotNull('rejoiningdate')
                            ->exists();

                        $rejoinSamePostExists = DB::table('rejoiningsamepost')
                            ->where('teammember_id', $id)
                            ->whereNotNull('rejoiningdate')
                            ->exists();

                        if ($rejoinExists || $rejoinSamePostExists) {
                            $data = $request->except(['_token', 'qualification', 'document_file']);

                            $updateRejoinData = [];

                            if (!Carbon::parse($oldstatusvalue->joining_date)->isSameDay(Carbon::parse($request->joining_date))) {
                                $updateRejoinData['rejoiningdate'] = $request->joining_date;
                                $updateRejoinData['created_at'] = Carbon::parse($request->joining_date)->setTimeFrom(Carbon::now());
                                unset($data['joining_date']);
                            }

                            if (!Carbon::parse($oldstatusvalue->leavingdate)->isSameDay(Carbon::parse($request->leavingdate))) {
                                $updateRejoinData['rejoiniedexitdate'] = $request->leavingdate;
                                unset($data['leavingdate']);

                                $updateData = ['status' => 0, 'remember_token' => null];
                                DB::table('users')->where('teammember_id', $id)->update($updateData);

                                unset($data['status']);
                                $data['status'] = '0';

                                // dd($data);
                                // If the client requests to enter the rejoined leaving date, the account will be marked as active at that time
                                // $forInactiveuser = DB::table('teamrolehistory')
                                //     ->where('teammember_id', $id)
                                //     ->first();

                                // if (!$forInactiveuser) {
                                //     $forInactiveuser = DB::table('rejoiningsamepost')
                                //         ->where('teammember_id', $id)
                                //         ->first();
                                // }

                                // if ($forInactiveuser && $forInactiveuser->rejoiniedexitdate === null) {
                                //     $updateData = ['status' => 0, 'remember_token' => null];
                                //     DB::table('users')->where('teammember_id', $id)->update($updateData);

                                //     unset($data['status']);
                                //     $data['status'] = '0';
                                //     // dd($data);
                                // }
                            }


                            // dd($data);
                            // Only update if any rejoining field has changed
                            if (!empty($updateRejoinData)) {
                                $rejoiningleavedate = DB::table('teamrolehistory')
                                    ->where('teammember_id', $id)
                                    ->whereNotNull('rejoiningdate')
                                    ->first();

                                if ($rejoiningleavedate) {
                                    DB::table('teamrolehistory')
                                        ->where('id', $rejoiningleavedate->id)
                                        ->update($updateRejoinData);
                                } else {
                                    DB::table('rejoiningsamepost')
                                        ->where('teammember_id', $id)
                                        ->update($updateRejoinData);
                                }
                            }
                            Teammember::find($id)->update($data);
                        }
                    }
                } else {
                    // dd('hi');
                    // $teammemberData = Teammember::find($id);
                    $data = $request->except(['_token', 'qualification', 'document_file', 'status']);
                    $data['status'] = '0';
                    Teammember::find($id)->update($data);
                    // Update User table 
                    $updateData = ['status' => 0];
                    $updateData['remember_token'] = null;
                    DB::table('users')->where('teammember_id', $id)->update($updateData);
                }
            }







$inputLeavingDate = $request->leavingdate ? Carbon::parse($request->leavingdate)->format('Y-m-d') : null;
after this line add this code 



            $existingLeavingDate = $checkuserleavingdate->leavingdate ? Carbon::parse($checkuserleavingdate->leavingdate)->format('Y-m-d') : null;
            $inputLeavingDate = $request->leavingdate ? Carbon::parse($request->leavingdate)->format('Y-m-d') : null;

            $data = $request->except(['_token', 'qualification', 'document_file']);
            if ($request->hasFile('cancelcheque')) {
                $file = $request->file('cancelcheque');
                $destinationPath = 'backEnd/image/teammember/cancelcheque';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['cancelcheque'] = $name;
            }
            // if ($request->hasFile('profilepic')) {
            //     $avatar = $request->file('profilepic');
            //     $filename = time() . rand(1, 100) . '.' . $avatar->getClientOriginalExtension();
            //     Image::make($avatar)->resize(800, 600)->save('backEnd/image/teammember/profilepic/' . $filename);
            //     $data['profilepic'] = $filename;
            // }
            if ($request->hasFile('profilepic')) {
                $avatar = $request->file('profilepic');
                $filename = time() . rand(1, 100) . '.' . $avatar->getClientOriginalExtension();
                // public\backEndimage/teammember/profilepic
                $destinationPath = public_path('backEnd/image/teammember/profilepic');
                // Save the image directly without resizing
                $avatar->move($destinationPath, $filename);
                $data['profilepic'] = $filename;
            }
            if ($request->hasFile('appointment_letter')) {
                $file = $request->file('appointment_letter');
                $extension = $file->getClientOriginalExtension();
                $filename = time() . '.' . $extension;
                $file->move('backEnd/image/teammember/appointmentletter/', $filename);
                $data['appointment_letter'] = $filename;
            }
            if ($request->hasFile('nda')) {
                $file = $request->file('nda');
                $extension = $file->getClientOriginalExtension();
                $filename = time() . '.' . $extension;
                $file->move('backEnd/image/teammember/nda/', $filename);
                $data['nda'] = $filename;
            }
            if ($request->hasFile('panupload')) {
                $file = $request->file('panupload');
                $destinationPath = 'backEnd/image/teammember/panupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['panupload'] = $name;
            }
            if ($request->hasFile('addressupload')) {
                $file = $request->file('addressupload');
                $destinationPath = 'backEnd/image/teammember/addressupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['addressupload'] = $name;
            }
            if ($request->hasFile('aadharupload')) {
                $file = $request->file('aadharupload');
                $destinationPath = 'backEnd/image/teammember/aadharupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['aadharupload'] = $name;
            }
			
			
			
			



 if (!is_null($existingLeavingDate) && !is_null($inputLeavingDate) && $existingLeavingDate
find and remove this code  
			

                    // update rejoined exit date

                    // if (!is_null($existingLeavingDate) && !is_null($inputLeavingDate) && $existingLeavingDate !== $inputLeavingDate) {
                    //     // dd($request->leavingdate, 1);
                    //     $rejoiningleavedate = DB::table('teamrolehistory')
                    //         ->where('teammember_id', $id)
                    //         ->whereNotNull('rejoiningdate')
                    //         ->first();

                    //     if ($rejoiningleavedate) {
                    //         DB::table('teamrolehistory')
                    //             ->where('id', $rejoiningleavedate->id)
                    //             ->update([
                    //                 'rejoiniedexitdate' => $request->leavingdate,
                    //                 'rejoiningdate' => $request->joining_date,
                    //             ]);
                    //     } else {
                    //         DB::table('rejoiningsamepost')
                    //             ->where('teammember_id',  $id)
                    //             ->update([
                    //                 'rejoiniedexitdate' => $request->leavingdate,
                    //                 'rejoiningdate' => $request->joining_date,
                    //             ]);
                    //     }
                    // }

Incorrect date picking in 'Attendance' module in rejoining case					


For the following five clients, Off/Holidays, Official Travel, Unallocated,  Seminar/Conference and Apply Leave, the old code is still appearing. ```start
vsademo, 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

 public function mytimesheetlist(Request $request, $teamid)
  {

    if (auth()->user()->role_id == 13) {
      $timesheetData = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->where('timesheetusers.createdby', $teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('timesheetusers.date')
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        ->orderBy('timesheetusers.date', 'DESC')
        ->limit(7)
        ->get();

      $timesheetData = $this->rejoinedOrPromotion($timesheetData);
    } else {
      $timesheetData = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->where('timesheetusers.createdby', $teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('timesheetusers.date')
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        ->orderBy('timesheetusers.date', 'DESC')
        ->limit(7)
        ->get();

      $timesheetData = $this->rejoinedOrPromotion($timesheetData);
    }
    session()->forget('_old_input');
    return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
  }
  
  
  
  
  

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\timesheetdownload.blade.php


                                  @foreach ($timesheetData as $timesheetDatas)
                                      <tr>
                                          <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                          <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                          {{-- <td>{{ $timesheetDatas->teamnewstaffcode ?? ($timesheetDatas->staffcode ?? '') }}
                                          </td> --}}
                                          <td>{{ $timesheetDatas->final_staffcode }}</td>
                                          <td class="textfixed"> <span style="display: none;">
                                                  {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                          </td>
                                          <td class="textfixed">
                                              @if ($timesheetDatas->date != null)
                                                  {{ date('l', strtotime($timesheetDatas->date)) }}
                                              @endif
                                          </td>
                                          <td class="textfixed">{{ $timesheetDatas->client_name ?? '' }}
                                          </td>
                                          <td>{{ $timesheetDatas->client_code ?? '' }}
                                          </td>
                                          <td class="textfixed">
                                              {{ $timesheetDatas->assignment_name ?? '' }}
                                              @if ($timesheetDatas->assignmentname != null)
                                                  ({{ $timesheetDatas->assignmentname ?? '' }})
                                              @endif
                                          </td>
                                          <td>
                                              {{ $timesheetDatas->assignmentgenerate_id ?? '' }}
                                          </td>
                                          <td class="textfixed"> {{ $timesheetDatas->workitem ?? '' }}</td>
                                          <td class="textfixed">{{ $timesheetDatas->location ?? '' }} </td>
                                          <td class="textfixed"> {{ $timesheetDatas->patnername ?? '' }}
                                          </td>
                                          {{-- <td>{{ $timesheetDatas->ptnrstaffcode ?? ($timesheetDatas->patnerstaffcodee ?? '') }}
                                          </td> --}}
                                          <td>{{ $timesheetDatas->final_partnerstaffcode }}</td>
                                          <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                      </tr>
                                  @endforeach
								  
								  
								  
								  
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

 
  public function searchingtimesheet(Request $request)
  {
    // Get all input from form
    $startDate = $request->input('startdate', null);
    $endDate = $request->input('enddate', null);
    $teamId = $request->input('teamid', null);
    $teammemberId = $request->input('teammemberId', null);
    // $year = $request->input('year', null);

    $teammembers = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.status', 1)
      ->whereIn('teammembers.role_id', [14, 15, 13, 11])
      ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
      ->orderBy('team_member', 'ASC')
      ->get();

    // For patner
    if (auth()->user()->role_id == 13) {
      $query = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->where('timesheetusers.createdby', $teamId)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('timesheetusers.date')
        ->whereBetween('timesheetusers.date', [$startDate, $endDate])
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        ->orderBy('timesheetusers.date', 'DESC');

      $timesheetData = $query->get();

      $timesheetData = $this->rejoinedOrPromotion($timesheetData);

      $request->flash();
      return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
    }
    // For staff and manager
    else {
      $query = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->where('timesheetusers.createdby', $teamId)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('timesheetusers.date')
        ->whereBetween('timesheetusers.date', [$startDate, $endDate])
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        ->orderBy('timesheetusers.date', 'DESC');

      $timesheetData = $query->get();

      $timesheetData = $this->rejoinedOrPromotion($timesheetData);
      // dd($timesheetData);
      $request->flash();
      return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
    }
  }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

 
  public function adminsearchtimesheet(Request $request)
  {
    if ($request->ajax()) {
      echo "<option value='null'>Select Assignment</option>";
      $assignments = DB::table('assignmentbudgetings')
        ->where('assignmentbudgetings.client_id', $request->cid)
        ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
        ->orderBy('assignment_name')
        ->get();

      foreach ($assignments as $sub) {
        echo "<option value='{$sub->assignmentgenerate_id}'>{$sub->assignment_name} ({$sub->assignmentname}) ({$sub->assignmentgenerate_id})</option>";
      }
      return;
    }

    $startDate = $request->input('startdate');
    $endDate = $request->input('enddate');
    $teamId = $request->input('teamid');
    $teammemberId = $request->input('teammemberId');
    $clientId = $request->input('clientId');
    $assignmentId = $request->input('assignmentId') !== 'null' ? $request->input('assignmentId') : null;


    $teammembers = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.status', 1)
      ->whereIn('teammembers.role_id', [14, 15, 13, 11])
      ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
      ->orderBy('team_member', 'ASC')
      ->get();

    $clientsname = DB::table('clients')
      ->whereIn('status', [0, 1])
      ->select('id', 'client_name', 'client_code')
      ->orderBy('client_name', 'ASC')
      ->get();

    $assignmentsname = DB::table('timesheetusers')
      ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
      ->whereIn('timesheetusers.status', [1, 2, 3])
      ->whereNotNull('assignmentbudgetings.assignmentname')
      ->select('timesheetusers.assignmentgenerate_id', 'assignmentbudgetings.assignmentname')
      ->distinct()
      ->orderBy('assignmentname', 'ASC')
      ->get();

    if (!in_array(auth()->user()->role_id, [11, 13])) {
      $output = array('msg' => 'Unauthorized access');
      return back()->with('statuss', $output);
    }

    // Base query
    $query = DB::table('timesheetusers')
      ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
      ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
      ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
        $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
          ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
      })
      ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
      ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
      ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
          ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
      })
      ->whereIn('timesheetusers.status', [1, 2, 3])
      ->select(
        'timesheetusers.*',
        'assignments.assignment_name',
        'clients.client_name',
        'clients.client_code',
        'teammembers.team_member',
        'teammembers.staffcode',
        'patnerid.team_member as patnername',
        'patnerid.staffcode as patnerstaffcodee',
        'assignmentbudgetings.assignmentname',
        'teamrolehistory.newstaff_code as ptnrstaffcode',
        'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
        'assignmentbudgetings.created_at as assignmentcreated'
      )
      ->orderBy('date', 'DESC');

    // if ($startDate && $endDate) {
    //   $query->whereBetween('timesheetusers.date', [$startDate, $endDate]);

    //   if ($teammemberId) {
    //     $query->where('timesheetusers.createdby', $teammemberId);
    //   } elseif ($clientId) {
    //     $query->where('timesheetusers.client_id', $clientId);
    //   } elseif ($assignmentId) {
    //     $query->where('timesheetusers.assignmentgenerate_id', $assignmentId);
    //   }
    // }

    if ($startDate && $endDate) {
      $query->whereBetween('timesheetusers.date', [$startDate, $endDate]);
      if ($teammemberId) {
        $query->where('timesheetusers.createdby', $teammemberId);
      }
      if ($clientId) {
        $query->where('timesheetusers.client_id', $clientId);
      }
      if ($assignmentId) {
        $query->where('timesheetusers.assignmentgenerate_id', $assignmentId);
      }
    }

    $timesheetData = $query->get();

    $timesheetData = $this->rejoinedOrPromotion($timesheetData);

    $request->flash();
    return view('backEnd.timesheet.timesheetdownload', compact('timesheetData', 'teammembers', 'clientsname', 'assignmentsname', 'assignmentId'));
  }
  
  
  


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

 ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignments.assignmentname')


1

            $assignments = DB::table('assignmentbudgetings')
              ->where('client_id', $id)
              ->leftJoin('assignments', 'assignments.id', '=', 'assignmentbudgetings.assignment_id')
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignmentbudgetings.assignmentname')
              ->orderBy('assignments.assignment_name')
              ->get();
			  
			  






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

 
  public function weeklylist(Request $request)
  {
    // dd($request);
    if (auth()->user()->role_id == 13) {
      $date = DB::table('timesheetreport')->where('id', $request->id)->first();

      $promotionCheck = DB::table('teamrolehistory')
        ->where('teammember_id', $request->teamid)
        ->select('newstaff_code', 'created_at')
        ->first();

      $promotionorRejoinDate = $promotionCheck
        ? Carbon::parse($promotionCheck->created_at)->startOfDay()
        : null;

      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->where('timesheetusers.createdby', $request->teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('timesheetusers.date')
        ->where('timesheetusers.date', '>=', $date->startdate)
        ->where('timesheetusers.date', '<=', $date->enddate)
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        // ->orderBy('timesheetusers.id', 'ASC')
        ->orderBy('timesheetusers.date', 'DESC')
        ->get();

      $timesheetData = $this->promotionOrRejoined($timesheetData, $promotionCheck, $promotionorRejoinDate);
    } else {
      $date = DB::table('timesheetreport')->where('id', $request->id)->first();

      $promotionCheck = DB::table('teamrolehistory')
        ->where('teammember_id', $request->teamid)
        ->select('newstaff_code', 'created_at')
        ->first();

      $promotionorRejoinDate = $promotionCheck
        ? Carbon::parse($promotionCheck->created_at)->startOfDay()
        : null;

      $timesheetData = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->where('timesheetusers.createdby', $request->teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('timesheetusers.date')
        ->whereBetween('timesheetusers.date', [$date->startdate, $date->enddate])
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        // ->orderBy('timesheetusers.id', 'ASC')
        ->orderBy('timesheetusers.date', 'DESC')
        ->get();

      $timesheetData = $this->promotionOrRejoined($timesheetData, $promotionCheck, $promotionorRejoinDate);
    }
    return view('backEnd.timesheet.weeklylist', compact('timesheetData'));
  }



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\weeklylist.blade.php

                                    {{-- <td>{{ $timesheetDatas->teamnewstaffcode ?? ($timesheetDatas->staffcode ?? '') }}</td> --}}
                                    <td>{{ $timesheetDatas->final_teamstaffcode }}</td>
									
									
									
                                    {{-- <td>{{ $timesheetDatas->ptnrstaffcode ?? ($timesheetDatas->patnerstaffcodee ?? '') }}
                                    </td> --}}
                                    <td>{{ $timesheetDatas->final_partnerstaffcode }}</td>


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\rejectedlist.blade.php
find $dates = date('l', strtotime($timesheetDatas->date));


                                        $dates = date('l', strtotime($timesheetDatas->date));

                                        $targetAssignments = [29, 34, 32, 33, 134];
                                        if (in_array($timesheetDatas->client_id, $targetAssignments)) {
                                            // teammember code
                                            $rejoindpromotioncheck = DB::table('teamrolehistory')
                                                ->where('teammember_id', $timesheetDatas->createdby)
                                                ->first();

                                            $timesheetDate = $timesheetDatas->date
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d',
                                                    $timesheetDatas->date,
                                                )->startOfDay()
                                                : null;

                                            $rejoindpromotioncheckdate = null;
                                            if ($rejoindpromotioncheck) {
                                                $rejoindpromotioncheckdate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $rejoindpromotioncheck->created_at,
                                                )->startOfDay();
                                            }

                                            // partner code
                                            $rejoindpromotioncheckpartner = DB::table('teamrolehistory')
                                                ->where('teammember_id', $timesheetDatas->partner)
                                                ->first();

                                            $timesheetDatepartner = $timesheetDatas->date
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d',
                                                    $timesheetDatas->date,
                                                )->startOfDay()
                                                : null;

                                            $rejoindpromotioncheckdatepartner = null;
                                            if ($rejoindpromotioncheckpartner) {
                                                $rejoindpromotioncheckdatepartner = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $rejoindpromotioncheckpartner->created_at,
                                                )->startOfDay();
                                            }
                                        } else {
                                            $assignmentcheck = DB::table('assignmentbudgetings')
                                                ->where('assignmentgenerate_id', $timesheetDatas->assignmentgenerate_id)
                                                ->first();

                                            $teamMembers = DB::table('teamrolehistory')
                                                ->whereIn('teammember_id', [
                                                    $timesheetDatas->createdby,
                                                    $timesheetDatas->partner,
                                                ])
                                                ->get()
                                                ->keyBy('teammember_id');

                                            $datadate = $assignmentcheck
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $assignmentcheck->created_at,
                                                )
                                                : null;

                                            // dd($teamMembers);

                                            $permotioncheck = $teamMembers[$timesheetDatas->createdby] ?? null;
                                            $approverdata = $teamMembers[$timesheetDatas->partner] ?? null;

                                            $permotiondate = $permotioncheck
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $permotioncheck->created_at,
                                                )
                                                : null;
                                            $approverdate = $approverdata
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $approverdata->created_at,
                                                )
                                                : null;
                                        }
                                    @endphp





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\rejectedlist.blade.php

{{ $permotioncheck->newstaff_code }}


                                   @if (in_array($timesheetDatas->client_id, $targetAssignments))
                                        @if ($rejoindpromotioncheck && $timesheetDate && $timesheetDate->greaterThanOrEqualTo($rejoindpromotioncheckdate))
                                            <td>{{ $rejoindpromotioncheck->newstaff_code }}</td>
                                        @else
                                            <td>{{ $timesheetDatas->staffcode }}</td>
                                        @endif
                                    @else
                                        <td>
                                            @if ($permotioncheck && $datadate && $datadate->greaterThan($permotiondate))
                                                {{ $permotioncheck->newstaff_code }}
                                            @else
                                                {{ $timesheetDatas->staffcode }}
                                            @endif
                                        </td>
                                    @endif
									
				


				
									
									
									
									
									
									
{{ $client_id->staffcode ?? '' }}
									
									
                                    <td class="textfixed">
                                        @if (in_array($timesheetDatas->client_id, $targetAssignments))
                                            @if (
                                                $rejoindpromotioncheckpartner &&
                                                    $timesheetDatepartner &&
                                                    $timesheetDatepartner->greaterThanOrEqualTo($rejoindpromotioncheckdatepartner))
                                                {{ $rejoindpromotioncheckpartner->newstaff_code }}
                                            @else
                                                {{ $client_id->staffcode ?? '' }}
                                            @endif
                                            @if (count((array) $client_id->team_member) > 1)
                                                ,
                                            @endif
                                        @else
                                            @if ($approverdata && $datadate && $datadate->greaterThan($approverdate))
                                                {{ $approverdata->newstaff_code }}
                                            @else
                                                {{ $client_id->staffcode ?? '' }}
                                            @endif
                                            @if (count((array) $client_id->team_member) > 1)
                                                ,
                                            @endif
                                        @endif
                                    </td>




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\hrindex.blade.php
 @foreach ($timesheetData as $timesheetDatas)

                             @foreach ($timesheetData as $timesheetDatas)
                                <tr>
                                    @php
                                        $client_id = DB::table('timesheetusers')
                                            ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                            ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
                                            ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->id)
                                            ->select(
                                                'timesheetusers.client_id',
                                                'timesheetusers.date',
                                                'clients.client_name',
                                                'clients.client_code',
                                                'timesheetusers.hour',
                                                'assignments.assignment_name',
                                                'billable_status',
                                                'workitem',
                                                'teammembers.id',
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                            )
                                            ->get();

                                        //  dd($client_id);
                                        $total = DB::table('timesheetusers')
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->id)
                                            ->sum('hour');

                                        $dates = date('l', strtotime($timesheetDatas->date));

                                        $timesheetusersclientcheck = DB::table('timesheetusers')
                                            ->where('timesheetid', $timesheetDatas->id)
                                            ->first();

                                        $targetAssignments = [29, 34, 32, 33, 134];
                                        if (in_array($timesheetusersclientcheck->client_id, $targetAssignments)) {
                                            $rejoindpromotioncheck = DB::table('teamrolehistory')
                                                ->where('teammember_id', $timesheetusersclientcheck->createdby)
                                                ->first();

                                            $timesheetDate = $timesheetusersclientcheck->date
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d',
                                                    $timesheetusersclientcheck->date,
                                                )->startOfDay()
                                                : null;

                                            $rejoindpromotioncheckdate = null;
                                            if ($rejoindpromotioncheck) {
                                                $rejoindpromotioncheckdate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $rejoindpromotioncheck->created_at,
                                                )->startOfDay();
                                            }
                                        } else {
                                            $permotioncheck = DB::table('teamrolehistory')
                                                ->where('teammember_id', $timesheetDatas->created_by)
                                                ->first();

                                            $assignmentcheck = DB::table('timesheetusers')
                                                ->leftJoin(
                                                    'assignmentbudgetings',
                                                    'assignmentbudgetings.assignmentgenerate_id',
                                                    'timesheetusers.assignmentgenerate_id',
                                                )
                                                ->where('timesheetid', $timesheetDatas->id)
                                                ->select('assignmentbudgetings.created_at')
                                                ->first();

                                            //shshid client

                                            $datadate = $assignmentcheck->created_at
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $assignmentcheck->created_at,
                                                )
                                                : null;

                                            $permotiondate = null;
                                            if ($permotioncheck) {
                                                $permotiondate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $permotioncheck->created_at,
                                                );
                                            }
                                        }
                                    @endphp
									
									
									
									
									
									
									
									
									
									
									
									

                                    @if (in_array($timesheetusersclientcheck->client_id, $targetAssignments))
                                        @if ($rejoindpromotioncheck && $timesheetDate && $timesheetDate->greaterThanOrEqualTo($rejoindpromotioncheckdate))
                                            <td>{{ $rejoindpromotioncheck->newstaff_code }}</td>
                                        @else
                                            <td>{{ $timesheetDatas->staffcode }}</td>
                                        @endif
                                    @else
                                        @if ($permotioncheck && $datadate && $datadate->greaterThan($permotiondate))
                                            <td>{{ $permotioncheck->newstaff_code }}</td>
                                        @else
                                            <td>{{ $timesheetDatas->staffcode }}</td>
                                        @endif
                                    @endif


									
									
									







                                        @foreach ($client_id as $item)
                                            @php
                                                if (in_array($item->client_id, $targetAssignments)) {
                                                    // partner code
                                                    $rejoindpromotioncheckpartner = DB::table('teamrolehistory')
                                                        ->where('teammember_id', $item->id)
                                                        ->first();

                                                    $timesheetDatepartner = $item->date
                                                        ? Carbon\Carbon::createFromFormat(
                                                            'Y-m-d',
                                                            $item->date,
                                                        )->startOfDay()
                                                        : null;

                                                    $rejoindpromotioncheckdatepartner = null;
                                                    if ($rejoindpromotioncheckpartner) {
                                                        $rejoindpromotioncheckdatepartner = Carbon\Carbon::createFromFormat(
                                                            'Y-m-d H:i:s',
                                                            $rejoindpromotioncheckpartner->created_at,
                                                        )->startOfDay();
                                                    }
                                                } else {
                                                    $partnerpermotioncheck = DB::table('teamrolehistory')
                                                        ->where('teammember_id', $item->id)
                                                        ->first();

                                                    $assignmentcheck = DB::table('timesheetusers')
                                                        ->leftJoin(
                                                            'assignmentbudgetings',
                                                            'assignmentbudgetings.assignmentgenerate_id',
                                                            'timesheetusers.assignmentgenerate_id',
                                                        )
                                                        ->where('timesheetid', $timesheetDatas->id)
                                                        ->select('assignmentbudgetings.created_at')
                                                        ->first();

                                                    //shshid client

                                                    $partnerdatadate = $assignmentcheck->created_at
                                                        ? Carbon\Carbon::createFromFormat(
                                                            'Y-m-d H:i:s',
                                                            $assignmentcheck->created_at,
                                                        )
                                                        : null;

                                                    $partnerpermotiondate = null;
                                                    if ($partnerpermotioncheck) {
                                                        $partnerpermotiondate = Carbon\Carbon::createFromFormat(
                                                            'Y-m-d H:i:s',
                                                            $partnerpermotioncheck->created_at,
                                                        );
                                                    }
                                                }
                                            @endphp
                                            @if (in_array($item->client_id, $targetAssignments))
                                                @if (
                                                    $rejoindpromotioncheckpartner &&
                                                        $timesheetDatepartner &&
                                                        $timesheetDatepartner->greaterThanOrEqualTo($rejoindpromotioncheckdatepartner))
                                                    {{ $rejoindpromotioncheckpartner->newstaff_code }}
                                                @else
                                                    {{ $item->staffcode }}
                                                @endif
                                                @if ($item->team_member != null)
                                                    ,
                                                @endif
                                            @else
                                                @if ($partnerpermotioncheck && $partnerdatadate && $partnerdatadate->greaterThan($partnerpermotiondate))
                                                    {{ $partnerpermotioncheck->newstaff_code }}
                                                @else
                                                    {{ $item->staffcode }}
                                                @endif
                                                @if ($item->team_member != null)
                                                    ,
                                                @endif
                                            @endif
                                        @endforeach
										
										
										

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\timesheetdownload.blade.php

                                          {{-- <td>{{ $timesheetDatas->ptnrstaffcode ?? ($timesheetDatas->patnerstaffcodee ?? '') }}
                                          </td> --}}
                                          <td>{{ $timesheetDatas->final_partnerstaffcode }}</td>




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


  public function adminsearchtimesheet(Request $request)
  {
    if ($request->ajax()) {
      echo "<option value='null'>Select Assignment</option>";
      $assignments = DB::table('assignmentbudgetings')
        ->where('assignmentbudgetings.client_id', $request->cid)
        ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
        ->orderBy('assignment_name')
        ->get();

      foreach ($assignments as $sub) {
        echo "<option value='{$sub->assignmentgenerate_id}'>{$sub->assignment_name} ({$sub->assignmentname}) ({$sub->assignmentgenerate_id})</option>";
      }
      return;
    }

    $startDate = $request->input('startdate');
    $endDate = $request->input('enddate');
    $teamId = $request->input('teamid');
    $teammemberId = $request->input('teammemberId');
    $clientId = $request->input('clientId');
    $assignmentId = $request->input('assignmentId') !== 'null' ? $request->input('assignmentId') : null;


    $teammembers = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.status', 1)
      ->whereIn('teammembers.role_id', [14, 15, 13, 11])
      ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
      ->orderBy('team_member', 'ASC')
      ->get();

    $clientsname = DB::table('clients')
      ->whereIn('status', [0, 1])
      ->select('id', 'client_name', 'client_code')
      ->orderBy('client_name', 'ASC')
      ->get();

    $assignmentsname = DB::table('timesheetusers')
      ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
      ->whereIn('timesheetusers.status', [1, 2, 3])
      ->whereNotNull('assignmentbudgetings.assignmentname')
      ->select('timesheetusers.assignmentgenerate_id', 'assignmentbudgetings.assignmentname')
      ->distinct()
      ->orderBy('assignmentname', 'ASC')
      ->get();

    if (!in_array(auth()->user()->role_id, [11, 13])) {
      $output = array('msg' => 'Unauthorized access');
      return back()->with('statuss', $output);
    }

    // Base query
    $query = DB::table('timesheetusers')
      ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
      ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
      ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
        $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
          ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
      })
      ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
      ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
      ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
          ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
      })
      ->whereIn('timesheetusers.status', [1, 2, 3])
      ->select(
        'timesheetusers.*',
        'assignments.assignment_name',
        'clients.client_name',
        'clients.client_code',
        'teammembers.team_member',
        'teammembers.staffcode',
        'patnerid.team_member as patnername',
        'patnerid.staffcode as patnerstaffcodee',
        'assignmentbudgetings.assignmentname',
        'teamrolehistory.newstaff_code as ptnrstaffcode',
        'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
        'assignmentbudgetings.created_at as assignmentcreated'
      )
      ->orderBy('date', 'DESC');

    // if ($startDate && $endDate) {
    //   $query->whereBetween('timesheetusers.date', [$startDate, $endDate]);

    //   if ($teammemberId) {
    //     $query->where('timesheetusers.createdby', $teammemberId);
    //   } elseif ($clientId) {
    //     $query->where('timesheetusers.client_id', $clientId);
    //   } elseif ($assignmentId) {
    //     $query->where('timesheetusers.assignmentgenerate_id', $assignmentId);
    //   }
    // }

    if ($startDate && $endDate) {
      $query->whereBetween('timesheetusers.date', [$startDate, $endDate]);
      if ($teammemberId) {
        $query->where('timesheetusers.createdby', $teammemberId);
      }
      if ($clientId) {
        $query->where('timesheetusers.client_id', $clientId);
      }
      if ($assignmentId) {
        $query->where('timesheetusers.assignmentgenerate_id', $assignmentId);
      }
    }

    $timesheetData = $query->get();

    $timesheetData = $this->rejoinedOrPromotion($timesheetData);

    $request->flash();
    return view('backEnd.timesheet.timesheetdownload', compact('timesheetData', 'teammembers', 'clientsname', 'assignmentsname', 'assignmentId'));
  }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php



public function totalworkingdays(Request $request, $teamid)
  {

    // total working days startfrom january to december 
    $currentDate = Carbon::now();
    $currentMonth = $currentDate->format('F');
    $startDate = Carbon::create($currentDate->year, 1, 1);
    $endDate = Carbon::create($currentDate->year, 12, 31);

    // $startDate = Carbon::create('01-04-2024');
    // $endDate = Carbon::create('30-09-2024');

    // $home = DB::table('timesheetusers')
    //   ->where('createdby', 847)
    //   ->whereIn('status', [1, 2, 3])
    //   ->whereNotIn('assignmentgenerate_id', ['OFF100004', 'OFF100003'])
    //   ->whereNotIn('client_id', [134])
    //   ->whereBetween('timesheetusers.date', [$startDate->format('Y-m-d'), $endDate->format('Y-m-d')])
    //   ->select('date') // Select only the date column
    //   ->distinct() // Apply distinct on the selected columns
    //   ->get();

    // dd($home);

    $promotionCheck = DB::table('teamrolehistory')
      ->where('teammember_id', $teamid)
      ->select('newstaff_code', 'created_at')
      ->first();

    $promotionorRejoinDate = $promotionCheck
      ? Carbon::parse($promotionCheck->created_at)->startOfDay()
      : null;

    // dd($attendancesstartDate);
    $query = DB::table('timesheetusers')
      ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
      ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
      ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
        $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
          ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
      })
      ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
      ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
      ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
          ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
      })
      ->where('timesheetusers.createdby', $teamid)
      ->whereIn('timesheetusers.status', [1, 2, 3])
      ->whereBetween('timesheetusers.date', [$startDate->format('Y-m-d'), $endDate->format('Y-m-d')])
      // hide offholidays and travel timesheet
      ->whereNotIn('timesheetusers.assignmentgenerate_id', ['OFF100004', 'OFF100003'])
      // hide  casual leave and exam leave timesheet
      ->whereNotIn('timesheetusers.client_id', [134])
      ->select(
        'timesheetusers.*',
        'assignments.assignment_name',
        'clients.client_name',
        'clients.client_code',
        'teammembers.team_member',
        'teammembers.staffcode',
        'patnerid.team_member as patnername',
        'patnerid.staffcode as patnerstaffcodee',
        'assignmentbudgetings.assignmentname',
        'teamrolehistory.newstaff_code as ptnrstaffcode',
        'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
        // 'assignmentbudgetings.created_at as assignmentcreateddate'
        'assignmentbudgetings.created_at as assignmentcreated'
      )
      ->orderBy('timesheetusers.date', 'DESC');

    // Apply filters for partner 
    if (auth()->user()->role_id == 13) {
    }

    $timesheetData = $query->get();

    $timesheetData = $this->promotionOrRejoined($timesheetData, $promotionCheck, $promotionorRejoinDate);

    return view('backEnd.timesheet.totalworkingdays', compact('timesheetData'));
  }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\totalworkingdays.blade.php

                                 @foreach ($timesheetData as $timesheetDatas)
                                    <tr>
                                        <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                        @if (Auth::user()->role_id == 11 ||
                                                Request::is('adminsearchtimesheet') ||
                                                (Auth::user()->role_id == 13 && Request::is('admintimesheetlist')))
                                            <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                            {{-- <td>{{ $timesheetDatas->teamnewstaffcode ?? ($timesheetDatas->staffcode ?? '') }}
                                            </td> --}}
                                            <td>{{ $timesheetDatas->final_teamstaffcode }}</td>
                                        @endif

                                        <td class="textfixed"> <span style="display: none;">
                                                {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                        </td>
                                        <td class="textfixed">
                                            @if ($timesheetDatas->date != null)
                                                {{ date('l', strtotime($timesheetDatas->date)) }}
                                            @endif
                                        </td>
                                        <td class="textfixed">{{ $timesheetDatas->client_name ?? '' }}
                                        </td>
                                        <td>{{ $timesheetDatas->client_code ?? '' }}
                                        </td>
                                        <td class="textfixed">
                                            {{ $timesheetDatas->assignment_name ?? '' }}
                                            @if ($timesheetDatas->assignmentname != null)
                                                ({{ $timesheetDatas->assignmentname ?? '' }})
                                            @endif
                                        </td>
                                        <td>
                                            {{ $timesheetDatas->assignmentgenerate_id ?? '' }}
                                        </td>
                                        <td class="textfixed"> {{ $timesheetDatas->workitem ?? '' }}</td>
                                        <td class="textfixed">{{ $timesheetDatas->location ?? '' }} </td>
                                        <td class="textfixed"> {{ $timesheetDatas->patnername ?? '' }}
                                        </td>
                                        {{-- <td>{{ $timesheetDatas->ptnrstaffcode ?? ($timesheetDatas->patnerstaffcodee ?? '') }}
                                        </td> --}}
                                        <td>{{ $timesheetDatas->final_partnerstaffcode }}</td>
                                        <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                    </tr>
                                @endforeach





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

   public function totaltraveldays(Request $request, $teamid)
  {

    // total working days startfrom january to december 
    $currentDate = Carbon::now();
    $currentMonth = $currentDate->format('F');
    $startDate = Carbon::create($currentDate->year, 1, 1);
    $endDate = Carbon::create($currentDate->year, 12, 31);

    $promotionCheck = DB::table('teamrolehistory')
      ->where('teammember_id', $teamid)
      ->select('newstaff_code', 'created_at')
      ->first();

    $promotionorRejoinDate = $promotionCheck
      ? Carbon::parse($promotionCheck->created_at)->startOfDay()
      : null;

    $query = DB::table('timesheetusers')
      ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
      ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
      ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
        $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
          ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
      })
      ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
      ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
      ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
          ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
      })
      ->where('timesheetusers.createdby', $teamid)
      ->whereIn('timesheetusers.status', [1, 2, 3])
      ->whereBetween('timesheetusers.date', [$startDate->format('Y-m-d'), $endDate->format('Y-m-d')])
      // Get only travel data
      ->whereIn('timesheetusers.assignmentgenerate_id', ['OFF100003'])
      ->select(
        'timesheetusers.*',
        'assignments.assignment_name',
        'clients.client_name',
        'clients.client_code',
        'teammembers.team_member',
        'teammembers.staffcode',
        'patnerid.team_member as patnername',
        'patnerid.staffcode as patnerstaffcodee',
        'assignmentbudgetings.assignmentname',
        'teamrolehistory.newstaff_code as ptnrstaffcode',
        'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
        // 'assignmentbudgetings.created_at as assignmentcreateddate'
        'assignmentbudgetings.created_at as assignmentcreated'
      )
      ->orderBy('timesheetusers.date', 'DESC');

    // Apply role-specific filters if necessary
    if (auth()->user()->role_id == 13) {
      // Add any specific conditions or modifications for role_id 13 if needed.
    }

    $timesheetData = $query->get();

    $timesheetData = $this->promotionOrRejoined($timesheetData, $promotionCheck, $promotionorRejoinDate);

    return view('backEnd.timesheet.totaltraveldays', compact('timesheetData'));
  }
  
  
  
  
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\totaltraveldays.blade.php


                                 @foreach ($timesheetData as $timesheetDatas)
                                     @php
                                         $timesheetanotherdata = DB::table('timesheetusers')
                                             ->where('timesheetid', $timesheetDatas->timesheetid)
                                             ->count();
                                     @endphp
                                     @if ($timesheetanotherdata <= 1)
                                         @php
                                             $hasData = true;
                                         @endphp
                                         <tr>
                                             <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                             @if (Auth::user()->role_id == 11 ||
                                                     Request::is('adminsearchtimesheet') ||
                                                     (Auth::user()->role_id == 13 && Request::is('admintimesheetlist')))
                                                 <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                                 <td>{{ $timesheetDatas->final_teamstaffcode }}</td>
                                             @endif

                                             <td class="textfixed"> <span style="display: none;">
                                                     {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                             </td>
                                             <td class="textfixed">
                                                 @if ($timesheetDatas->date != null)
                                                     {{ date('l', strtotime($timesheetDatas->date)) }}
                                                 @endif
                                             </td>
                                             <td class="textfixed">{{ $timesheetDatas->client_name ?? '' }}
                                             </td>
                                             <td>{{ $timesheetDatas->client_code ?? '' }}
                                             </td>
                                             <td class="textfixed">
                                                 {{ $timesheetDatas->assignment_name ?? '' }}
                                                 @if ($timesheetDatas->assignmentname != null)
                                                     ({{ $timesheetDatas->assignmentname ?? '' }})
                                                 @endif
                                             </td>
                                             <td>
                                                 {{ $timesheetDatas->assignmentgenerate_id ?? '' }}
                                             </td>
                                             <td class="textfixed"> {{ $timesheetDatas->workitem ?? '' }}</td>
                                             <td class="textfixed">{{ $timesheetDatas->location ?? '' }} </td>
                                             <td class="textfixed"> {{ $timesheetDatas->patnername ?? '' }}
                                             </td>
                                             <td>{{ $timesheetDatas->final_partnerstaffcode }}</td>
                                             <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                         </tr>
                                     @endif
                                 @endforeach





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php



  public function mytimesheetlist(Request $request, $teamid)
  {

    if (auth()->user()->role_id == 13) {
      $timesheetData = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->where('timesheetusers.createdby', $teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('timesheetusers.date')
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        ->orderBy('timesheetusers.date', 'DESC')
        ->limit(7)
        ->get();

      $timesheetData = $this->rejoinedOrPromotion($timesheetData);
    } else {
      $timesheetData = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->where('timesheetusers.createdby', $teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('timesheetusers.date')
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        ->orderBy('timesheetusers.date', 'DESC')
        ->limit(7)
        ->get();

      $timesheetData = $this->rejoinedOrPromotion($timesheetData);
    }
    session()->forget('_old_input');
    return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
  }



















 public function searchingtimesheet(Request $request)
  {
    // Get all input from form
    $startDate = $request->input('startdate', null);
    $endDate = $request->input('enddate', null);
    $teamId = $request->input('teamid', null);
    $teammemberId = $request->input('teammemberId', null);
    // $year = $request->input('year', null);

    $teammembers = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.status', 1)
      ->whereIn('teammembers.role_id', [14, 15, 13, 11])
      ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
      ->orderBy('team_member', 'ASC')
      ->get();

    // For patner
    if (auth()->user()->role_id == 13) {
      $query = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->where('timesheetusers.createdby', $teamId)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('timesheetusers.date')
        ->whereBetween('timesheetusers.date', [$startDate, $endDate])
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        ->orderBy('timesheetusers.date', 'DESC');

      $timesheetData = $query->get();

      $timesheetData = $this->rejoinedOrPromotion($timesheetData);

      $request->flash();
      return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
    }
    // For staff and manager
    else {
      $query = DB::table('timesheetusers')
        ->leftJoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
          $join->on('teamrolehistoryteam.teammember_id', '=', 'teammembers.id')
            ->whereRaw('teamrolehistoryteam.created_at < assignmentbudgetings.created_at');
        })
        ->leftJoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftJoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftJoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'patnerid.id')
            ->whereRaw('teamrolehistory.created_at < assignmentbudgetings.created_at');
        })
        ->where('timesheetusers.createdby', $teamId)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('timesheetusers.date')
        ->whereBetween('timesheetusers.date', [$startDate, $endDate])
        ->select(
          'timesheetusers.*',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'teammembers.team_member',
          'teammembers.staffcode',
          'patnerid.team_member as patnername',
          'patnerid.staffcode as patnerstaffcodee',
          'assignmentbudgetings.assignmentname',
          'teamrolehistory.newstaff_code as ptnrstaffcode',
          'teamrolehistoryteam.newstaff_code as teamnewstaffcode',
          'assignmentbudgetings.created_at as assignmentcreated'
        )
        ->orderBy('timesheetusers.date', 'DESC');

      $timesheetData = $query->get();

      $timesheetData = $this->rejoinedOrPromotion($timesheetData);
      // dd($timesheetData);
      $request->flash();
      return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
    }
  }






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php

 $dates = date('l', strtotime($timesheetDatas->date));

                                            $targetAssignments = [29, 34, 32, 33, 134];
                                            if (in_array($timesheetDatas->client_id, $targetAssignments)) {
                                                // teammember code
                                                $rejoindpromotioncheck = DB::table('teamrolehistory')
                                                    ->where('teammember_id', $timesheetDatas->createdby)
                                                    ->first();

                                                $timesheetDate = $timesheetDatas->date
                                                    ? Carbon\Carbon::createFromFormat(
                                                        'Y-m-d',
                                                        $timesheetDatas->date,
                                                    )->startOfDay()
                                                    : null;

                                                $rejoindpromotioncheckdate = null;
                                                if ($rejoindpromotioncheck) {
                                                    $rejoindpromotioncheckdate = Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $rejoindpromotioncheck->created_at,
                                                    )->startOfDay();
                                                }

                                                // partner code
                                                $rejoindpromotioncheckpartner = DB::table('teamrolehistory')
                                                    ->where('teammember_id', $timesheetDatas->partner)
                                                    ->first();

                                                $timesheetDatepartner = $timesheetDatas->date
                                                    ? Carbon\Carbon::createFromFormat(
                                                        'Y-m-d',
                                                        $timesheetDatas->date,
                                                    )->startOfDay()
                                                    : null;

                                                $rejoindpromotioncheckdatepartner = null;
                                                if ($rejoindpromotioncheckpartner) {
                                                    $rejoindpromotioncheckdatepartner = Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $rejoindpromotioncheckpartner->created_at,
                                                    )->startOfDay();
                                                }
                                            } else {
                                                $teamMembers = DB::table('teamrolehistory')
                                                    ->whereIn('teammember_id', [
                                                        $timesheetDatas->createdby,
                                                        $timesheetDatas->partner,
                                                    ])
                                                    ->get()
                                                    ->keyBy('teammember_id');

                                                $datadate = $timesheetDatas->assignmentcreated
                                                    ? Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $timesheetDatas->assignmentcreated,
                                                    )
                                                    : null;

                                                $permotioncheck = $teamMembers[$timesheetDatas->createdby] ?? null;
                                                $approverdata = $teamMembers[$timesheetDatas->partner] ?? null;

                                                $permotiondate = $permotioncheck
                                                    ? Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $permotioncheck->created_at,
                                                    )
                                                    : null;
                                                $approverdate = $approverdata
                                                    ? Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $approverdata->created_at,
                                                    )
                                                    : null;
                                            }
                                        @endphp
										
										
										
									

									
										
										
								


								
										
										

                                        <td>
                                            {{-- @if ($approverdata && $datadate && $datadate->greaterThan($approverdate))
                                                {{ $approverdata->newstaff_code }}
                                            @else
                                                {{ $client_id->staffcode ?? '' }}
                                            @endif
                                            @if (count((array) $client_id->team_member) > 1)
                                                ,
                                            @endif --}}
                                            @if (in_array($timesheetDatas->client_id, $targetAssignments))
                                                @if (
                                                    $rejoindpromotioncheckpartner &&
                                                        $timesheetDatepartner &&
                                                        $timesheetDatepartner->greaterThanOrEqualTo($rejoindpromotioncheckdatepartner))
                                                    {{ $rejoindpromotioncheckpartner->newstaff_code }}
                                                @else
                                                    {{ $client_id->staffcode ?? '' }}
                                                @endif
                                                @if (count((array) $client_id->team_member) > 1)
                                                    ,
                                                @endif
                                            @else
                                                @if ($approverdata && $datadate && $datadate->greaterThan($approverdate))
                                                    {{ $approverdata->newstaff_code }}
                                                @else
                                                    {{ $client_id->staffcode ?? '' }}
                                                @endif
                                                @if (count((array) $client_id->team_member) > 1)
                                                    ,
                                                @endif
                                            @endif
                                        </td>										
										
									

									
										


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\rejectedlistteam.blade.php

 $dates = date('l', strtotime($timesheetDatas->date));

                                        $targetAssignments = [29, 34, 32, 33, 134];
                                        if (in_array($timesheetDatas->client_id, $targetAssignments)) {
                                            $rejoindpromotioncheck = DB::table('teamrolehistory')
                                                ->where('teammember_id', $timesheetDatas->createdby)
                                                ->first();

                                            $timesheetDate = $timesheetDatas->date
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d',
                                                    $timesheetDatas->date,
                                                )->startOfDay()
                                                : null;

                                            $rejoindpromotioncheckdate = null;
                                            if ($rejoindpromotioncheck) {
                                                $rejoindpromotioncheckdate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $rejoindpromotioncheck->created_at,
                                                )->startOfDay();
                                            }
                                        } else {
                                            $assignmentcheck = DB::table('assignmentbudgetings')
                                                ->where('assignmentgenerate_id', $timesheetDatas->assignmentgenerate_id)
                                                ->first();

                                            $teamMembers = DB::table('teamrolehistory')
                                                ->whereIn('teammember_id', [
                                                    $timesheetDatas->createdby,
                                                    $timesheetDatas->partner,
                                                ])
                                                ->get()
                                                ->keyBy('teammember_id');

                                            $datadate = $assignmentcheck
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $assignmentcheck->created_at,
                                                )
                                                : null;

                                            // dd($teamMembers);

                                            $permotioncheck = $teamMembers[$timesheetDatas->createdby] ?? null;
                                            $approverdata = $teamMembers[$timesheetDatas->partner] ?? null;

                                            $permotiondate = $permotioncheck
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $permotioncheck->created_at,
                                                )
                                                : null;
                                            $approverdate = $approverdata
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $approverdata->created_at,
                                                )
                                                : null;
                                        }

                                    @endphp
									
							


							
									
									
									
									
									
									
{{ $permotioncheck->newstaff_code }}									
									
									
									
                                    <td>
                                        @if (in_array($timesheetDatas->client_id, $targetAssignments))
                                            @if ($rejoindpromotioncheck && $timesheetDate && $timesheetDate->greaterThanOrEqualTo($rejoindpromotioncheckdate))
                                                {{ $rejoindpromotioncheck->newstaff_code }}
                                            @else
                                                {{ $timesheetDatas->staffcode }}
                                            @endif
                                        @else
                                            @if ($permotioncheck && $datadate && $datadate->greaterThan($permotiondate))
                                                {{ $permotioncheck->newstaff_code }}
                                            @else
                                                {{ $timesheetDatas->staffcode }}
                                            @endif
                                        @endif
                                    </td>									
									










    @if ($approverdata && $datadate && $datadate->greaterThan($approverdate))

                                        <td>
                                            @foreach ($client_id as $item)
                                                @php
                                                    if (in_array($item->client_id, $targetAssignments)) {
                                                        // partner code
                                                        $rejoindpromotioncheckpartner = DB::table('teamrolehistory')
                                                            ->where('teammember_id', $item->partner)
                                                            ->first();

                                                        $timesheetDatepartner = $item->date
                                                            ? Carbon\Carbon::createFromFormat(
                                                                'Y-m-d',
                                                                $item->date,
                                                            )->startOfDay()
                                                            : null;

                                                        $rejoindpromotioncheckdatepartner = null;
                                                        if ($rejoindpromotioncheckpartner) {
                                                            $rejoindpromotioncheckdatepartner = Carbon\Carbon::createFromFormat(
                                                                'Y-m-d H:i:s',
                                                                $rejoindpromotioncheckpartner->created_at,
                                                            )->startOfDay();
                                                        }
                                                    }
                                                @endphp
                                                @if (in_array($item->client_id, $targetAssignments))
                                                    @if (
                                                        $rejoindpromotioncheckpartner &&
                                                            $timesheetDatepartner &&
                                                            $timesheetDatepartner->greaterThanOrEqualTo($rejoindpromotioncheckdatepartner))
                                                        {{ $rejoindpromotioncheckpartner->newstaff_code }}
                                                    @else
                                                        {{ $item->staffcode ?? '' }}
                                                    @endif
                                                    @if ($item->staffcode != null)
                                                        ,
                                                    @endif
                                                @else
                                                    @if ($approverdata && $datadate && $datadate->greaterThan($approverdate))
                                                        {{ $approverdata->newstaff_code }}
                                                    @else
                                                        {{ $item->staffcode ?? '' }}
                                                    @endif
                                                    @if ($item->staffcode != null)
                                                        ,
                                                    @endif
                                                @endif
                                            @endforeach
                                        </td>
										
										
						

						
										

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

 public function  timesheetreject($id)
add this 2 function after searched function



  private function rejoinedOrPromotion($timesheetData)
  {
    $targetClients = [29, 34, 32, 33, 134];
    $createdbyIds = $timesheetData->pluck('createdby')->unique()->toArray();

    $promotionData = DB::table('teamrolehistory')
      ->whereIn('teammember_id', $createdbyIds)
      ->select('teammember_id', 'newstaff_code', 'created_at')
      ->get()
      ->keyBy('teammember_id');

    $partnerIds = $timesheetData->pluck('partner')->unique()->filter()->values();

    $promotionChecksPartner = DB::table('teamrolehistory')
      ->whereIn('teammember_id', $partnerIds)
      ->select('teammember_id', 'newstaff_code', 'created_at')
      ->get()
      ->keyBy('teammember_id')
      ->map(fn($row) => [
        'newstaff_code' => $row->newstaff_code,
        'promotion_date' => Carbon::parse($row->created_at)->startOfDay(),
      ]);

    return $timesheetData->map(function ($row) use ($targetClients, $promotionData, $promotionChecksPartner) {

      $row->final_staffcode = $row->teamnewstaffcode ?? $row->staffcode ?? '';
      if (in_array($row->client_id, $targetClients) && $row->date) {
        $dataDate = Carbon::parse($row->date)->startOfDay();
        $promotion = $promotionData[$row->createdby] ?? null;
        if ($promotion && $dataDate->greaterThanOrEqualTo(Carbon::parse($promotion->created_at)->startOfDay())) {
          $row->final_staffcode = $promotion->newstaff_code;
        } else {
          $row->final_staffcode = $row->staffcode ?? '';
        }
      }

      $row->final_partnerstaffcode = $row->ptnrstaffcode ?? $row->patnerstaffcodee ?? '';
      if (in_array($row->client_id, $targetClients) && $row->date) {
        $dataDate = Carbon::parse($row->date)->startOfDay();
        $promotionPartner = $promotionChecksPartner->get($row->partner);
        if ($promotionPartner && $dataDate->greaterThanOrEqualTo($promotionPartner['promotion_date'])) {
          $row->final_partnerstaffcode = $promotionPartner['newstaff_code'];
        } else {
          $row->final_partnerstaffcode = $row->ptnrstaffcode ?? $row->patnerstaffcodee ?? '';
        }
      }
      return $row;
    });
  }

  private function promotionOrRejoined($timesheetData, $promotionCheck, $promotionorRejoinDate)
  {

    $targetClients = [29, 34, 32, 33, 134];
    $partnerIds = $timesheetData->pluck('partner')->unique()->filter()->values();
    $promotionChecksPartner = DB::table('teamrolehistory')
      ->whereIn('teammember_id', $partnerIds)
      ->select('teammember_id', 'newstaff_code', 'created_at')
      ->get()
      ->keyBy('teammember_id')
      ->map(fn($row) => [
        'newstaff_code' => $row->newstaff_code,
        'promotion_date' => Carbon::parse($row->created_at)->startOfDay(),
      ]);

    return $timesheetData->map(function ($row) use ($targetClients, $promotionCheck, $promotionorRejoinDate, $promotionChecksPartner) {
      $row->final_teamstaffcode = $row->teamnewstaffcode ?? $row->staffcode ?? '';
      if (in_array($row->client_id, $targetClients) && $row->date) {
        $dataDate = Carbon::parse($row->date)->startOfDay();
        if ($promotionCheck && $dataDate->greaterThanOrEqualTo($promotionorRejoinDate)) {
          $row->final_teamstaffcode = $promotionCheck->newstaff_code;
        } else {
          $row->final_teamstaffcode = $row->staffcode ?? '';
        }
      }

      $row->final_partnerstaffcode = $row->ptnrstaffcode ?? $row->patnerstaffcodee ?? '';
      if (in_array($row->client_id, $targetClients) && $row->date) {
        $dataDate = Carbon::parse($row->date)->startOfDay();
        $promotionPartner = $promotionChecksPartner->get($row->partner);
        if ($promotionPartner && $dataDate->greaterThanOrEqualTo($promotionPartner['promotion_date'])) {
          $row->final_partnerstaffcode = $promotionPartner['newstaff_code'];
        } else {
          $row->final_partnerstaffcode = $row->ptnrstaffcode ?? $row->patnerstaffcodee ?? '';
        }
      }

      return $row;
    });
  }





For the following five clients, Off/Holidays, Official Travel, Unallocated,  Seminar/Conference and Apply Leave, the old code is still appearing. end hare 


On the Timesheet Report page, the total hours are exceeding 84 for old data  ```start
vsalive
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


public function allteamsubmitted()
  {

    $get_datess = DB::table('timesheetreport')
      ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetreport.teamid')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'timesheetreport.created_at');
      })
      ->leftJoin('teammembers as partners', 'partners.id', '=', 'timesheetreport.partnerid')
      ->select(
        'timesheetreport.*',
        'teamrolehistory.newstaff_code',
        'teammembers.team_member',
        'teammembers.staffcode',
        'partners.team_member as partnername',
        'teammembers.emailid'
      )
      // ->latest()
      ->orderByDesc('timesheetreport.created_at')
      ->get();

    $permissiontimesheet = DB::table('timesheetreport')->first();

    $groupedData = $get_datess->groupBy(function ($item) {
      $finalStaffcode = $item->newstaff_code ?? $item->staffcode;
      return $item->team_member . '|' . $item->week . '|' . $finalStaffcode;
    })->map(function ($group) {
      $firstItem = $group->first();

      return (object)[
        'id' => $firstItem->id,
        'teamid' => $firstItem->teamid,
        'week' => $firstItem->week,
        'totaldays' => $group->sum('totaldays'),
        'totaltime' => $group->sum('totaltime'),
        'dayscount' => $group->sum('dayscount'),
        'startdate' => $firstItem->startdate,
        'enddate' => $firstItem->enddate,
        'partnername' => $firstItem->partnername,
        'created_at' => $firstItem->created_at,
        'team_member' => $firstItem->team_member,
        'emailid' => $firstItem->emailid,
        'staffcode' => $firstItem->newstaff_code ?? $firstItem->staffcode,
        'partnerid' => $firstItem->partnerid,
      ];
    });

    $get_date = collect($groupedData->values());
    return view('backEnd.timesheet.myteamindex', compact('get_date', 'permissiontimesheet'));
  }




resources\views\backEnd\timesheet\myteamindex.blade.php


  <script>
      $(document).ready(function() {
          $('#examplee').DataTable({
              "order": [
                  //   [2, "desc"]
              ],
              searching: false,
              columnDefs: [{
                  targets: [0, 1, 2, 4, 5],
                  orderable: false
              }],
              buttons: []
          });
      });
  </script>

  {{-- <script>
      $(document).ready(function() {
          $('#examplee').DataTable({
              dom: 'frtip',
              // searching: true, // optional, default true hota hai
              columnDefs: [{
                  targets: [0, 1, 2, 4, 5],
                  orderable: false
              }],
              buttons: []
          });
      });
  </script> --}}

On the Timesheet Report page, the total hours are exceeding 84 for old data  ```end hare 



I have observed a bug in VSA live. The issue is that users are able to submit timesheets in advance for Casual Leave and Exam Leave, even though the timesheet module had already been tested.
timsheet submit in advance on vsalive ```start hare 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php
$startdateofdata = Carbon\Carbon::createFromFormat('Y-m-d', $timesheetsaved->date ?? '');


                   
                    $timesheetsaved = DB::table('timesheetusers')
                        ->where('status', '0')
                        ->where('createdby', auth()->user()->teammember_id)
                        ->orderBy('date', 'asc')
                        ->first();

                    $timesheetcount = 0;

                    if ($timesheetsaved) {
                        $startdateofdata = Carbon\Carbon::createFromFormat('Y-m-d', $timesheetsaved->date ?? '');
                        $enddateofdata = $startdateofdata->copy()->next(Carbon\Carbon::SATURDAY);
                        // check if date is today or in past not in future
                        if ($enddateofdata->lte(Carbon\Carbon::today())) {
                            $timesheetcount = DB::table('timesheets')
                                ->where('status', '0')
                                ->where('created_by', auth()->user()->teammember_id)
                                ->whereBetween('date', [
                                    $startdateofdata->format('Y-m-d'),
                                    $enddateofdata->format('Y-m-d'),
                                ])
                                ->count();
                        }

                        // dd($timesheetsaved, $startdateofdata, $timesheetcount ?? null);
                    }
					
					
					

```end hare 


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\task\submit-actionable.blade.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\teamapplication.blade.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\task\submit-actionable.blade.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\task\submit-actionable.blade.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\teamapplication.blade.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\task\submit-actionable.blade.php




22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\task\submit-actionable.blade.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\teamapplication.blade.php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\task\submit-actionable.blade.php


admin id 
1.timesheet , submitted timesheet , rejected 


promoted user 
timesheet





prometed partner 



issue will be raise 
so please test on latest data 
we have to change assignment created date 



Illuminate\Support\Collection {#3304 ▼
  #items: array:1 [▼
    936 => {#3308 ▼
      +"teammember_id": 936
      +"newstaff_code": "P1079"
      +"created_at": "2024-12-02 16:19:11"
    }
  ]
  #escapeWhenCastingToString: false
}



"2024-12-02 16:19:11"



















