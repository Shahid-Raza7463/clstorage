
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
Comment all places on vsademo
app\Http\Controllers\ApplyleaveController.php
app\Http\Controllers\TimesheetController.php

itsupport_delhi@vsa.co.in  ise comment kar de 



agar is per koi bhi update ho to profile me 10th and 12th ka documnet check karle ek baar ye baar baar problem aata hai 
independence ke ander create and view file insert karna hai 
IndependenceController.php
TeammemberController (1).php


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222

The user cannot apply for leave on a Sunday.
The user cannot apply for leave on a holiday.
The user cannot apply for leave if the "From" date is a Sunday or the "To" date is a Sunday.
The user cannot apply for leave if the "From" date is a holiday or the "To" date is a holiday.
The user cannot apply for leave if the "From" date is a Saturday or the "To" date is a Saturday, this is only for staff.
When a user's timesheet is rejected continuously for more than 8 days, if the user has not submitted the Sunday date timesheet, they currently cannot apply for leave. However, if the Sunday timesheet is submitted, the user can apply for leave. The client now wants the functionality updated so that the user can apply for leave even if the Sunday timesheet is not submitted
In attendance module total no of days 0 for october months fixed on vsalive
Total hour count bugs fixed, bugs no is vs-224

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


  public function timesheeteditstore(Request $request)
  {

    $oldtimesheetsubmiteddata = DB::table('timesheetusers')
      ->where('timesheetid', $request->timesheetid)
      ->where('createdby', $request->createdby) // Assuming you are storing user ID
      ->get();

    // Calculate the total hours from previously submitted timesheets (status = 1)
    $SubmittedTimesheetHours = $oldtimesheetsubmiteddata->whereIn('status', [1, 3])->sum('hour');

    // Get the new rejected hours from the request
    $RejectedTimesheetHours = $request->input('hour');

    // Cast rejected hours to integer to ensure it's a numeric value
    $RejectedTimesheetHours = (int)$RejectedTimesheetHours;

    // Calculate the total hours by adding both submitted and rejected hours
    $totalHours = $SubmittedTimesheetHours + $RejectedTimesheetHours;
    // dd($request);


    // Check if the total hours exceed the limit of 12
    if (!is_numeric($totalHours) || $totalHours > 12) {

      $output = ['msg' => 'The total hours cannot be greater than 12'];
      return redirect('timesheetreject/edit/' . $request->timesheetusersid)->with('statuss', $output);
    }

    if (!is_numeric($request->assignment_id)) {
      $assignment = Assignmentmapping::where('assignmentgenerate_id', $request->assignment_id)
        ->select('assignment_id')
        ->first();
      // dd('hi');
      // ->toArray();
      // $assignment_id = $assignment[0]['assignment_id'];
      $assignment_id = $assignment->assignment_id;
      $assignmentgenerateId = $request->assignment_id;
      $oldtimesheetdata = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      // update total hour 

      if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {

        $gettotalteamhour = DB::table('assignmentmappings')
          ->leftJoin(
            'assignmentteammappings',
            'assignmentteammappings.assignmentmapping_id',
            'assignmentmappings.id',
          )
          ->where(
            'assignmentmappings.assignmentgenerate_id',
            $oldtimesheetdata->assignmentgenerate_id
          )
          ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
          ->select('assignmentteammappings.*')
          ->first();



        $gettotalteamhournew = DB::table('assignmentmappings')
          ->leftJoin(
            'assignmentteammappings',
            'assignmentteammappings.assignmentmapping_id',
            'assignmentmappings.id',
          )
          ->where(
            'assignmentmappings.assignmentgenerate_id',
            $request->assignment_id
          )
          ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
          ->select('assignmentteammappings.*')
          ->first();


        if ($gettotalteamhour) {
          if ($gettotalteamhour->teamhour == null) {
            $gettotalteamhour->teamhour = 0;
          }

          $finalresult =  $gettotalteamhour->teamhour - $oldtimesheetdata->hour;
          $totalteamhourupdate = DB::table('assignmentteammappings')
            ->where('id', $gettotalteamhour->id)
            // ->get();
            ->update(['teamhour' =>  $finalresult]);
        }
        if ($gettotalteamhournew) {
          if ($gettotalteamhournew->teamhour == null) {
            $gettotalteamhournew->teamhour = 0;
          }

          $finalresult =  $gettotalteamhournew->teamhour + $request->hour;
          $totalteamhourupdate = DB::table('assignmentteammappings')
            ->where('id', $gettotalteamhournew->id)
            // ->get();
            ->update(['teamhour' =>  $finalresult]);
        }
      }

      if (auth()->user()->role_id == 13) {
        $assignmentdata = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $assignmentgenerateId)
          ->first();
        $assignmentdataold = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $oldtimesheetdata->assignmentgenerate_id)
          ->first();

        // old assignment hour subtract 
        if ($assignmentdataold->leadpartner == auth()->user()->teammember_id) {
          if ($assignmentdataold->leadpartnerhour == null) {
            $assignmentdataold->leadpartnerhour = 0;
          }
          $finalresultleadpatner =  $assignmentdataold->leadpartnerhour - $oldtimesheetdata->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdataold->id)
            // ->get();
            ->update(['leadpartnerhour' => $finalresultleadpatner]);
        }
        if ($assignmentdataold->otherpartner == auth()->user()->teammember_id) {
          if ($assignmentdataold->otherpartnerhour == null) {
            $assignmentdataold->otherpartnerhour = 0;
          }
          $finalresultotherpatner =  $assignmentdataold->otherpartnerhour - $oldtimesheetdata->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdataold->id)
            // ->get();
            ->update(['otherpartnerhour' => $finalresultotherpatner]);
        }

        // new assignment hour add
        if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
          if ($assignmentdata->leadpartnerhour == null) {
            $assignmentdata->leadpartnerhour = 0;
          }
          $finalresultleadpatner =  $assignmentdata->leadpartnerhour + $request->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdata->id)
            // ->get();
            ->update(['leadpartnerhour' => $finalresultleadpatner]);
        }
        if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
          if ($assignmentdata->otherpartnerhour == null) {
            $assignmentdata->otherpartnerhour = 0;
          }
          $finalresultotherpatner =  $assignmentdata->otherpartnerhour + $request->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdata->id)
            // ->get();
            ->update(['otherpartnerhour' => $finalresultotherpatner]);
        }
      }
    }

    if (is_numeric($request->assignment_id)) {
      $assignment_id = $request->assignment_id;
      $getassignmentgenerateId = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      $assignmentgenerateId = $getassignmentgenerateId->assignmentgenerate_id;

      $oldtimesheetdata = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      // update total hour 
      if ($oldtimesheetdata->hour != $request->hour) {
        if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
          $gettotalteamhour = DB::table('assignmentmappings')
            ->leftJoin(
              'assignmentteammappings',
              'assignmentteammappings.assignmentmapping_id',
              'assignmentmappings.id',
            )
            ->where(
              'assignmentmappings.assignmentgenerate_id',
              $oldtimesheetdata->assignmentgenerate_id
            )
            ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->select('assignmentteammappings.*')
            ->first();
          if ($gettotalteamhour) {
            $totalteamhour = $gettotalteamhour->teamhour;
            $subtractoldhour =  $totalteamhour - $oldtimesheetdata->hour;
            $finalresult =  $subtractoldhour + $request->hour;

            $totalteamhourupdate = DB::table('assignmentteammappings')
              ->where('id', $gettotalteamhour->id)
              // ->get();
              ->update(['teamhour' =>  $finalresult]);
          }
        }
        if (auth()->user()->role_id == 13) {
          $assignmentdata = DB::table('assignmentmappings')
            ->where('assignmentgenerate_id', $oldtimesheetdata->assignmentgenerate_id)
            ->first();

          if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
            $subtractoldhour =  $assignmentdata->leadpartnerhour - $oldtimesheetdata->hour;
            $finalresultleadpatner =  $subtractoldhour + $request->hour;
            $totalteamhourupdate = DB::table('assignmentmappings')
              ->where('id', $assignmentdata->id)
              // ->get();
              ->update(['leadpartnerhour' => $finalresultleadpatner]);
          }
          if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
            $subtractoldhour =  $assignmentdata->otherpartnerhour - $oldtimesheetdata->hour;
            $finalresultotherpatner =  $subtractoldhour + $request->hour;

            $totalteamhourupdate = DB::table('assignmentmappings')
              ->where('id', $assignmentdata->id)
              // ->get();
              ->update(['otherpartnerhour' => $finalresultotherpatner]);
          }
        }
      }
    }

    try {
      $timesheetdataupdate = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();

      // dd($assignmentgenerateId);
      DB::table('timesheets')->where('id', $timesheetdataupdate->timesheetid)->update([
        'status'   =>   3,
      ]);

      DB::table('timesheetusers')->where('id', $request->timesheetusersid)->update([
        'status'   =>   3,
        'client_id'   =>  $request->client_id,
        'assignmentgenerate_id'   =>  $assignmentgenerateId,
        'assignment_id'   =>   $assignment_id,
        'partner'   =>  $request->partner,
        'workitem'   =>   $request->workitem,
        'createdby'   =>   $request->createdby,
        'location'   =>   $request->location,
        'hour'   =>   $request->hour,
      ]);

      // Attendance code start hare 
      $hdatess = Carbon::parse($request->date)->format('Y-m-d');
      $day = Carbon::parse($hdatess)->format('d');
      $month = Carbon::parse($hdatess)->format('F');
      $yeardata = Carbon::parse($hdatess)->format('Y');

      $dates = [
        '01' => 'one',
        '02' => 'two',
        '03' => 'three',
        '04' => 'four',
        '05' => 'five',
        '06' => 'six',
        '07' => 'seven',
        '08' => 'eight',
        '09' => 'nine',
        '10' => 'ten',
        '11' => 'eleven',
        '12' => 'twelve',
        '13' => 'thirteen',
        '14' => 'fourteen',
        '15' => 'fifteen',
        '16' => 'sixteen',
        '17' => 'seventeen',
        '18' => 'eighteen',
        '19' => 'ninghteen',
        '20' => 'twenty',
        '21' => 'twentyone',
        '22' => 'twentytwo',
        '23' => 'twentythree',
        '24' => 'twentyfour',
        '25' => 'twentyfive',
        '26' => 'twentysix',
        '27' => 'twentyseven',
        '28' => 'twentyeight',
        '29' => 'twentynine',
        '30' => 'thirty',
        '31' => 'thirtyone',
      ];

      $column = $dates[$day];

      // check attendenace record exist or not 
      $attendances = DB::table('attendances')
        ->where('employee_name', $request->createdby)
        ->where('month', $month)
        ->first();


      if ($attendances && property_exists($attendances, $column)) {
        $checkwording = DB::table('attendances')
          ->where('id', $attendances->id)
          ->value($column);

        if ($checkwording == 'R') {
          $client = $request->client_id;
          // $assignmentid = $request->assignment_id;
          if (is_numeric($request->assignment_id)) {
            $assignmentid = $request->assignment_id;
          } else {
            $assignmentid = $assignment_id;
          }

          // Determine update wording based on client and assignment conditions
          // $updatewording = match (true) {
          //   // Travel
          //   $client == 32 => 'T',
          //   // Off holidays
          //   $client == 33 && str_replace(['1st ', '2nd ', '3rd ', '4th ', '5th '], '', $request->workitem) == 'Saturday' => 'OH',
          //   // Other holidays from calendar
          //   $client == 33 => 'H',
          //   // Casual leave
          //   $client == 134 && $assignmentid == 215 => 'CL',
          //   // Exam leave
          //   $client == 134 && $assignmentid == 214 => 'EL',
          //     // Default presence
          //   default => 'P',
          // };


          if ($client == 32) {
            $updatewording = 'T'; // Travel
          } elseif ($client == 33 && str_replace(['1st ', '2nd ', '3rd ', '4th ', '5th '], '', $request->workitem) == 'Saturday') {
            $updatewording = 'OH'; // Off holidays
          } elseif ($client == 33) {
            $updatewording = 'H'; // Other holidays from calendar
          } elseif ($client == 134 && $assignmentid == 215) {
            $updatewording = 'CL'; // Casual leave
          } elseif ($client == 134 && $assignmentid == 214) {
            $updatewording = 'EL'; // Exam leave
          } else {
            $updatewording = 'P'; // Default presence
          }

          // Mapping for total count columns
          $totalCountMapping = [
            'P' => 'no_of_days_present',
            'CL' => 'casual_leave',
            'EL' => 'exam_leave',
            'T' => 'travel',
            'OH' => 'offholidays',
            'W' => 'sundaycount',
            'H' => 'holidays'
          ];

          // Update the total count and attendance record if applicable
          if (isset($totalCountMapping[$updatewording])) {
            $totalcountColumn = $totalCountMapping[$updatewording];
            $totalcountupdate = $attendances->$totalcountColumn + 1;
            DB::table('attendances')
              ->where('id', $attendances->id)
              ->update([
                $column => $updatewording,
                $totalcountColumn => $totalcountupdate,
              ]);
          }
        }
      }

      // dd('updated', 1);
      // Attendance code end hare 

      if ($request->status == 2) {
        DB::table('timesheetupdatelogs')->insert([
          'timesheetusers_id'   =>  $request->timesheetusersid,
          'status'   =>   3,
          'created_at' => now(),
          'updated_at' => now(),
        ]);
      }
      $output = array('msg' => 'Updated Successfully');
      // return back()->with('statuss', $output);
      return redirect()->to('rejectedlist')->with('statuss', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


  public function savedtimesheeteditstore(Request $request)
  {
    $oldtimesheetsubmiteddata = DB::table('timesheetusers')
      ->where('timesheetid', $request->timesheetid)
      ->where('createdby', $request->createdby)
      ->get();

    $SubmittedTimesheetHours = 0;
    if ($oldtimesheetsubmiteddata->count() >= 2) {
      $filteredData = $oldtimesheetsubmiteddata->reject(function ($item) use ($request) {
        return $item->id == $request->timesheetusersid;
      });

      $SubmittedTimesheetHours = $filteredData->whereIn('status', [0])->sum('hour');
    }

    $RejectedTimesheetHours = $request->input('hour');
    $RejectedTimesheetHours = (int)$RejectedTimesheetHours;
    $totalHours = $SubmittedTimesheetHours + $RejectedTimesheetHours;
    // Check if the total hours exceed the limit of 12
    if (!is_numeric($totalHours) || $totalHours > 12) {
      $output = ['msg' => 'The total hours cannot be greater than 12'];
      return back()->with('statuss', $output);
    }

    if (!is_numeric($request->assignment_id)) {
      $assignment = Assignmentmapping::where('assignmentgenerate_id', $request->assignment_id)
        ->select('assignment_id')
        ->first();
      // dd('hi');
      // ->toArray();
      // $assignment_id = $assignment[0]['assignment_id'];
      $assignment_id = $assignment->assignment_id;
      $assignmentgenerateId = $request->assignment_id;
      $oldtimesheetdata = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      // update total hour 

      if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {

        $gettotalteamhour = DB::table('assignmentmappings')
          ->leftJoin(
            'assignmentteammappings',
            'assignmentteammappings.assignmentmapping_id',
            'assignmentmappings.id',
          )
          ->where(
            'assignmentmappings.assignmentgenerate_id',
            $oldtimesheetdata->assignmentgenerate_id
          )
          ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
          ->select('assignmentteammappings.*')
          ->first();



        $gettotalteamhournew = DB::table('assignmentmappings')
          ->leftJoin(
            'assignmentteammappings',
            'assignmentteammappings.assignmentmapping_id',
            'assignmentmappings.id',
          )
          ->where(
            'assignmentmappings.assignmentgenerate_id',
            $request->assignment_id
          )
          ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
          ->select('assignmentteammappings.*')
          ->first();




        if ($gettotalteamhour) {
          if ($gettotalteamhour->teamhour == null) {
            $gettotalteamhour->teamhour = 0;
          }
          // $finalresult =  $gettotalteamhour->teamhour - $request->hour;
          $finalresult =  $gettotalteamhour->teamhour - $oldtimesheetdata->hour;
          $totalteamhourupdate = DB::table('assignmentteammappings')
            ->where('id', $gettotalteamhour->id)
            // ->get();
            ->update(['teamhour' =>  $finalresult]);
        }
        if ($gettotalteamhournew) {
          if ($gettotalteamhournew->teamhour == null) {
            $gettotalteamhournew->teamhour = 0;
          }
          $finalresult =  $gettotalteamhournew->teamhour + $request->hour;
          $totalteamhourupdate = DB::table('assignmentteammappings')
            ->where('id', $gettotalteamhournew->id)
            // ->get();
            ->update(['teamhour' =>  $finalresult]);
        }
      }

      if (auth()->user()->role_id == 13) {
        $assignmentdata = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $assignmentgenerateId)
          ->first();
        $assignmentdataold = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $oldtimesheetdata->assignmentgenerate_id)
          ->first();

        // old assignment hour subtract 
        if ($assignmentdataold->leadpartner == auth()->user()->teammember_id) {
          if ($assignmentdataold->leadpartnerhour == null) {
            $assignmentdataold->leadpartnerhour = 0;
          }
          $finalresultleadpatner =  $assignmentdataold->leadpartnerhour - $oldtimesheetdata->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdataold->id)
            // ->get();
            ->update(['leadpartnerhour' => $finalresultleadpatner]);
        }
        if ($assignmentdataold->otherpartner == auth()->user()->teammember_id) {
          if ($assignmentdataold->otherpartnerhour == null) {
            $assignmentdataold->otherpartnerhour = 0;
          }
          $finalresultotherpatner =  $assignmentdataold->otherpartnerhour - $oldtimesheetdata->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdataold->id)
            // ->get();
            ->update(['otherpartnerhour' => $finalresultotherpatner]);
        }

        // new assignment hour add
        if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
          if ($assignmentdata->leadpartnerhour == null) {
            $assignmentdata->leadpartnerhour = 0;
          }
          $finalresultleadpatner =  $assignmentdata->leadpartnerhour + $request->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdata->id)
            // ->get();
            ->update(['leadpartnerhour' => $finalresultleadpatner]);
        }
        if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
          if ($assignmentdata->otherpartnerhour == null) {
            $assignmentdata->otherpartnerhour = 0;
          }
          $finalresultotherpatner =  $assignmentdata->otherpartnerhour + $request->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdata->id)
            // ->get();
            ->update(['otherpartnerhour' => $finalresultotherpatner]);
        }
      }
    }

    if (is_numeric($request->assignment_id)) {
      $assignment_id = $request->assignment_id;
      $getassignmentgenerateId = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      $assignmentgenerateId = $getassignmentgenerateId->assignmentgenerate_id;

      $oldtimesheetdata = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      // update total hour 
      if ($oldtimesheetdata->hour != $request->hour) {
        if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
          $gettotalteamhour = DB::table('assignmentmappings')
            ->leftJoin(
              'assignmentteammappings',
              'assignmentteammappings.assignmentmapping_id',
              'assignmentmappings.id',
            )
            ->where(
              'assignmentmappings.assignmentgenerate_id',
              $oldtimesheetdata->assignmentgenerate_id
            )
            ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->select('assignmentteammappings.*')
            ->first();
          if ($gettotalteamhour) {
            $totalteamhour = $gettotalteamhour->teamhour;
            $subtractoldhour =  $totalteamhour - $oldtimesheetdata->hour;
            $finalresult =  $subtractoldhour + $request->hour;

            $totalteamhourupdate = DB::table('assignmentteammappings')
              ->where('id', $gettotalteamhour->id)
              // ->get();
              ->update(['teamhour' =>  $finalresult]);
          }
        }
        if (auth()->user()->role_id == 13) {
          $assignmentdata = DB::table('assignmentmappings')
            ->where('assignmentgenerate_id', $oldtimesheetdata->assignmentgenerate_id)
            ->first();

          if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
            $subtractoldhour =  $assignmentdata->leadpartnerhour - $oldtimesheetdata->hour;
            $finalresultleadpatner =  $subtractoldhour + $request->hour;
            $totalteamhourupdate = DB::table('assignmentmappings')
              ->where('id', $assignmentdata->id)
              // ->get();
              ->update(['leadpartnerhour' => $finalresultleadpatner]);
          }
          if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
            $subtractoldhour =  $assignmentdata->otherpartnerhour - $oldtimesheetdata->hour;
            $finalresultotherpatner =  $subtractoldhour + $request->hour;

            $totalteamhourupdate = DB::table('assignmentmappings')
              ->where('id', $assignmentdata->id)
              // ->get();
              ->update(['otherpartnerhour' => $finalresultotherpatner]);
          }
        }
      }
    }

    try {
      $timesheetdataupdate = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      DB::table('timesheets')->where('id', $timesheetdataupdate->timesheetid)->update([
        'status'   =>   0,
      ]);

      DB::table('timesheetusers')->where('id', $request->timesheetusersid)->update([
        'status'   =>   0,
        'client_id'   =>  $request->client_id,
        'assignmentgenerate_id'   =>  $assignmentgenerateId,
        'assignment_id'   =>   $assignment_id,
        'partner'   =>  $request->partner,
        'workitem'   =>   $request->workitem,
        'createdby'   =>   $request->createdby,
        'location'   =>   $request->location,
        'hour'   =>   $request->hour,
      ]);

      $output = array('msg' => 'Updated Successfully');
      return redirect()->to('timesheet/mylist')->with('success', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php


  public function store(Request $request)
  {
    // dd($request, 23);
    $request->validate([
      'leavetype' => "required",
      'to' => "required",
      'from' => "required",
    ]);

    $skipaftertrue = false;
    $from = Carbon::createFromFormat('Y-m-d', $request->from);
    // $from = Carbon::createFromFormat('Y-m-d', '2024-03-11');
    $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');

    // software created date 
    $softwarermaked = Carbon::createFromFormat('Y-m-d', '2023-09-11');

    // timesheetreport latest submitted date 
    $latesttimesheetsubmitted = DB::table('timesheetreport')
      ->where('teamid', auth()->user()->teammember_id)
      ->latest()
      ->first();

    $pormotionandrejoiningdata = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.id', auth()->user()->teammember_id)
      ->select(
        'teammembers.team_member',
        'teammembers.staffcode',
        'teammembers.joining_date',
        'teamrolehistory.newstaff_code',
        'teamrolehistory.rejoiningdate',
        'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
      )
      ->first();

    // $joining_date = $pormotionandrejoiningdata->joining_date ? Carbon::parse($pormotionandrejoiningdata->joining_date) : null;
    $rejoining_date = null;
    if ($pormotionandrejoiningdata) {
      $rejoining_date = $pormotionandrejoiningdata->rejoiningdate ?? $pormotionandrejoiningdata->samepostrejoiningdate;
      $rejoiningDateformate = $rejoining_date ? Carbon::parse($rejoining_date) : null;
    }

    if ($rejoiningDateformate && $from->lessThan($rejoiningDateformate)) {
      $output = ['msg' => 'You cannot apply leave before the rejoining date: ' . $rejoiningDateformate->format('d-m-Y')];
      return back()->with('statuss', $output);
    }

    // if ($joining_date && $from->lessThan($joining_date)) {
    //   $output = ['msg' => 'You cannot fill timesheet before the joining date: ' . $joining_date->format('d-m-Y')];
    //   return redirect('timesheet/mylist')->with('statuss', $output);
    // }

    // $latesttimesheetsubmittedformate = Carbon::createFromFormat('Y-m-d', $latesttimesheetsubmitted->enddate);
    $latesttimesheetsubmittedformate = null;
    if ($latesttimesheetsubmitted) {
      $latesttimesheetsubmittedformate = $latesttimesheetsubmitted->enddate
        ? Carbon::createFromFormat('Y-m-d', $latesttimesheetsubmitted->enddate)
        : null;
    }

    // Check if the from date is in the past
    if ($latesttimesheetsubmittedformate && $latesttimesheetsubmittedformate->greaterThan($from)) {

      // Check if the from date is in the past
      if ($softwarermaked->greaterThan($from)) {
        $output = ['msg' => 'You cannot apply leave before 11-09-2023'];
        return back()->with('statuss', $output);
      }

      $rejectedtimesheetdata = DB::table('timesheetusers')
        ->where('status', 2)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('date', [$request->from, $request->to])
        ->orderBy('date', 'ASC')
        ->get();

      $lastdate = $rejectedtimesheetdata->max('date');

      //copy dates in retrievedDates array in datetime format
      $retrievedDates = [];
      foreach ($rejectedtimesheetdata as $entry) {
        $date = new DateTime($entry->date);
        $retrievedDates[] = $date->format('Y-m-d');
      }

      $expectedDates = [];
      $firstDate = new DateTime($request->from);
      $upcomingSundayDate = new DateTime($request->to);
      while ($firstDate->format('Y-m-d') <= $upcomingSundayDate->format('Y-m-d')) {
        if ($firstDate->format('w') != 0) {
          $expectedDates[] = $firstDate->format('Y-m-d');
        }
        $firstDate->modify("+1 day");
      }

      $missingDates = array_diff($expectedDates, $retrievedDates);
      if (!empty($missingDates)) {

        $missingDatesString = implode(', ', array_map(function ($date) {
          return Carbon::parse($date)->format('d-m-Y');
        }, $missingDates));
        // $missingDatesString = implode(', ', $missingDates);
        // dd($missingDatesString);
        $output = array('msg' => "Timesheet rejected Missing dates: $missingDatesString");
        return back()->with('success', $output);
      }

      if ($rejectedtimesheetdata) {
        $expectedDatesaftersuccess = [];
        $firstDate = new DateTime($request->from);
        $upcomingSundayDate = new DateTime($request->to);
        while ($firstDate->format('Y-m-d') <= $upcomingSundayDate->format('Y-m-d')) {
          if ($firstDate->format('w') == 0) {
            // Insert Sunday data into the 'timesheets' table
            $isexisttimesheet = DB::table('timesheetusers')
              ->where('createdby', auth()->user()->teammember_id)
              ->where('date', $firstDate->format('Y-m-d'))
              ->exists();

            if (!$isexisttimesheet) {
              $id = DB::table('timesheets')->insertGetId([
                'created_by' => auth()->user()->teammember_id,
                'month'     =>   $firstDate->format('F'),
                'date'       => $firstDate->format('Y-m-d'),
                'status'       => 2,
                'created_at' => $firstDate->format('Y-m-d') . ' ' . now()->format('H:i:s'),
                'updated_at' => $firstDate->format('Y-m-d') . ' ' . now()->format('H:i:s'),
              ]);

              DB::table('timesheetusers')->insert([
                'timesheetid'     =>     $id,
                'date'     =>  $firstDate->format('Y-m-d'),
                'status'       => 2,
                'createdby' => auth()->user()->teammember_id,
                'created_at' => $firstDate->format('Y-m-d') . ' ' . now()->format('H:i:s'),
                'updated_at' => $firstDate->format('Y-m-d') . ' ' . now()->format('H:i:s'),
              ]);
              $days = $firstDate->format('d');
              $dates = [
                '01' => 'one',
                '02' => 'two',
                '03' => 'three',
                '04' => 'four',
                '05' => 'five',
                '06' => 'six',
                '07' => 'seven',
                '08' => 'eight',
                '09' => 'nine',
                '10' => 'ten',
                '11' => 'eleven',
                '12' => 'twelve',
                '13' => 'thirteen',
                '14' => 'fourteen',
                '15' => 'fifteen',
                '16' => 'sixteen',
                '17' => 'seventeen',
                '18' => 'eighteen',
                '19' => 'ninghteen',
                '20' => 'twenty',
                '21' => 'twentyone',
                '22' => 'twentytwo',
                '23' => 'twentythree',
                '24' => 'twentyfour',
                '25' => 'twentyfive',
                '26' => 'twentysix',
                '27' => 'twentyseven',
                '28' => 'twentyeight',
                '29' => 'twentynine',
                '30' => 'thirty',
                '31' => 'thirtyone',
              ];

              $column = $dates[$days];

              $getAttendances = DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $firstDate->format('F'))
                ->where('year', $firstDate->format('Y'))
                ->first();

              if ($getAttendances) {
                DB::table('attendances')
                  ->where('employee_name', auth()->user()->teammember_id)
                  ->where('month', $firstDate->format('F'))
                  ->where('year', $firstDate->format('Y'))
                  ->update([
                    $column => "R",
                    'sundaycount' => $getAttendances->sundaycount - 1,
                  ]);
              }
            }
          } else {
            // Add non-Sundays to the $expectedDates array
            $expectedDatesaftersuccess[] = $firstDate->format('Y-m-d');
          }
          $firstDate->modify("+1 day");
        }
      }

      // reinsalization  $rejectedtimesheetdata
      $rejectedtimesheetdata = DB::table('timesheetusers')
        ->where('status', 2)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('date', [$request->from, $request->to])
        ->orderBy('date', 'ASC')
        ->get();

      foreach ($rejectedtimesheetdata as $rejectedtimesheet) {
        $rejectedtimesheetformate = null;
        if ($rejectedtimesheet) {
          $rejectedtimesheetformate = Carbon::createFromFormat('Y-m-d', $rejectedtimesheet->date);
        }

        if ($rejectedtimesheetformate) {

          // Update total hour
          $timesheetdelete = DB::table('timesheetusers')->where('timesheetid', $rejectedtimesheet->timesheetid)->first();

          if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {

            $gettotalteamhour = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $timesheetdelete->assignmentgenerate_id
              )
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              ->first();

            if ($gettotalteamhour) {
              // dd($gettotalteamhour);
              $gettotalteamhour = $gettotalteamhour->teamhour;
              $finalresult =  $gettotalteamhour - $timesheetdelete->hour;
              $totalteamhourupdate = DB::table('assignmentmappings')
                ->leftJoin(
                  'assignmentteammappings',
                  'assignmentteammappings.assignmentmapping_id',
                  'assignmentmappings.id',
                )
                ->where(
                  'assignmentmappings.assignmentgenerate_id',
                  $timesheetdelete->assignmentgenerate_id
                )
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                // ->get();
                ->update(['teamhour' =>  $finalresult]);
            }
          }

          if (auth()->user()->role_id == 13) {
            $assignmentdata = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
              ->first();


            if ($assignmentdata) {
              $finalresultleadpatner =  $assignmentdata->leadpartnerhour - $timesheetdelete->hour;
              $finalresultotherpatner =  $assignmentdata->otherpartnerhour - $timesheetdelete->hour;

              if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
                $update2 = DB::table('assignmentmappings')
                  ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
                  ->where('leadpartner', auth()->user()->teammember_id)
                  ->update(['leadpartnerhour' => $finalresultleadpatner]);
              }
              if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
                $update2 = DB::table('assignmentmappings')
                  ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
                  ->where('otherpartner', auth()->user()->teammember_id)
                  ->update(['otherpartnerhour' => $finalresultotherpatner]);
              }
            }
          }
          // Update total hour end 

          DB::table('timesheets')->where('id', $rejectedtimesheet->timesheetid)->update([
            'status'   => 3,
          ]);

          if ($request->leavetype == 9) {
            DB::table('timesheetusers')->where('id', $rejectedtimesheet->id)->update([
              'status'   => 3,
              'client_id'     =>    134,
              'workitem'     =>     $request->reasonleave,
              'assignmentgenerate_id' => null,
              'location'     =>     'NA',
              'hour'     =>     0,
              'totalhour' =>      0,
              'assignment_id'     =>     215,
              'partner'     =>     887,
            ]);
          } else {
            DB::table('timesheetusers')->where('id', $rejectedtimesheet->id)->update([
              'status'   => 3,
              'client_id'     =>    134,
              'assignmentgenerate_id' => null,
              'workitem'     =>     $request->reasonleave,
              'location'     =>     'NA',
              'hour'     =>     0,
              'totalhour' =>      0,
              'assignment_id'     =>     214,
              'partner'     =>     887,
            ]);
          }

          // Attendance code start hare 
          $hdatess = Carbon::parse($rejectedtimesheet->date)->format('Y-m-d');
          $day = Carbon::parse($hdatess)->format('d');
          $month = Carbon::parse($hdatess)->format('F');
          $yeardata = Carbon::parse($hdatess)->format('Y');


          $dates = [
            '01' => 'one',
            '02' => 'two',
            '03' => 'three',
            '04' => 'four',
            '05' => 'five',
            '06' => 'six',
            '07' => 'seven',
            '08' => 'eight',
            '09' => 'nine',
            '10' => 'ten',
            '11' => 'eleven',
            '12' => 'twelve',
            '13' => 'thirteen',
            '14' => 'fourteen',
            '15' => 'fifteen',
            '16' => 'sixteen',
            '17' => 'seventeen',
            '18' => 'eighteen',
            '19' => 'ninghteen',
            '20' => 'twenty',
            '21' => 'twentyone',
            '22' => 'twentytwo',
            '23' => 'twentythree',
            '24' => 'twentyfour',
            '25' => 'twentyfive',
            '26' => 'twentysix',
            '27' => 'twentyseven',
            '28' => 'twentyeight',
            '29' => 'twentynine',
            '30' => 'thirty',
            '31' => 'thirtyone',
          ];

          $column = $dates[$day];
          // check attendenace record exist or not 
          $attendances = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $month)
            ->where('year', $yeardata)
            ->first();

          if ($attendances && property_exists($attendances, $column)) {
            $checkwording = DB::table('attendances')
              ->where('id', $attendances->id)
              ->value($column);

            if ($checkwording == 'R') {

              if ($request->leavetype == 9) {
                $updatewording = 'CL';
              } else {
                $checkholidays = DB::table('holidays')
                  ->where('startdate', '=', $hdatess)
                  ->orWhere('enddate', '=', $hdatess)
                  ->first();

                $updatewording = $checkholidays ? 'H' : 'EL';
              }

              // Mapping for total count columns
              $totalCountMapping = [
                'P' => 'no_of_days_present',
                'CL' => 'casual_leave',
                'EL' => 'exam_leave',
                'T' => 'travel',
                'OH' => 'offholidays',
                'W' => 'sundaycount',
                'H' => 'holidays'
              ];

              // Update the total count and attendance record if applicable
              if (isset($totalCountMapping[$updatewording])) {
                $totalcountColumn = $totalCountMapping[$updatewording];
                $totalcountupdate = $attendances->$totalcountColumn + 1;
                DB::table('attendances')
                  ->where('id', $attendances->id)
                  ->update([
                    $column => $updatewording,
                    $totalcountColumn => $totalcountupdate,
                  ]);
              }
            }
          }
          // Attendance code end hare 
        } else {
          $output = ['msg' => 'You cannot apply leave before Submitted timesheet date'];
          return back()->with('statuss', $output);
        }
      }

      $id = DB::table('applyleaves')->insertGetId([
        'leavetype'         =>     $request->leavetype,
        'type'         =>     $request->type,
        'examtype'         =>     $request->examtype,
        'otherexam'         =>     $request->otherexam,
        'from'         =>     $request->from,
        'to'         =>     $request->to,
        'reasonleave'         =>     $request->reasonleave,
        'approver'         =>     $request->approver,
        'status'         =>    1,
        'createdby'         =>     auth()->user()->teammember_id,
        'created_at'          =>    date('Y-m-d H:i:s'),
        'updated_at'              =>    date('Y-m-d H:i:s'),
      ]);

      $output = array('msg' => 'Create Successfully');
      // dd($output, 23);
      return back()->with('success', $output);
    }

    if ($latesttimesheetsubmittedformate == null) {
      // Check if the from date is in the past
      if ($softwarermaked->greaterThan($from)) {
        $output = ['msg' => 'You cannot apply leave before 11-09-2023'];
        return back()->with('statuss', $output);
      }
    }


    if (auth()->user()->role_id == 15) {
      // Check if the from or to date falls on Saturday or Sunday
      $restrictedDays = [Carbon::SATURDAY, Carbon::SUNDAY];

      if (in_array($from->dayOfWeek, $restrictedDays)) {
        return back()->with('statuss', ['msg' => 'You cannot select the from date on a weekend (Saturday or Sunday)']);
      }

      if (in_array($to->dayOfWeek, $restrictedDays)) {
        return back()->with('statuss', ['msg' => 'You cannot select the to date on a weekend (Saturday or Sunday)']);
      }
    } else {
      // Check if either the start or end date falls on a Sunday
      if ($from->dayOfWeek === Carbon::SUNDAY) {
        return back()->with('statuss', ['msg' => 'You cannot select from date on Sunday']);
      }

      if ($to->dayOfWeek === Carbon::SUNDAY) {
        return back()->with('statuss', ['msg' => 'You cannot select to date on Sunday']);
      }
    }

    // Check if the start date is a holiday
    $isHolidayFrom = DB::table('holidays')
      ->whereDate('startdate', '=', $from)
      ->orWhereDate('enddate', '=', $from)
      ->exists();

    if ($isHolidayFrom) {
      return back()->with('statuss', ['msg' => 'You cannot select the from date on a holiday']);
    }

    // Check if the end date is a holiday
    $isHolidayTo = DB::table('holidays')
      ->whereDate('startdate', '=', $to)
      ->orWhereDate('enddate', '=', $to)
      ->exists();

    if ($isHolidayTo) {
      return back()->with('statuss', ['msg' => 'You cannot select the to date on a holiday']);
    }


    // If start and end dates are the same, perform additional checks


    // timesheetcheck 
    $timesheetcheck = DB::table('timesheets')
      ->where('created_by', auth()->user()->teammember_id)
      ->select('date')
      ->get();

    if (count($timesheetcheck) != 0) {
      foreach ($timesheetcheck as $timesheetchecks) {
        $leaveDates = CarbonPeriod::create(
          date('Y-m-d', strtotime($request->from)),
          date('Y-m-d', strtotime($request->to))
        );

        foreach ($leaveDates as $leaveDate) {
          if ($leaveDate->format('Y-m-d') == $timesheetchecks->date) {
            $output = array('msg' => 'You Have already filled timesheet for the Day (' . date('d-m-Y', strtotime($leaveDate)) . ')');
            return back()->with('statuss', $output);
          }
        }
      }
    }

    //duplicate leave check
    $leaves = DB::table('applyleaves')
      ->where('applyleaves.createdby', auth()->user()->teammember_id)
      ->where('status', '!=', 2)
      ->select('applyleaves.from', 'applyleaves.to')
      ->get();

    $leaveDates = [];
    foreach ($leaves as $leave) {
      $days = CarbonPeriod::create(
        date('Y-m-d', strtotime($leave->from)),
        date('Y-m-d', strtotime($leave->to))
      );

      foreach ($days as $day) {
        $leaveDates[] = $day->format('Y-m-d');
      }
    }

    $currentDay = date('Y-m-d', strtotime($request->from));
    $lastDay = date('Y-m-d', strtotime($request->to));

    if (count($leaves) != 0) {
      foreach ($leaveDates as $leaveDate) {
        if ($leaveDate >= $currentDay && $leaveDate <= $lastDay) {
          $output = array('msg' => 'You Have Leave for the Day (' . date('d-m-Y', strtotime($leaveDate)) . ')');
          return back()->with('statuss', $output);
        }
      }
    }

    $currentdate = date('Y-m-d');
    $currentYear = date('Y');
    $financialYearStart = $currentYear . '-04-01';
    $financialYearEnd = ($currentYear + 1) . '-03-31';

    $teammember = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

    try {

      $currentDate = Carbon::now();
      $day = $currentDate->day;
      $currentYear = $currentDate->year;



      //birthday-festival leave 
      if ($request->leavetype == 8) {
        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $diff_in_days = $to->diffInDays($from) + 1;


        $financialYearStart = $currentYear . '-04-01';
        $financialYearEnd = ($currentYear + 1) . '-03-31';

        $count = DB::table('applyleaves')
          ->where('status', '!=', '2')
          ->where('leavetype', $request->leavetype)
          ->where('createdby', auth()->user()->teammember_id)
          ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
          ->first();


        $teammember = DB::table('teammembers')
          ->where('id', auth()->user()->teammember_id)
          ->first();

        $requestedDate = date('F d', strtotime($request->to));
        $birthdayDate = date('F d', strtotime($teammember->dateofbirth));

        if ($request->type == 0) {
          if ($request->to != $request->from) {

            $output = ['msg' => 'You can take only one day birthday leave'];
            return back()->with('success', $output);
          }
          if ($requestedDate != $birthdayDate) {

            $output = ['msg' => 'Your request for the birthday date is wrong'];
            return back()->with('success', $output);
          }
          if ($diff_in_days < 2 && $count != null) {
            $output = ['msg' => 'You have already taken a birthday leave'];
            return back()->with('success', $output);
          }
        } elseif ($request->type == 1) {
          if ($diff_in_days < 2) {
            if ($count != null) {
              $output = ['msg' => 'You have already taken a festival leave'];
              return back()->with('success', $output);
            }
          } else {
            $output = ['msg' => 'You can take only one day festival leave'];
            return back()->with('success', $output);
          }
        }


        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];

        $requestedDay = date('d', strtotime($request->to));
        $requestedDay = date('d', strtotime($request->to));
        $requestedMonth = $from->format('F');
        if (isset($columnMappings[$requestedDay])) {
          $columnName = $columnMappings[$requestedDay];
          if (in_array($requestedDay, ['26', '27', '28', '29', '30', '31'])) {
            $requestedMonth = $from->copy()->addMonth()->format('F');
          }
          DB::table('attendances')
            ->updateOrInsert(
              [
                'employee_name' => auth()->user()->teammember_id,
                'month' => $requestedMonth
              ],
              [
                $columnName => 'BL/C',
                'birthday_religious' => DB::raw('COALESCE(birthday_religious, 0) + 1'),
                'created_at' => now(),
                'updated_at' => now()
              ],
              [
                'created_at' => now()
              ]
            );
        }
      } elseif ($request->leavetype == 9) {

        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $requestdays = $to->diffInDays($from) + 1;
        $period = CarbonPeriod::create($request->from, $request->to);
        $datess = [];

        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');

          $id = DB::table('timesheets')->insertGetId(
            [
              'created_by' => auth()->user()->teammember_id,
              'month'     =>     date('F', strtotime($date->format('Y-m-d'))),
              'date'     =>    $date->format('Y-m-d'),
              'created_at'          =>     date('Y-m-d H:i:s'),
            ]
          );

          $a = DB::table('timesheetusers')->insert([
            'date'     =>    $date->format('Y-m-d'),
            'client_id'     =>    134,
            'workitem'     =>     $request->reasonleave,
            'location'     =>     '',
            //   'billable_status'     =>     $request->billable_status[$i],
            'timesheetid'     =>     $id,
            'date'     =>    $date->format('Y-m-d'),
            'hour'     =>     0,
            'totalhour' =>      0,
            'assignment_id'     =>     215,
            'partner'     =>     887,
            // adding approver in patner section 
            // 'partner'     =>     $request->approver,
            'createdby' => auth()->user()->teammember_id,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>    date('Y-m-d H:i:s'),
          ]);
        }

        $getholidays = DB::table('holidays')->where('startdate', '>=', $request->from)
          ->where('enddate', '<=', $request->to)->select('startdate')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }

        $cl_leave = array_diff($datess, $hdatess);
        $cl_leave_total = count($cl_leave);
        $lstatus = "CL/C";

        if ($teammember->joining_date < $financialYearStart) {
          $startDate = \Carbon\Carbon::createFromFormat('Y-m-d', $financialYearStart);
        } else {
          $startDate = \Carbon\Carbon::createFromFormat('Y-m-d', $teammember->joining_date);
        }

        $diff_in_months = $startDate->diffInMonths($currentdate) + 1;
        $totalcountCasual = 1.5 * $diff_in_months;
        if (\Carbon\Carbon::parse($teammember->joining_date)->diffInDays($currentdate) <= 90) {
          $totalcountCasual = 0;
        }

        $teamdate = \Carbon\Carbon::createFromFormat('Y-m-d', $teammember->joining_date);
        $teammonthcount = $teamdate->diffInMonths($currentdate) + 1;

        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];

        foreach ($cl_leave as $requestedDate) {
          $day = date('d', strtotime($requestedDate));
          $requestedMonth = date('F', strtotime($requestedDate));

          if ($day >= 26 && $day <= 31) {
            $requestedDateTime = new DateTime($requestedDate);
            $requestedDateTime->modify('first day of next month');
            $requestedMonth = $requestedDateTime->format('F');
          }

          $appliedCasual = DB::table('applyleaves')
            ->where('status', '!=', '2')
            ->where('leavetype', $request->leavetype)
            ->where('createdby', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();

          $countCasual = 0;
          $casualDates = [];
          $holidaydates = [];
          foreach ($appliedCasual as $CasualLeave) {
            $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
            $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
            $period = CarbonPeriod::create($fromDate, $toDate);

            foreach ($period as $date) {
              $casualDates[] = $date->format('Y-m-d');
            }

            $getholidays = DB::table('holidays')->get();
            foreach ($getholidays as $date) {
              $holidaydates[] = date('Y-m-d', strtotime($date->startdate));
            }

            $casualDates = array_unique($casualDates);
          }

          $attendanceRecord = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();

          $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
          $clInAttendance = 0;
          foreach ($attendanceRecord as $item) {
            foreach ($columns as $column) {
              if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
                $clInAttendance++;
              }
            }
          }

          if ($clInAttendance >= $totalcountCasual || $totalcountCasual - $clInAttendance == 0.5) {
            $lstatus = 'LWP';
          }

          $attendanceUpdateData = [];
          $attendances = DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)->first();
          if ($attendances == null) {
            if ($lstatus == 'CL/C') {
              $attendanceData = [
                'employee_name' => auth()->user()->teammember_id,
                'month' => $requestedMonth,
                'casual_leave' => 1,
                'created_at' => Carbon::now(),
              ];
            } else {
              $attendanceData = [
                'employee_name' => auth()->user()->teammember_id,
                'month' => $requestedMonth,
                'lwp' => 1,
                'created_at' => Carbon::now(),
              ];
            }
            // DB::table('attendances')->insert($attendanceData);
          } else {
            if ($lstatus == 'CL/C') {
              // DB::table('attendances')
              //   ->where('employee_name', auth()->user()->teammember_id)
              //   ->where('month', $requestedMonth)
              //   ->update(['casual_leave' => DB::raw('COALESCE(casual_leave, 0) + 1')]);
            } else {
              // DB::table('attendances')
              //   ->where('employee_name', auth()->user()->teammember_id)
              //   ->where('month', $requestedMonth)
              //   ->update(['lwp' => DB::raw('COALESCE(lwp, 0) + 1')]);
            }
          }

          $column = $columnMappings[$day] ?? null;
          if ($column !== null) {
            $attendanceUpdateData[$column] = $lstatus;
          }

          //Update the attendance data for the current date
          // DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
          //   ->where('month', $requestedMonth)->update($attendanceUpdateData);
        }
      }
      // Casual leave end

      elseif ($request->leavetype == 10) {

        $sick = DB::table('leavetypes')->where('name', 'Sick Leave')->where('year', $currentYear)->first();

        //      $availableleave = $sick->noofdays - $takeleavecount ;
        //  dd($availableleave);
        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $requestdays = $to->diffInDays($from) + 1;





        $period = CarbonPeriod::create($request->from, $request->to);
        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }
        // dd($datess);
        // Convert the period to an array of dates
        // $dates = $period->toArray();

        $getholidays = DB::table('holidays')->where('startdate', '>=', $request->from)
          ->where('enddate', '<=', $request->to)->select('startdate')->get();

        if (count($getholidays) != 0) {
          foreach ($getholidays as $date) {
            $hdatess[] = date('Y-m-d', strtotime($date->startdate));
          }
        } else {
          $hdatess[] = 0;
        }
        //dd($hdatess);

        $sl_leave = array_diff($datess, $hdatess);
        $sl_leave_total = count(array_diff($datess, $hdatess));

        $lstatus = "SL/C";


        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];
        foreach ($sl_leave as $requestedDate) {


          $day = date('d', strtotime($requestedDate));
          $requestedMonth = date('F', strtotime($requestedDate));

          if ($day >= 26 && $day <= 31) {
            $requestedDateTime = new DateTime($requestedDate);
            $requestedDateTime->modify('first day of next month');
            $requestedMonth = $requestedDateTime->format('F');
          }

          $appliedSick = DB::table('applyleaves')
            ->where('status', '!=', '2')
            ->where('leavetype', $request->leavetype)
            ->where('createdby', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();

          $countSick = 0;
          $sickDates = [];
          $holidaydates = [];
          foreach ($appliedSick as $sickLeave) {

            $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
            $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
            $period = CarbonPeriod::create($fromDate, $toDate);


            foreach ($period as $date) {
              $sickDates[] = $date->format('Y-m-d');
            }

            $getholidays = DB::table('holidays')->get();


            foreach ($getholidays as $date) {
              $holidaydates[] = date('Y-m-d', strtotime($date->startdate));
            }
            $sickDates = array_unique($sickDates);
          }


          $attendanceRecord = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();
          $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
          $slInAttendance = 0;
          foreach ($attendanceRecord as $item) {
            foreach ($columns as $column) {
              if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
                $slInAttendance++;
              }
            }
          }

          if ($slInAttendance >= $sick->noofdays) {

            $lstatus = 'LWP';
          }

          $attendanceUpdateData = [];
          $attendances = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)
            ->first();

          $attendanceData = [
            'employee_name' => auth()->user()->teammember_id,
            'month' => $requestedMonth,
            'created_at' => Carbon::now()
          ];

          if ($lstatus == 'SL/C') {
            $attendanceData['sick_leave'] = 1;
          } else {
            $attendanceData['lwp'] = 1;
          }

          if ($attendances == null) {
            DB::table('attendances')->insert($attendanceData);
          } else {
            if ($lstatus == 'SL/C') {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['sick_leave' => DB::raw('COALESCE(sick_leave, 0) + 1')]);
            } else {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['lwp' => DB::raw('COALESCE(lwp, 0) + 1')]);
            }
          }


          $column = $columnMappings[$day] ?? null;
          if ($column !== null) {
            $attendanceUpdateData[$column] = $lstatus;
          }

          //Update the attendance data for the current date
          DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)->update($attendanceUpdateData);
        }
      } elseif ($request->leavetype == 11) {
        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $requestdays = $to->diffInDays($from) + 1;
        $period = CarbonPeriod::create($request->from, $request->to);

        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->where('startdate', '>=', $request->from)
          ->where('enddate', '<=', $request->to)->select('startdate')->get();

        if (count($getholidays) != 0) {
          foreach ($getholidays as $date) {
            $hdatess[] = date('Y-m-d', strtotime($date->startdate));
          }
        } else {
          $hdatess[] = 0;
        }

        $exam_leave = array_diff($datess, $hdatess);
        $exam_leave_total = count(array_diff($datess, $hdatess));
        $lstatus = "EL";
        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];

        foreach ($exam_leave as $exam_leave) {
          $day = date('d', strtotime($exam_leave));
          $requestedMonth = date('F', strtotime($exam_leave));
          if ($day >= 26 && $day <= 31) {
            $requestedDateTime = new DateTime($exam_leave);
            $requestedDateTime->modify('first day of next month');
            $requestedMonth = $requestedDateTime->format('F');
          }

          $attendanceUpdateData = [];
          $attendances = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)
            ->first();

          $attendanceData = [
            'employee_name' => auth()->user()->teammember_id,
            'month' => $requestedMonth,
            'created_at' => Carbon::now()
          ];

          if ($lstatus == 'EL') {
            $attendanceData['exam_leave'] = 1;
          } else {
            $attendanceData['lwp'] = 1;
          }

          if ($attendances == null) {
            // DB::table('attendances')->insert($attendanceData);
          } else {
            if ($lstatus == 'EL') {
              // DB::table('attendances')
              //   ->where('employee_name', auth()->user()->teammember_id)
              //   ->where('month', $requestedMonth)
              //   ->update(['exam_leave' => DB::raw('COALESCE(sick_leave, 0) + 1')]);
            } else {
              // DB::table('attendances')
              //   ->where('employee_name', auth()->user()->teammember_id)
              //   ->where('month', $requestedMonth)
              //   ->update(['lwp' => DB::raw('COALESCE(lwp, 0) + 1')]);
            }
          }

          $column = $columnMappings[$day] ?? null;
          if ($column !== null) {
            $attendanceUpdateData[$column] = $lstatus;
          }
          //Update the attendance data for the current date
          // DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
          //   ->where('month', $requestedMonth)->update($attendanceUpdateData);
        }
      }
      // exam leave end

      if ($request->hasFile('report')) {
        $file = $request->file('report');
        $destinationPath = 'backEnd/image/report';
        $name = $file->getClientOriginalName();
        $s = $file->move($destinationPath, $name);
        $data['salaryincomefile'] = $name;
        $data['report'] = $name;
      }

      $id = DB::table('applyleaves')->insertGetId([
        'leavetype'         =>     $request->leavetype,
        'approver'         =>     $request->approver,
        'from'         =>     $request->from,
        'type'         =>     $request->type,
        'examtype'         =>     $request->examtype,
        'otherexam'         =>     $request->otherexam,
        'to'         =>     $request->to,
        'report'         => $data['report'] ?? '',
        'status'         =>    0,
        'reasonleave'         =>     $request->reasonleave,
        'createdby'         =>     auth()->user()->teammember_id,
        'created_at'          =>    date('Y-m-d H:i:s'),
        'updated_at'              =>    date('Y-m-d H:i:s'),
      ]);

      if ($request->teammember_id != null) {
        foreach ($request->teammember_id as $teammember) {
          DB::table('leaveteams')->insert([
            'leave_id'         =>     $id,
            'teammember_id'         =>     $teammember,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>     date('Y-m-d H:i:s'),
          ]);
        }
      }

      $teammemberemail = Teammember::where('id', $request->approver)->first();
      $teammembername = Teammember::where('id', auth()->user()->teammember_id)->first();
      $data = array(
        'id' => $id,
        'leavetype'         =>     $request->leavetype,
        'from'         =>     $request->from,
        'to'         =>     $request->to,
        'reasonleave'         =>     $request->reasonleave,
        'teammembername'         =>    $teammembername->team_member,
        'teamstaffcode'         =>    $teammembername->staffcode,
        'teammemberemail' => $teammemberemail->emailid ?? '',
        'id' => $id ?? ''

      );

      Mail::send('emails.applyleaveform', $data, function ($msg) use ($data) {
        $msg->to($data['teammemberemail']);
        $msg->cc('itsupport_delhi@vsa.co.in');
        $msg->subject('VSA Apply Leave Request');
      });

      $output = array('msg' => 'Create Successfully');
      return back()->with('success', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }






vsalocal,vsademo, done 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
after add below code hit any controller 


  $monthsWithDays = [
      'August' => 31,
      'September' => 30,
      'October' => 31,
      'December' => 31,
    ];

    $updatedRecordsCount = 0;

    foreach ($monthsWithDays as $month => $days) {
      $updatedRecordsCount += DB::table('attendances')
        ->where('month', $month)
        ->whereNull('total_no_of_days')
        ->update(['total_no_of_days' => $days]);
    }

    dd($updatedRecordsCount);



vsademo done, red line on apply leave page 
22222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\create.blade.php
find    @include('backEnd.applyleave.form')

                             {{-- <div style="text-align: center;"> <span style="color:red;">Please apply leave from 11/09/2023,
                                     Monday Onwards</span></div> --}}
                             {{-- <hr>
                             <br> --}}


06-12-24
not upload this function anywhere ye discussion me hai basically isme rejected ke dauran total hour update hota hai 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function  timesheetreject($id)
  {
    try {
      $timesheetdata = DB::table('timesheetusers')->where('id', $id)->first();
      DB::table('timesheets')->where('id', $timesheetdata->timesheetid)->update([
        'status'   => 2,
      ]);
      DB::table('timesheetusers')->where('id', $id)->update([
        'status'   => 2,
        'rejectedby'   =>   auth()->user()->teammember_id,

      ]);
      //total hour update 
      if (!is_numeric($timesheetdata->assignmentgenerate_id)) {
        $assignment = Assignmentmapping::where('assignmentgenerate_id', $timesheetdata->assignmentgenerate_id)
          ->select('assignment_id')
          ->first();

        $teammemberrole =  DB::table('teammembers')
          ->where('id', $timesheetdata->createdby)
          ->select('team_member', 'role_id')
          ->first();

        $assignment_id = $assignment->assignment_id;
        $assignmentgenerateId = $timesheetdata->assignmentgenerate_id;

        // update total hour 
        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
          if ($teammemberrole->role_id == 14 || $teammemberrole->role_id == 15) {
            $gettotalteamhour = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $timesheetdata->assignmentgenerate_id
              )
              ->where('assignmentteammappings.teammember_id', $timesheetdata->createdby)
              ->select('assignmentteammappings.*')
              ->first();


            if ($gettotalteamhour) {
              if ($gettotalteamhour->teamhour == null) {
                $gettotalteamhour->teamhour = 0;
              }

              $finalresult =  $gettotalteamhour->teamhour - $timesheetdata->hour;
              $totalteamhourupdate = DB::table('assignmentteammappings')
                ->where('id', $gettotalteamhour->id)
                ->update(['teamhour' =>  $finalresult]);
            }
          }

          if ($teammemberrole->role_id == 13) {
            $assignmentdata = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $assignmentgenerateId)
              ->first();

            if ($assignmentdata->leadpartner == $timesheetdata->createdby) {
              if ($assignmentdata->leadpartnerhour == null) {
                $assignmentdata->leadpartnerhour = 0;
              }

              $finalresultleadpatner =  $assignmentdata->leadpartnerhour - $timesheetdata->hour;
              $totalteamhourupdate = DB::table('assignmentmappings')
                ->where('id', $assignmentdata->id)
                ->update(['leadpartnerhour' => $finalresultleadpatner]);
            }

            if ($assignmentdata->otherpartner == $timesheetdata->createdby) {
              if ($assignmentdata->otherpartnerhour == null) {
                $assignmentdata->otherpartnerhour = 0;
              }
              $finalresultotherpatner =  $assignmentdata->otherpartnerhour - $timesheetdata->hour;
              $totalteamhourupdate = DB::table('assignmentmappings')
                ->where('id', $assignmentdata->id)
                ->update(['otherpartnerhour' => $finalresultotherpatner]);
            }
          }
        }
      }
      //total hour update end hare 
      // timesheet rejected mail
      $data = DB::table('teammembers')
        ->leftjoin('timesheetusers', 'timesheetusers.createdby', 'teammembers.id')
        ->where('timesheetusers.id', $id)
        ->first();

      $emailData = [
        'emailid' => $data->emailid,
        'teammember_name' => $data->team_member,
      ];

      Mail::send('emails.timesheetrejected', $emailData, function ($msg) use ($emailData) {
        $msg->to([$emailData['emailid']]);
        $msg->subject('Timesheet rejected');
      });
      // timesheet rejected mail end hare

      // Attendance code start hare 
      $hdatess = Carbon::parse($timesheetdata->date)->format('Y-m-d');
      $day = Carbon::parse($hdatess)->format('d');
      $month = Carbon::parse($hdatess)->format('F');
      $yeardata = Carbon::parse($hdatess)->format('Y');

      $dates = [
        '01' => 'one',
        '02' => 'two',
        '03' => 'three',
        '04' => 'four',
        '05' => 'five',
        '06' => 'six',
        '07' => 'seven',
        '08' => 'eight',
        '09' => 'nine',
        '10' => 'ten',
        '11' => 'eleven',
        '12' => 'twelve',
        '13' => 'thirteen',
        '14' => 'fourteen',
        '15' => 'fifteen',
        '16' => 'sixteen',
        '17' => 'seventeen',
        '18' => 'eighteen',
        '19' => 'ninghteen',
        '20' => 'twenty',
        '21' => 'twentyone',
        '22' => 'twentytwo',
        '23' => 'twentythree',
        '24' => 'twentyfour',
        '25' => 'twentyfive',
        '26' => 'twentysix',
        '27' => 'twentyseven',
        '28' => 'twentyeight',
        '29' => 'twentynine',
        '30' => 'thirty',
        '31' => 'thirtyone',
      ];
      $column = $dates[$day];

      // check attendenace record exist or not 
      $attendances = DB::table('attendances')
        ->where('employee_name', $timesheetdata->createdby)
        ->where('month', $month)
        ->first();

      if ($attendances != null) {
        if (property_exists($attendances, $column)) {
          $checkwording = DB::table('attendances')
            ->where('id', $attendances->id)
            ->value($column);

          $updatewording = 'R';

          // Get which column want to update 
          $totalCountmapping = [
            'P' => 'no_of_days_present',
            'CL' => 'casual_leave',
            'EL' => 'exam_leave',
            'T' => 'travel',
            'OH' => 'offholidays',
            'W' => 'sundaycount',
            'H' => 'holidays'
          ];

          if (isset($totalCountmapping[$checkwording])) {
            // Get Total count column name 
            $totalcountColumn = $totalCountmapping[$checkwording];
            // Get value and - 1 valve
            $totalcountupdate = $attendances->$totalcountColumn - 1;
            // Update the attendance record
            DB::table('attendances')
              ->where('id', $attendances->id)
              ->update([
                $column => $updatewording,
                $totalcountColumn => $totalcountupdate,
              ]);
          }
        }
      }
      // Attendance code end hare 
      $output = array('msg' => 'Rejected Successfully');
      return back()->with('statuss', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }

abhi ise update n kare  basically isme admin jab save timesheet delete karta hai to total hour update 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


  public function destroy($id)
  {
    try {
      $timesheetdelete = DB::table('timesheetusers')->where('timesheetid', $id)->first();
      // total hour update for staff and manager
      if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
        // dd('check');

        $gettotalteamhour = DB::table('assignmentmappings')
          ->leftJoin(
            'assignmentteammappings',
            'assignmentteammappings.assignmentmapping_id',
            'assignmentmappings.id',
          )
          ->where(
            'assignmentmappings.assignmentgenerate_id',
            $timesheetdelete->assignmentgenerate_id
          )
          ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
          ->first();
        //  dd($gettotalteamhour->teamhour);
        if ($gettotalteamhour) {
          //akshay kumar
          $timesheetHour = $timesheetdelete->hour;
          if (strpos($timesheetHour, ':') !== false) {

            // If the value contains a colon, split it into hours and minutes
            list($hours, $minutes) = explode(':', $timesheetHour);
          } else {

            // If there's no colon, treat the entire value as hours, and set minutes to 0
            $hours = $timesheetHour;
            $minutes = 0;
          }

          // Convert the time to decimal hours

          $timesheetDecimalHour = $hours + ($minutes / 60);
          $roundedHour = floor($timesheetDecimalHour);
          $roundedHour = (int)$roundedHour;

          $gettotalteamhour = $gettotalteamhour->teamhour;

          $finalresult =  $gettotalteamhour - $roundedHour;

          //end akshay kumar

          $totalteamhourupdate = DB::table('assignmentmappings')
            ->leftJoin(
              'assignmentteammappings',
              'assignmentteammappings.assignmentmapping_id',
              'assignmentmappings.id',
            )
            ->where(
              'assignmentmappings.assignmentgenerate_id',
              $timesheetdelete->assignmentgenerate_id
            )
            ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            // ->get();
            ->update(['teamhour' =>  $finalresult]);
        }
      }

      //total hour update for partner
      if (auth()->user()->role_id == 13) {
        // dd('cech');
        $assignmentdata = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
          ->first();

        //akhsay code

        $leadPartnerHour = $assignmentdata->leadpartnerhour; // Numeric value

        $timesheetHour = $timesheetdelete->hour; // Time string in "HH:MM" format

        // Split the timesheet hour (e.g., "08:00") into hours and minutes
        if (strpos($timesheetHour, ':') !== false) {


          // If the value contains a colon, split it into hours and minutes
          list($hours, $minutes) = explode(':', $timesheetHour);

          // Convert the time to decimal hours
          $timesheetDecimalHour = $hours + ($minutes / 60);
          $roundedHour = floor($timesheetDecimalHour);
          $roundedHour = (int)$roundedHour;
          // Perform the subtractiond
          // dd($leadPartnerHour);
          $finalresultleadpatner = $leadPartnerHour - $roundedHour;
          // dd($finalresultleadpatner);
          $finalresultotherpatner =  $assignmentdata->otherpartnerhour - $roundedHour;
          // dd($finalresultotherpatner);

        } else {
          // dd('out');
          $finalresultleadpatner =  $assignmentdata->leadpartnerhour - $timesheetdelete->hour;
          $finalresultotherpatner =  $assignmentdata->otherpartnerhour - $timesheetdelete->hour;
        }




        ///end aksshay code
        if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {

          $update2 = DB::table('assignmentmappings')
            ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
            ->where('leadpartner', auth()->user()->teammember_id)
            ->update(['leadpartnerhour' => $finalresultleadpatner]);
        }
        if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {

          $update2 = DB::table('assignmentmappings')
            ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
            ->where('otherpartner', auth()->user()->teammember_id)
            ->update(['otherpartnerhour' => $finalresultotherpatner]);
        }
      }

      //total hour update for admin
      if (!is_numeric($timesheetdelete->assignmentgenerate_id)) {
        $assignment = Assignmentmapping::where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
          ->select('assignment_id')
          ->first();

        $teammemberrole =  DB::table('teammembers')
          ->where('id', $timesheetdelete->createdby)
          ->select('team_member', 'role_id')
          ->first();

        $assignment_id = $assignment->assignment_id;
        $assignmentgenerateId = $timesheetdelete->assignmentgenerate_id;

        // update total hour 
        if (auth()->user()->role_id == 11) {
          if ($teammemberrole->role_id == 14 || $teammemberrole->role_id == 15) {
            $gettotalteamhour = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $timesheetdelete->assignmentgenerate_id
              )
              ->where('assignmentteammappings.teammember_id', $timesheetdelete->createdby)
              ->select('assignmentteammappings.*')
              ->first();


            if ($gettotalteamhour) {
              if ($gettotalteamhour->teamhour == null) {
                $gettotalteamhour->teamhour = 0;
              }

              $finalresult =  $gettotalteamhour->teamhour - $timesheetdelete->hour;
              $totalteamhourupdate = DB::table('assignmentteammappings')
                ->where('id', $gettotalteamhour->id)
                ->update(['teamhour' =>  $finalresult]);
            }
          }

          if ($teammemberrole->role_id == 13) {
            $assignmentdata = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $assignmentgenerateId)
              ->first();

            if ($assignmentdata->leadpartner == $timesheetdelete->createdby) {
              if ($assignmentdata->leadpartnerhour == null) {
                $assignmentdata->leadpartnerhour = 0;
              }

              $finalresultleadpatner =  $assignmentdata->leadpartnerhour - $timesheetdelete->hour;
              $totalteamhourupdate = DB::table('assignmentmappings')
                ->where('id', $assignmentdata->id)
                ->update(['leadpartnerhour' => $finalresultleadpatner]);
            }

            if ($assignmentdata->otherpartner == $timesheetdelete->createdby) {
              if ($assignmentdata->otherpartnerhour == null) {
                $assignmentdata->otherpartnerhour = 0;
              }
              $finalresultotherpatner =  $assignmentdata->otherpartnerhour - $timesheetdelete->hour;
              $totalteamhourupdate = DB::table('assignmentmappings')
                ->where('id', $assignmentdata->id)
                ->update(['otherpartnerhour' => $finalresultotherpatner]);
            }
          }
        }
      }
      //total hour update end hare 

      DB::table('timesheets')->where('id', $id)->delete();
      DB::table('timesheetusers')->where('timesheetid', $id)->delete();
      $output = array('msg' => 'Deleted Successfully');
      return back()->with('statuss', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }



vsalive,vsalocal, vsademo done 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\teamattendance.blade.php

  <th>Joining Date</th> after role 
  
  
            <td> {{ $attendanceData->joining_date ? date('d-m-Y', strtotime($attendanceData->joining_date)) : 'NA' }}
                                    </td>
  

vsalive vsalocal vsademo done 
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\adminattendance.blade.php

    <th>Joining Date</th> after role th 
	
	                                    <td> {{ $attendanceData->joining_date ? date('d-m-Y', strtotime($attendanceData->joining_date)) : 'NA' }}
                                    </td>


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php

after store function 

  function applyleaverestrected($from, $to)
  {
    if (auth()->user()->role_id == 15) {
      // Check if the from or to date falls on Saturday or Sunday
      $restrictedDays = [Carbon::SATURDAY, Carbon::SUNDAY];

      if (in_array($from->dayOfWeek, $restrictedDays)) {
        return back()->with('statuss', ['msg' => 'You cannot select the from date on a weekend (Saturday or Sunday)']);
      }

      if (in_array($to->dayOfWeek, $restrictedDays)) {
        return back()->with('statuss', ['msg' => 'You cannot select the to date on a weekend (Saturday or Sunday)']);
      }
    } else {
      // Check if either the start or end date falls on a Sunday
      if ($from->dayOfWeek === Carbon::SUNDAY) {
        return back()->with('statuss', ['msg' => 'You cannot select from date on Sunday']);
      }

      if ($to->dayOfWeek === Carbon::SUNDAY) {
        return back()->with('statuss', ['msg' => 'You cannot select to date on Sunday']);
      }
    }

    // Check if the start date is a holiday
    $isHolidayFrom = DB::table('holidays')
      ->whereDate('startdate', '=', $from)
      ->orWhereDate('enddate', '=', $from)
      ->exists();

    if ($isHolidayFrom) {
      return back()->with('statuss', ['msg' => 'You cannot select the from date on a holiday']);
    }

    // Check if the end date is a holiday
    $isHolidayTo = DB::table('holidays')
      ->whereDate('startdate', '=', $to)
      ->orWhereDate('enddate', '=', $to)
      ->exists();

    if ($isHolidayTo) {
      return back()->with('statuss', ['msg' => 'You cannot select the to date on a holiday']);
    }
  }






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php
if ($latesttimesheetsubmittedformate && $latesttimesheetsubmittedformate->greaterThan($from)) {
after this condition    if ($softwarermaked->greaterThan($from)) {

use Illuminate\Http\RedirectResponse;

      $result = $this->applyleaverestrected($from, $to);

      if ($result instanceof RedirectResponse) {
        return $result;  // Redirects the user back with the error message.
      }



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php

  find  and remove it  $restrictedDays = [Carbon::SATURDAY, Carbon::SUNDAY];


    $result = $this->applyleaverestrected($from, $to);

    if ($result instanceof RedirectResponse) {
      return $result;  // Redirects the user back with the error message.
    }




joining date in attendance ```start vsalocal,demo
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AttendanceController.php

   public function adminattendancereport(Request $request)
    {
        $teamnid = $request->input('teammemberId');
        $startdate = Carbon::parse($request->input('startdate'));
        $enddate = Carbon::parse($request->input('enddate'));

        // Convert start and end dates to their respective month numbers like Month number (1-12)
        $startMonth = $startdate->format('n');
        $startYear = $startdate->format('Y');

        $endMonth = $enddate->format('n');
        $endYear = $enddate->format('Y');

        // Retrieve all team members
        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
            $teammembers = DB::table('teammembers')
                ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                ->whereIn('teammembers.role_id', [14, 15, 13, 11])
                ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
                ->orderBy('team_member', 'ASC')
                ->get();
        } else {
            $teammembers = DB::table('teammembers')
                ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                ->where('teammembers.id', auth()->user()->teammember_id)
                ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
                ->orderBy('team_member', 'ASC')
                ->get();
        }

        // Fetch single user data
        $singleusersearched = DB::table('teammembers')
            ->where('id', $teamnid)
            ->select('team_member', 'staffcode', 'id', 'leavingdate', 'joining_date')
            ->first();

        // Check leaving date validation
        if ($singleusersearched && $singleusersearched->leavingdate) {
            $leavingdate = Carbon::parse($singleusersearched->leavingdate);
            if ($startdate->gt($leavingdate)) {
                $output = ['msg' => 'User left on ' . $leavingdate->format('d-m-Y') . ', cannot select beyond this date.'];
                $request->flash();
                return redirect()->to('attendance')->with('statuss', $output);
            }
        }

        // Check joining date validation
        if ($singleusersearched && $singleusersearched->joining_date) {
            $joiningdate = Carbon::parse($singleusersearched->joining_date);
            if ($joiningdate->gt($enddate)) {
                $output = ['msg' => 'User joined on ' . $joiningdate->format('d-m-Y') . ', cannot select before this date.'];
                $request->flash();
                return redirect()->to('attendance')->with('statuss', $output);
            }
        }

        // Build attendance query filtered by month
        // $query = DB::table('attendances')
        //     ->leftJoin('teammembers', 'teammembers.id', 'attendances.employee_name')
        //     ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        //     ->leftJoin('roles', 'roles.id', 'teammembers.role_id')
        //     // ->whereNotNull('attendances.id')
        //     ->select(
        //         'attendances.*',
        //         'teammembers.team_member',
        //         'teammembers.staffcode',
        //         'teamrolehistory.newstaff_code',
        //         'teammembers.employment_status',
        //         'roles.rolename',
        //         'teammembers.joining_date'
        //     );

        // Build attendance query filtered by month
        $query = DB::table('attendances')
            ->join('teammembers', 'teammembers.id', '=', 'attendances.employee_name')
            ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
            ->leftJoin('roles', 'roles.id', '=', 'teammembers.role_id')
            ->select([
                'attendances.*',
                'teammembers.team_member',
                'teammembers.staffcode',
                'teammembers.employment_status',
                'roles.rolename',
                // Combine rejoining dates
                DB::raw('COALESCE(teamrolehistory.newstaff_code, teammembers.staffcode) AS final_staff_code'),
                // Combine rejoining dates
                DB::raw('COALESCE(teamrolehistory.rejoiningdate, rejoiningsamepost.rejoiningdate,teamrolehistory.promotion_date) AS final_rejoining_date'),
                // 'teamrolehistory.promotion_date',
                'teammembers.joining_date'
            ]);

        if ($teamnid) {
            $query->where('attendances.employee_name', $teamnid);
        }

        // // Filter where the attendance month falls between the start and end month
        // if ($startMonth && $endMonth) {
        //     $query->whereBetween(DB::raw('MONTH(STR_TO_DATE(CONCAT(attendances.month, " 1, 2000"), "%M %d, %Y"))'), [$startMonth, $endMonth]);
        // }

        // Filter attendance records by month and year
        if ($startMonth && $endMonth && $startYear && $endYear) {
            $query->whereBetween(DB::raw('MONTH(STR_TO_DATE(CONCAT(attendances.month, " 1, 2000"), "%M %d, %Y"))'), [$startMonth, $endMonth])
                ->whereBetween('attendances.year', [$startYear, $endYear]);
        }

        // ordering using month name like Dec,Nov,Oct etc
        $query->orderBy('attendances.year', 'desc')
            ->orderBy(DB::raw('MONTH(STR_TO_DATE(CONCAT(attendances.month, " 1, 2000"), "%M %d, %Y"))'), 'desc');

        $attendanceDatas = $query->get();
        $request->flash();
        // dd($attendanceDatas);

        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
            return view('backEnd.attendance.adminattendance', compact('attendanceDatas', 'teammembers'));
        } else {
            return view('backEnd.attendance.teamattendance', compact('attendanceDatas', 'teammembers'));
        }
    }


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\adminattendance.blade.php
find text  $attendanceData->staffcode




  <td class="text-center">{{ $attendanceData->final_staff_code }}</td>
  

find text  $attendanceData->joining_date

                                    <td> {{ $attendanceData->final_rejoining_date ? date('d-m-Y', strtotime($attendanceData->final_rejoining_date)) : date('d-m-Y', strtotime($attendanceData->joining_date)) }}
                                    </td>



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\teamattendance.blade.php
find text  $attendanceData->staffcode

        <td class="text-center">{{ $attendanceData->final_staff_code }}</td>
		
		
		
find text  $attendanceData->joining_date


                                               <td> {{ $attendanceData->final_rejoining_date ? date('d-m-Y', strtotime($attendanceData->final_rejoining_date)) : date('d-m-Y', strtotime($attendanceData->joining_date)) }}
                                    </td>




13-12-24
exit users ```start
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php

Route::get('/changetimesheetaccess/{teamid}/{status}', [TeammemberController::class, 'changetimesheetaccess']);


    public function changetimesheetaccess($teamid, $status)
    {
        try {
            if ($status == 0) {
                DB::table('teammembers')->where('id', $teamid)->update([
                    'timesheet_access'         =>  1,
                ]);
                $output = array('msg' => 'The user can fill the timesheet before 6 PM');
            } else {
                DB::table('teammembers')->where('id', $teamid)->update([
                    'timesheet_access'         =>  0,
                ]);
                $output = array('msg' => 'The user cannot fill the timesheet before 6 PM');
            }
            return back()->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }

22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\teammember\form.blade.php
 <label class="font-weight-600">Location <span class="tx-danger"></span></label>
 
<div class="col-3">
        <div class="form-group">
            <label class="font-weight-600">Timesheet Access</label>
            <div class="access" style="width: fit-content; margin-left: 30px;">
                @if ($teammember->timesheet_access == 0)
                    <a href="{{ url('/changetimesheetaccess/' . $teammember->id . '/' . $teammember->timesheet_access) }}"
                        onclick="return confirm('Are you sure you want to Active timesheet access?');">
                        <span class="btn"
                            style="background: #37A000;color: white; height: 23px; width: 52px; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px; margin-top: 8px;">Inactive</span>
                    </a>
                @else
                    <a href="{{ url('/changetimesheetaccess/' . $teammember->id . '/' . $teammember->timesheet_access) }}"
                        onclick="return confirm('Are you sure you want to Inactive timesheet access?');">
                        <span class="btn"
                            style="background: #dc3545;color: white; height: 23px; width: 52px; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px; margin-top: 8px;">Active</span>
                    </a>
                @endif
            </div>
        </div>
    </div>



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

        $timesheetAccess = DB::table('teammembers')
          ->where('id', auth()->user()->teammember_id)
          ->value('timesheet_access');

        $currentDate = Carbon::now()->format('d-m-Y');
        if ($timesheetAccess == 0  && $currentDate == $request->date && Carbon::now()->hour < 18) {
          $output = array('msg' => 'You can only fill today timesheet after 6:00 pm');
          return back()->with('success', $output);
        }



22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
timesheet_access column in teammembers tables after status colum
exit users ```end


notification ```start vsalocal,vsademo
222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\header.blade.php
if (auth()->user()->role_id == 11 || auth()->user()->role_id == 18) {


  $userId = auth()->user()->teammember_id;
                    // $clientnotification = DB::table('notifications')
                    //     ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
                    //         $join
                    //             ->on('notificationreadorunread.notifications_id', 'notifications.id')
                    //             ->where('notificationreadorunread.readedby', $userId);
                    //     })
                    //     ->select('notifications.*', 'notificationreadorunread.status as readstatus')
                    //     ->latest()
                    //     ->distinct()
                    //     ->paginate(5);

                    $clientnotification = DB::table('notifications')
                        ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
                            $join
                                ->on('notificationreadorunread.notifications_id', 'notifications.id')
                                ->where('notificationreadorunread.readedby', $userId);
                        })
                        ->select('notifications.*', 'notificationreadorunread.status as readstatus')
                        ->whereIn('notifications.id', function ($subquery) {
                            // Subquery to get the latest ID for each duplicate_notifications value
                            $subquery->from('notifications')->selectRaw('MAX(id) as id')->groupBy('duplicate_notifications');
                        })
                        ->latest('notifications.created_at')
                        ->paginate(5);
						
						









} elseif (auth()->user()->role_id == 13) {
						
$userId = auth()->user()->teammember_id;

                    // $clientnotification = DB::table('notifications')
                    //     ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
                    //     ->leftjoin('notificationtargets', 'notificationtargets.notification_id', 'notifications.id')
                    //     ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
                    //         $join
                    //             ->on('notificationreadorunread.notifications_id', 'notifications.id')
                    //             ->where('notificationreadorunread.readedby', $userId);
                    //     })
                    //     ->Where(function ($query) {
                    //         $query->where('targettype', '3')->orWhere('targettype', '2');
                    //     })
                    //     ->orWhere(function ($query) use ($userId) {
                    //         $query
                    //             ->where('notificationtargets.teammember_id', $userId)
                    //             ->where('notificationreadorunread.readedby', $userId);
                    //     })
                    //     ->select('notifications.*', 'notificationreadorunread.status as readstatus')
                    //     ->latest()
                    //     ->paginate(5);

                    $clientnotification = DB::table('notifications')
                        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
                        ->leftjoin('notificationtargets', 'notificationtargets.notification_id', 'notifications.id')
                        ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
                            $join
                                ->on('notificationreadorunread.notifications_id', 'notifications.id')
                                ->where('notificationreadorunread.readedby', $userId);
                        })
                        ->where(function ($query) use ($userId) {
                            $query
                                ->where('targettype', '3')
                                ->orWhere('targettype', '2')
                                ->orWhere(function ($innerQuery) use ($userId) {
                                    $innerQuery->where('notificationtargets.teammember_id', $userId);
                                });
                        })
                        ->select('notifications.*', 'notificationreadorunread.status as readstatus')
                        ->distinct()
                        ->orderBy('notifications.id', 'desc')
                        ->paginate(5);					
	
	
	

	
						
2222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\NotificationController.php

     public function index()
    {

        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 18) {
            $userId = auth()->user()->teammember_id;
            // $notificationDatas = DB::table('notifications')
            //     ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
            //         $join->on('notificationreadorunread.notifications_id', 'notifications.id')
            //             ->where('notificationreadorunread.readedby', $userId);
            //     })
            //     ->select('notifications.*', 'notificationreadorunread.status as readstatus')
            //     ->latest()
            //     ->distinct()
            //     ->paginate(20);


            $notificationDatas = DB::table('notifications')
                ->leftJoin('notificationreadorunread', function ($join) use ($userId) {
                    $join->on('notificationreadorunread.notifications_id', '=', 'notifications.id')
                        ->where('notificationreadorunread.readedby', $userId);
                })
                ->select(
                    'notifications.*',
                    'notificationreadorunread.status as readstatus'
                )
                ->whereIn('notifications.id', function ($subquery) {
                    // Subquery to get the latest ID for each duplicate_notifications value
                    $subquery->from('notifications')
                        ->selectRaw('MAX(id) as id')
                        ->groupBy('duplicate_notifications');
                })
                ->latest('notifications.created_at') // Sort by the latest created_at
                ->paginate(20);




            return view('backEnd.notification.index', compact('notificationDatas'));
        } elseif (auth()->user()->role_id == 13) {

            $userId = auth()->user()->teammember_id;

            // $notificationDatas = DB::table('notifications')
            //     ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
            //     ->leftjoin('notificationtargets', 'notificationtargets.notification_id', 'notifications.id')
            //     ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
            //         $join->on('notificationreadorunread.notifications_id', 'notifications.id')
            //             ->where('notificationreadorunread.readedby', $userId);
            //     })
            //     ->Where(function ($query) {
            //         $query->where('targettype', '3')->orWhere('targettype', '2');
            //     })
            //     ->orWhere(function ($query) use ($userId) {
            //         $query->where('notificationtargets.teammember_id', $userId)
            //             ->where('notificationreadorunread.readedby', $userId);
            //     })
            //     ->select('notifications.*', 'notificationreadorunread.status as readstatus')
            //     ->latest()
            //     ->distinct()
            //     ->get();

            $notificationDatas = DB::table('notifications')
                ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
                ->leftjoin('notificationtargets', 'notificationtargets.notification_id', 'notifications.id')
                ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
                    $join->on('notificationreadorunread.notifications_id', 'notifications.id')
                        ->where('notificationreadorunread.readedby', $userId);
                })
                ->where(function ($query) use ($userId) {
                    $query->where('targettype', '3')
                        ->orWhere('targettype', '2')
                        ->orWhere(function ($innerQuery) use ($userId) {
                            $innerQuery->where('notificationtargets.teammember_id', $userId);
                        });
                })
                ->select('notifications.*', 'notificationreadorunread.status as readstatus')
                ->distinct()
                ->orderBy('notifications.id', 'desc')
                ->get();
            return view('backEnd.notification.index', compact('notificationDatas'));
        } elseif (auth()->user()->role_id == 14) {
            $userId = auth()->user()->teammember_id;

            $notificationDatas = DB::table('notifications')
                ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
                ->leftjoin('notificationtargets', 'notificationtargets.notification_id', 'notifications.id')
                ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
                    $join->on('notificationreadorunread.notifications_id', 'notifications.id')
                        ->where('notificationreadorunread.readedby', $userId);
                })
                ->where(function ($query) use ($userId) {
                    $query->where('targettype', '4')
                        ->orWhere('targettype', '2')
                        ->orWhere(function ($innerQuery) use ($userId) {
                            $innerQuery->where('notificationtargets.teammember_id', $userId);
                        });
                })
                ->select('notifications.*', 'notificationreadorunread.status as readstatus')
                ->distinct()
                ->orderBy('notifications.id', 'desc')
                ->get();

            return view('backEnd.notification.index', compact('notificationDatas'));
        } elseif (auth()->user()->role_id == 15) {
            $userId = auth()->user()->teammember_id;

            $notificationDatas = DB::table('notifications')
                ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
                ->leftjoin('notificationtargets', 'notificationtargets.notification_id', 'notifications.id')
                ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
                    $join->on('notificationreadorunread.notifications_id', 'notifications.id')
                        ->where('notificationreadorunread.readedby', $userId);
                })
                ->where(function ($query) use ($userId) {
                    $query->where('targettype', '5')
                        ->orWhere('targettype', '2')
                        ->orWhere(function ($innerQuery) use ($userId) {
                            $innerQuery->where('notificationtargets.teammember_id', $userId);
                        });
                })
                ->select('notifications.*', 'notificationreadorunread.status as readstatus')
                ->distinct()
                ->orderBy('notifications.id', 'desc')
                ->get();

            return view('backEnd.notification.index', compact('notificationDatas'));
        } elseif (auth()->user()->role_id == 16) {
            $userId = auth()->user()->teammember_id;

            $notificationDatas = DB::table('notifications')
                ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
                ->leftjoin('notificationtargets', 'notificationtargets.notification_id', 'notifications.id')
                ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
                    $join->on('notificationreadorunread.notifications_id', 'notifications.id')
                        ->where('notificationreadorunread.readedby', $userId);
                })
                ->where(function ($query) use ($userId) {
                    $query->where('targettype', '6')
                        ->orWhere('targettype', '2')
                        ->orWhere(function ($innerQuery) use ($userId) {
                            $innerQuery->where('notificationtargets.teammember_id', $userId);
                        });
                })
                ->select('notifications.*', 'notificationreadorunread.status as readstatus')
                ->distinct()
                ->get();

            return view('backEnd.notification.index', compact('notificationDatas'));
        } elseif (auth()->user()->role_id == 17) {
            $userId = auth()->user()->teammember_id;

            $notificationDatas = DB::table('notifications')
                ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
                ->leftjoin('notificationtargets', 'notificationtargets.notification_id', 'notifications.id')
                ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
                    $join->on('notificationreadorunread.notifications_id', 'notifications.id')
                        ->where('notificationreadorunread.readedby', $userId);
                })
                ->where(function ($query) use ($userId) {
                    $query->where('targettype', '7')
                        ->orWhere('targettype', '2')
                        ->orWhere(function ($innerQuery) use ($userId) {
                            $innerQuery->where('notificationtargets.teammember_id', $userId);
                        });
                })
                ->select('notifications.*', 'notificationreadorunread.status as readstatus')
                ->distinct()
                ->get();

            return view('backEnd.notification.index', compact('notificationDatas'));
        } else {
            $userId = auth()->user()->teammember_id;

            $notificationDatas = DB::table('notifications')
                ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
                ->leftjoin('notificationtargets', 'notificationtargets.notification_id', 'notifications.id')
                ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
                    $join->on('notificationreadorunread.notifications_id', 'notifications.id')
                        ->where('notificationreadorunread.readedby', $userId);
                })
                ->where(function ($query) use ($userId) {
                    $query->where('notifications.targettype', '2')
                        ->orWhere('notificationtargets.teammember_id', $userId);
                })
                ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic', 'notificationreadorunread.status as readstatus')
                ->distinct()
                ->get();

            return view('backEnd.notification.index', compact('notificationDatas'));
        }
    }
				
	





	

		
2222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php
elseif (auth()->user()->role_id == 13) { 


 elseif (auth()->user()->role_id == 13) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      // $notificationDatas =  DB::table('notifications')
      //   ->join('teammembers', 'teammembers.id', 'notifications.created_by')
      //   ->Where('targettype', '3')
      //   ->orWhere('targettype', '2')
      //   ->select(
      //     'notifications.*',
      //     'teammembers.profilepic',
      //     'teammembers.team_member'
      //   )->orderBy('created_at', 'desc')->paginate('2');

      $notificationDatas = DB::table('notifications')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->leftjoin('notificationtargets', 'notificationtargets.notification_id', 'notifications.id')
        ->leftjoin('notificationreadorunread', function ($join) use ($authid) {
          $join->on('notificationreadorunread.notifications_id', 'notifications.id')
            ->where('notificationreadorunread.readedby', $authid);
        })
        ->where(function ($query) use ($authid) {
          $query->where('targettype', '3')
            ->orWhere('targettype', '2')
            ->orWhere(function ($innerQuery) use ($authid) {
              $innerQuery->where('notificationtargets.teammember_id', $authid);
            });
        })
        ->select('notifications.*', 'notificationreadorunread.status as readstatus')
        ->distinct()
        ->orderBy('notifications.id', 'desc')
        ->paginate('2');

      //  dd($notificationDatas);

      $notification = Notification::count();
      $client = Client::count();
      $tender = Tender::where('teammember_id', auth()->user()->teammember_id)->count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();

      $openleave = DB::table('applyleaves')
        ->where('approver', auth()->user()->teammember_id)
        ->where('status', 0)
        ->count();

      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();
      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->take(5)->get();

      $assignmentcount = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->count();

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->where(function ($query) {
          $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
            ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
        })
        ->count();

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare

      // total working days start using financial year
      $currentDate = Carbon::now();
      $currentMonth = $currentDate->format('F');
      if ($currentDate->month >= 4) {
        // Current year financial year
        $startDate = Carbon::create($currentDate->year, 4, 1);
        $endDate = Carbon::create($currentDate->year + 1, 3, 31);
      } else {
        // Previous year financial year
        $startDate = Carbon::create($currentDate->year - 1, 4, 1);
        $endDate = Carbon::create($currentDate->year, 3, 31);
      }

      // $totalworkingdays = DB::table('attendances')
      //   ->where('employee_name', auth()->user()->teammember_id)
      //   ->whereBetween('fulldate', [$startDate->format('Y-m-d'), $endDate->format('Y-m-d')])
      //   ->sum('no_of_days_present');
      $attendancerecordData = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('fulldate', [$startDate->format('Y-m-d'), $endDate->format('Y-m-d')])
        ->select(
          DB::raw('SUM(no_of_days_present) as total_working_days'),
          DB::raw('SUM(casual_leave) as total_casual_leave'),
          DB::raw('SUM(exam_leave) as total_exam_leave')
        )
        ->first();

      $totalworkingdays = $attendancerecordData->total_working_days;
      $totalCasualLeave = $attendancerecordData->total_casual_leave;
      $totalExamLeave = $attendancerecordData->total_exam_leave;
      $totalLeaveDays = $totalCasualLeave + $totalExamLeave;
      // total working days end hare 

      return view('backEnd.index', compact('opentimesheetrequests', 'openleave', 'tender', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount', 'totalworkingdays', 'currentMonth', 'totalLeaveDays'));
		









		
2222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php

elseif (auth()->user()->role_id == 14 || auth()->user()->role_id == 15)

 elseif (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
      //Aproved leave jan to dec 

      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 
      // dd(auth()->user()->teammember_id);
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      // $notificationDatas =   DB::table('notifications')
      //   ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
      //   ->where('notifications.targettype', '1')
      //   ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      $userId = auth()->user()->teammember_id;
      if (auth()->user()->role_id == 14) {
        $notificationDatas = DB::table('notifications')
          ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
          ->leftjoin('notificationtargets', 'notificationtargets.notification_id', 'notifications.id')
          ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
            $join->on('notificationreadorunread.notifications_id', 'notifications.id')
              ->where('notificationreadorunread.readedby', $userId);
          })
          ->where(function ($query) use ($userId) {
            $query->where('targettype', '4')
              ->orWhere('targettype', '2')
              ->orWhere(function ($innerQuery) use ($userId) {
                $innerQuery->where('notificationtargets.teammember_id', $userId);
              });
          })
          ->select('notifications.*', 'notificationreadorunread.status as readstatus')
          ->distinct()
          ->orderBy('notifications.id', 'desc')
          ->paginate(2);
      } else {
        $notificationDatas = DB::table('notifications')
          ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
          ->leftjoin('notificationtargets', 'notificationtargets.notification_id', 'notifications.id')
          ->leftjoin('notificationreadorunread', function ($join) use ($userId) {
            $join->on('notificationreadorunread.notifications_id', 'notifications.id')
              ->where('notificationreadorunread.readedby', $userId);
          })
          ->where(function ($query) use ($userId) {
            $query->where('targettype', '5')
              ->orWhere('targettype', '2')
              ->orWhere(function ($innerQuery) use ($userId) {
                $innerQuery->where('notificationtargets.teammember_id', $userId);
              });
          })
          ->select('notifications.*', 'notificationreadorunread.status as readstatus')
          // ->distinct()
          ->orderBy('notifications.id', 'desc')
          ->paginate(2);
      }

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();

      //  dd($notificationDatas);

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      // $assignmentcount = count($assignment);

      $assignmentcount = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->count();

      // total working days start using financial year
      $currentDate = Carbon::now();
      $currentMonth = $currentDate->format('F');
      if ($currentDate->month >= 4) {
        // Current year financial year
        $startDate = Carbon::create($currentDate->year, 4, 1);
        $endDate = Carbon::create($currentDate->year + 1, 3, 31);
      } else {
        // Previous year financial year
        $startDate = Carbon::create($currentDate->year - 1, 4, 1);
        $endDate = Carbon::create($currentDate->year, 3, 31);
      }

      // $totalworkingdays = DB::table('attendances')
      //   ->where('employee_name', auth()->user()->teammember_id)
      //   ->whereBetween('fulldate', [$startDate->format('Y-m-d'), $endDate->format('Y-m-d')])
      //   ->sum('no_of_days_present');

      // $totalcasualleave = DB::table('attendances')
      //   ->where('employee_name', auth()->user()->teammember_id)
      //   ->whereBetween('fulldate', [$startDate->format('Y-m-d'), $endDate->format('Y-m-d')])
      //   ->sum('casual_leave');

      // $totalexamleave = DB::table('attendances')
      //   ->where('employee_name', auth()->user()->teammember_id)
      //   ->whereBetween('fulldate', [$startDate->format('Y-m-d'), $endDate->format('Y-m-d')])
      //   ->sum('exam_leave');

      $attendancerecordData = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('fulldate', [$startDate->format('Y-m-d'), $endDate->format('Y-m-d')])
        ->select(
          DB::raw('SUM(no_of_days_present) as total_working_days'),
          DB::raw('SUM(casual_leave) as total_casual_leave'),
          DB::raw('SUM(exam_leave) as total_exam_leave')
        )
        ->first();

      $totalworkingdays = $attendancerecordData->total_working_days;
      $totalCasualLeave = $attendancerecordData->total_casual_leave;
      $totalExamLeave = $attendancerecordData->total_exam_leave;
      $totalLeaveDays = $totalCasualLeave + $totalExamLeave;
      // total working days end hare 
      // manager
      return view('backEnd.index', compact('notification', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount', 'totalworkingdays', 'currentMonth', 'totalLeaveDays'));

	  
	  
	  
	  
	  
	  
	 
	  


22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\notification\form.blade.php
replace all code 


<div class="row row-sm">
    <div class="col-6">
        <div class="form-group">
            <label class="font-weight-600">Subject *</label>
            <input type="text" required name="title" value="{{ $notification->title ?? '' }}" class="form-control"
                placeholder="Enter Subject">
        </div>
    </div>
    {{-- <div class="col-6">
        <div class="form-group">
            <label class="font-weight-600">Target.</label>
            <select class="form-control" id="exampleFormControlSelect1" name="targettype">
                <option>Please Select One</option>
                <option value="1">Individual</option>
                <option value="2">All Member</option>
                <option value="3">Partner</option>
                <option value="4">Manager</option>
                <option value="5">Staff</option>
                <option value="6">IT Department</option>
                <option value="7">Accountant</option>
            </select>
        </div>
    </div> --}}

    <div class="col-6">
        <div class="form-group">
            <label class="font-weight-600">Target *</label>

            <select required class="form-control basic-multiple" multiple="multiple" id="exampleFormControlSelect111"
                name="targettype[]">
                <option value="" disabled> Please Select One</option>
                <option value="1">Individual</option>
                <option value="2">All Member</option>
                <option value="3">Partner</option>
                <option value="4">Manager</option>
                <option value="5">Staff</option>
                <option value="6">IT Department</option>
                <option value="7">Accountant</option>
            </select>
        </div>
    </div>


</div>
<div class="row row-sm">
    <!-- <div class="col-6"  style='display:none;' id='designation'>
        <div class="form-group">
        <label class="font-weight-600">Employee </label>
            <select class="form-control " multiple="multiple" name="teammember_id[]">
                <option value="">Please Select One</option>
                @foreach ($teammember as $teammemberData)
<option value="{{ $teammemberData->id }}">
                    {{ $teammemberData->team_member }} ( {{ $teammemberData->emailid ?? '' }} ) </option>
@endforeach
    
            </select>
        </div>
    </div> -->
    <div class="col-6" style='display:none;' id='designation'>
        <div class="form-group">
            <label class="font-weight-600">Employee *</label>
            <select class="language form-control" multiple="" name="teammember_id[]" id="designationinput">
                @foreach ($teammember as $teammemberData)
                    <option value="{{ $teammemberData->id }}">
                        {{ $teammemberData->team_member }} ( {{ $teammemberData->emailid ?? '' }} )
                    </option>
                @endforeach
            </select>
        </div>
    </div>
    <div class="col-6">
        <div class="form-group">
            <label class="font-weight-600">File Upload</label>
            <input type="file" name="attachment" class="form-control" placeholder="Upload file">
            <span class="text-danger" style="font-weight: 300">File types: png, pdf, jpeg, jpg, xls, xlsx. Max
                size: 5
                MB</span>
        </div>
    </div>
</div>
<div class="row row-sm">
    <div class="col-12">
        <div class="form-group">
            <label class="font-weight-600">Announcement Content *</label>
            <textarea rows="4" name="mail_content" class="centered form-control" id="summernote"
                placeholder="Enter Description" id="editors" style="height:500px;"></textarea>
        </div>
    </div>
</div>

<br>
<div class="form-group">
    <button type="submit" class="btn btn-success" style="float:right">Send</button>
    <a class="btn btn-secondary" href="{{ url('notification') }}">
        Back</a>

</div>
<script src="{{ url('backEnd/ckeditor/ckeditor.js') }}"></script>
<script>
    ClassicEditor
        .create(document.querySelector('#editor'), {
            // toolbar: [ 'heading', '|', 'bold', 'italic', 'link' ]
        })
        .then(editor => {
            window.editor = editor;
        })
        .catch(err => {
            console.error(err.stack);
        });
</script>
<script type="text/javascript" src="http://www.datejs.com/build/date.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        // Add required validation
        $('form').on('submit', function(e) {
            // Check if Summernote content is empty
            var summernoteContent = $('#summernote').summernote('isEmpty');
            if (summernoteContent) {
                alert('Announcement Content is required.');
                e.preventDefault(); // Prevent form submission
                return false;
            }
        });
    });
</script>

<script>
    $(document).ready(function() {
        $('#exampleFormControlSelect111').on('change', function() {
            if (this.value == '1') {
                $("#designation").show();
                document.getElementById("designationinput").required = true;
            } else {
                $("#designation").hide();
                document.getElementById("designationinput").required = false;
            }
        });
    });
</script>









22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
notificationcontroller 

    public function store(Request $request)
    {

        $request->validate([
            'attachment' => 'nullable|mimes:png,pdf,jpeg,jpg,xls,xlsx|max:4120',
        ], [
            'attachment.max' => 'The file may not be greater than 5 MB.',
        ]);

        // $request->validate([
        //     'attachment' => 'nullable|mimes:png,pdf,jpeg,jpg,xls,xlsx|max:5120',
        // ], [
        //     'attachment.max' => 'The file may not be greater than 5 MB.',
        //     'attachment.mimes' => 'The file must be a type of: png, pdf, jpeg, jpg, xls, xlsx.',
        // ]);


        try {
            $authid = auth()->user()->teammember_id;
            $data = $request->except(['_token']);
            // Initialize the attachment path
            $attachmentPath = '';
            if ($request->hasFile('attachment')) {
                $file = $request->file('attachment');
                $name = $file->getClientOriginalName();
                $attachmentPath = storage_path('app/public/image/task/' . $name);
                $file->storeAs('public/image/task', $name);
            } else {
                $name = '';
            }

            // foreach ($request->targettype as $targetType) {
            //     dd($targetType);
            //     $notification_id =    DB::table('notifications')->insertGetId([
            //         'title'         => $request->title,
            //         'created_by'  => $authid,
            //         'targettype'         => $targetType,
            //         'mail_content'         => $request->mail_content,
            //         'attachment'    => $name,
            //         'created_at'                =>       date('Y-m-d H:i:s'),
            //         'updated_at'              =>    date('Y-m-d H:i:s'),
            //     ]);
            // }
            // if ($request->targettype[0] == 1) {
            //     foreach ($request->teammember_id as $teammember_id) {
            //         DB::table('notificationtargets')->insert([
            //             'notification_id'       =>     $notification_id,
            //             'teammember_id'     =>     $teammember_id,
            //             'created_at'                =>       date('y-m-d'),
            //             'updated_at'              =>    date('y-m-d'),
            //         ]);
            //     }
            // }



            $duplicatecodemax = DB::table('notifications')->max('duplicate_notifications');
            $maxincreament = $duplicatecodemax ? $duplicatecodemax + 1 : 2001;

            foreach ($request->targettype as $targetType) {
                $notification_id = DB::table('notifications')->insertGetId([
                    'title'         => $request->title,
                    'created_by'    => $authid,
                    'targettype'    => $targetType,
                    'mail_content'  => $request->mail_content,
                    'attachment'    => $name,
                    'duplicate_notifications'    => $maxincreament,
                    'created_at'    => date('Y-m-d H:i:s'),
                    'updated_at'    => date('Y-m-d H:i:s'),
                ]);

                // Check if the targettype is 1 and insert team member IDs
                if ($targetType == 1 && isset($request->teammember_id)) {
                    foreach ($request->teammember_id as $teammember_id) {
                        DB::table('notificationtargets')->insert([
                            'notification_id' => $notification_id,
                            'teammember_id'   => $teammember_id,
                            'created_at'      => date('Y-m-d'),
                            'updated_at'      => date('Y-m-d'),
                        ]);
                    }
                }
            }

            // 1 exist or not in array of $request->targettype
            if (in_array(1, $request->targettype)) {
                $teammembers = Teammember::wherein('id', $request->teammember_id)->pluck('emailid')->toArray();

                // dd($teammembers);
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'attachment' =>  $request->attachment,
                        'emailid' =>  $teammember,
                    );

                    //   $data['mail']=$teammember;

                    // Mail::send('emails.notificationmail', $data, function ($msg) use ($data) {
                    //     $msg->to($data['emailid']);
                    //     $msg->subject($data['title']);
                    // });

                    Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name) {
                        $msg->to($data['emailid']);
                        $msg->subject($data['title']);

                        // Attach the file to the email
                        if ($attachmentPath != '') {
                            $msg->attach($attachmentPath, [
                                'as' => $name,
                                'mime' => 'image/jpeg',
                            ]);
                        }
                    });
                }
            }
            if (in_array(2, $request->targettype)) {

                $teammembers = Teammember::where('status', 1)->pluck('emailid')->toArray();
                //    dd($teammembers);
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );

                    //  $data['mail']=$teammembers;

                    Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name) {
                        $msg->to($data['emailid']);
                        $msg->subject($data['title']);

                        // Attach the file to the email
                        if ($attachmentPath != '') {
                            $msg->attach($attachmentPath, [
                                'as' => $name,
                                'mime' => 'image/jpeg',
                            ]);
                        }
                    });
                }
            }
            if (in_array(3, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 13)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );


                    Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name) {
                        $msg->to($data['emailid']);
                        $msg->subject($data['title']);

                        // Attach the file to the email
                        if ($attachmentPath != '') {
                            $msg->attach($attachmentPath, [
                                'as' => $name,
                                'mime' => 'image/jpeg',
                            ]);
                        }
                    });
                }
            }
            if (in_array(4, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 14)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );

                    Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name) {
                        $msg->to($data['emailid']);
                        $msg->subject($data['title']);

                        // Attach the file to the email
                        if ($attachmentPath != '') {
                            $msg->attach($attachmentPath, [
                                'as' => $name,
                                'mime' => 'image/jpeg',
                            ]);
                        }
                    });
                }
            }
            if (in_array(5, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 15)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );

                    Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name) {
                        $msg->to($data['emailid']);
                        $msg->subject($data['title']);

                        // Attach the file to the email
                        if ($attachmentPath != '') {
                            $msg->attach($attachmentPath, [
                                'as' => $name,
                                'mime' => 'image/jpeg',
                            ]);
                        }
                    });
                }
            }
            if (in_array(6, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 16)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,
                    );
                    Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name) {
                        $msg->to($data['emailid']);
                        $msg->subject($data['title']);

                        // Attach the file to the email
                        if ($attachmentPath != '') {
                            $msg->attach($attachmentPath, [
                                'as' => $name,
                                'mime' => 'image/jpeg',
                            ]);
                        }
                    });
                }
            }
            if (in_array(7, $request->targettype)) {
                $teammembers = Teammember::where('role_id', 17)->where('status', 1)->pluck('emailid')->toArray();
                foreach ($teammembers as $teammember) {
                    $data = array(
                        'title' =>  $request->title,
                        'mail_content' =>  $request->mail_content,
                        'emailid' =>  $teammember,

                    );


                    Mail::send('emails.notificationmail', $data, function ($msg) use ($data, $attachmentPath, $name) {
                        $msg->to($data['emailid']);
                        $msg->subject($data['title']);

                        // Attach the file to the email
                        if ($attachmentPath != '') {
                            $msg->attach($attachmentPath, [
                                'as' => $name,
                                'mime' => 'image/jpeg',
                            ]);
                        }
                    });
                }
            }

            $output = array('msg' => 'Sent Successfully');
            return back()->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }










22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php

                                 @if (Auth::user()->role_id == 11)
                                      <li><a href="{{ url('totaltimeshow') }}">Assignment Time Report</a></li>
                                      <li><a href="{{ url('permotionrejoiningreport') }}">Permotion/Rejoining
                                              Report</a></li>
                                      <li><a href="{{ url('assignmentviewer') }}">Assignment Viewer Report </a>
                                      </li>
                                  @endif
                                  @if (Auth::user()->role_id == 11 || Auth::user()->role_id == 13)
                                      {{-- <li><a href="{{ url('assignmentviewer') }}">Assignment Viewer Report </a>
                                      </li> --}}
                                      <li><a href="{{ url('attendance') }}">Attendance</a></li>
                                  @endif
	

	
								  
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\viewassignment.blade.php


                <div class="row">
                    <div class="col-md-12">
                        <div class="card" style="box-shadow:0 4px 8px 0 rgba(0, 0, 0, 0.2);height:250px;">

                            <div class="card-body">
                                <div class="card-head">
                                    <b>Assignment Viewer:</b>
                                    {{-- @if (auth()->user()->role_id != 15)
                                        <b><a data-toggle="modal" data-target="#exampleModal14"
                                                class="btn btn-info-soft btn-sm">
                                                <i class="fa fa-plus"></i>
                                            </a>
                                        </b>
                                    @endif --}}
                                </div>

                                <hr>
                                <div class="table-responsive example">
                                    <table class="table display table-bordered table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th class="textfixed">Staff Code</th>
                                                {{-- <th>Role</th> --}}
                                                <th>Mobile No</th>
                                                <th>Patner</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @php
                                                $hasData = false;
                                            @endphp
                                            @foreach ($teammemberDatas as $teammemberData)
                                                @if ($teammemberData->viewerteam == 1)
                                                    @php
                                                        $hasData = true;
                                                    @endphp
                                                    <tr>
                                                        <td class="textfixed">{{ $teammemberData->title }}
                                                            {{ $teammemberData->team_member }}</td>
                                                        <td>{{ $teammemberData->staffcode }}</td>
                                                        {{-- <td class="textfixed">
                                                            @if ($teammemberData->type == 0)
                                                                <span>Team Leader</span>
                                                            @else
                                                                <span>Staff</span>
                                                            @endif
                                                        </td> --}}
                                                        <td class="textfixed">
                                                            <a
                                                                href="tel:={{ $teammemberData->mobile_no }}">{{ $teammemberData->mobile_no }}</a>
                                                        </td>
                                                        <td class="textfixed">
                                                            {{ App\Models\Teammember::select('team_member')->where('id', $teammemberData->leadpartner)->first()->team_member ?? '' }}
                                                        </td>
                                                    </tr>
                                                @endif
                                            @endforeach
                                            @if (!$hasData)
                                                <tr>
                                                    <td colspan="7" style="text-align: center;">Data not available
                                                    </td>
                                                </tr>
                                            @endif
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <br>
                <br>






22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
duplicate_notifications  int 20, default 0 column in notifications table 


222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\notification\index.blade.php

            <div class="card-body">
                <div class="table-responsive">
                    @php
                        $allTargets = DB::table('notifications')
                            ->whereIn('duplicate_notifications', $notificationDatas->pluck('duplicate_notifications'))
                            ->select('duplicate_notifications', 'targettype')
                            ->get()
                            ->groupBy('duplicate_notifications');
                        // dd($allTargets);
                    @endphp
                    <table id="examplee" class="display nowrap">
                        <thead>
                            <tr>
                                <th style="display: none;">ID</th>
                                <th>Title</th>
                                <th>Date</th>
                                @if (Auth::user()->role_id == 18 || Auth::user()->role_id == 11)
                                    <th>Target</th>
                                @endif
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($notificationDatas as $notificationData)
                                <tr>
                                    <td style="display: none;">{{ $notificationData->id }}</td>
                                    <td>
                                        <a href="{{ url('/notification/' . $notificationData->id) }}"
                                            style="color: {{ $notificationData->readstatus == 1 ? 'Black' : 'red' }};">
                                            {{ $notificationData->title }}
                                        </a>
                                    </td>
                                    <td>
                                        <span style="display: none;">
                                            {{ date('Y-m-d', strtotime($notificationData->created_at)) }}
                                        </span>
                                        {{ date('d-m-Y', strtotime($notificationData->created_at)) }}
                                    </td>
                                    @if (Auth::user()->role_id == 18 || Auth::user()->role_id == 11)
                                        <td>
                                            @php
                                                $targetTypes = $allTargets[$notificationData->duplicate_notifications]
                                                    ->pluck('targettype')
                                                    ->unique();
                                            @endphp
                                            @foreach ($targetTypes as $key => $targettype)
                                                @switch($targettype)
                                                    @case(1)
                                                        <span>Individual</span>
                                                    @break

                                                    @case(2)
                                                        <span>All Member</span>
                                                    @break

                                                    @case(3)
                                                        <span>Partner</span>
                                                    @break

                                                    @case(4)
                                                        <span>Manager</span>
                                                    @break

                                                    @case(5)
                                                        <span>Staff</span>
                                                    @break

                                                    @case(6)
                                                        <span>IT Department</span>
                                                    @break

                                                    @case(7)
                                                        <span>Accountant</span>
                                                    @break

                                                    @default
                                                        <span>NA</span>
                                                @endswitch
                                                @if ($key < count($targetTypes) - 1)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                    @endif
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            </div>
			
			

222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php
in index fun 

if (auth()->user()->role_id == 11 || auth()->user()->role_id == 12) {

  $notificationDatas =  DB::table('notifications')
        ->join('teammembers', 'teammembers.id', 'notifications.created_by')
        ->select(
          'notifications.*',
          'teammembers.profilepic',
          'teammembers.team_member'
        )
        ->whereIn('notifications.id', function ($subquery) {
          // Subquery to get the latest ID for each duplicate value
          $subquery->from('notifications')
            ->selectRaw('MAX(id) as id')
            ->groupBy('duplicate_notifications');
        })
        ->orderBy('created_at', 'desc')
        ->paginate('2');
		
		


222222222222222222222222222222222222222222222222222222222222222222222222222
notification ```end

joining date modification ```start
222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AttendanceController.php

    public function adminattendancereport(Request $request)
    {
        $teamnid = $request->input('teammemberId');
        $startdate = Carbon::parse($request->input('startdate'));
        $enddate = Carbon::parse($request->input('enddate'));

        // Convert start and end dates to their respective month numbers like Month number (1-12)
        $startMonth = $startdate->format('n');
        $startYear = $startdate->format('Y');

        $endMonth = $enddate->format('n');
        $endYear = $enddate->format('Y');

        // Retrieve all team members
        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
            $teammembers = DB::table('teammembers')
                ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                ->whereIn('teammembers.role_id', [14, 15, 13, 11])
                ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
                ->orderBy('team_member', 'ASC')
                ->get();
        } else {
            $teammembers = DB::table('teammembers')
                ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                ->where('teammembers.id', auth()->user()->teammember_id)
                ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
                ->orderBy('team_member', 'ASC')
                ->get();
        }

        // Fetch single user data
        $singleusersearched = DB::table('teammembers')
            ->where('id', $teamnid)
            ->select('team_member', 'staffcode', 'id', 'leavingdate', 'joining_date')
            ->first();

        // Check leaving date validation
        if ($singleusersearched && $singleusersearched->leavingdate) {
            $leavingdate = Carbon::parse($singleusersearched->leavingdate);
            if ($startdate->gt($leavingdate)) {
                $output = ['msg' => 'User left on ' . $leavingdate->format('d-m-Y') . ', cannot select beyond this date.'];
                $request->flash();
                return redirect()->to('attendance')->with('statuss', $output);
            }
        }

        // Check joining date validation
        if ($singleusersearched && $singleusersearched->joining_date) {
            $joiningdate = Carbon::parse($singleusersearched->joining_date);
            if ($joiningdate->gt($enddate)) {
                $output = ['msg' => 'User joined on ' . $joiningdate->format('d-m-Y') . ', cannot select before this date.'];
                $request->flash();
                return redirect()->to('attendance')->with('statuss', $output);
            }
        }

        // Build attendance query filtered by month
        // $query = DB::table('attendances')
        //     ->leftJoin('teammembers', 'teammembers.id', 'attendances.employee_name')
        //     ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        //     ->leftJoin('roles', 'roles.id', 'teammembers.role_id')
        //     // ->whereNotNull('attendances.id')
        //     ->select(
        //         'attendances.*',
        //         'teammembers.team_member',
        //         'teammembers.staffcode',
        //         'teamrolehistory.newstaff_code',
        //         'teammembers.employment_status',
        //         'roles.rolename',
        //         'teammembers.joining_date'
        //     );

        // Build attendance query filtered by month
        $query = DB::table('attendances')
            ->join('teammembers', 'teammembers.id', '=', 'attendances.employee_name')
            ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
            ->leftJoin('roles', 'roles.id', '=', 'teammembers.role_id')
            ->select([
                'attendances.*',
                'teammembers.team_member',
                'teammembers.staffcode',
                'teammembers.employment_status',
                'roles.rolename',
                'teamrolehistory.newstaff_code',
                'teammembers.staffcode',
                // Combine rejoining dates
                // DB::raw('COALESCE(teamrolehistory.newstaff_code, teammembers.staffcode) AS final_staff_code'),
                // Combine rejoining dates
                DB::raw('COALESCE(teamrolehistory.rejoiningdate, rejoiningsamepost.rejoiningdate,teamrolehistory.promotion_date) AS final_rejoining_date'),
                // 'teamrolehistory.promotion_date',
                'teammembers.joining_date'
            ]);

        if ($teamnid) {
            $query->where('attendances.employee_name', $teamnid);
        }

        // // Filter where the attendance month falls between the start and end month
        // if ($startMonth && $endMonth) {
        //     $query->whereBetween(DB::raw('MONTH(STR_TO_DATE(CONCAT(attendances.month, " 1, 2000"), "%M %d, %Y"))'), [$startMonth, $endMonth]);
        // }

        // Filter attendance records by month and year
        if ($startMonth && $endMonth && $startYear && $endYear) {
            $query->whereBetween(DB::raw('MONTH(STR_TO_DATE(CONCAT(attendances.month, " 1, 2000"), "%M %d, %Y"))'), [$startMonth, $endMonth])
                ->whereBetween('attendances.year', [$startYear, $endYear]);
        }

        // ordering using month name like Dec,Nov,Oct etc
        $query->orderBy('attendances.year', 'desc')
            ->orderBy(DB::raw('MONTH(STR_TO_DATE(CONCAT(attendances.month, " 1, 2000"), "%M %d, %Y"))'), 'desc');

        $attendanceDatas = $query->get();
        $request->flash();
        // dd($attendanceDatas);

        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
            return view('backEnd.attendance.adminattendance', compact('attendanceDatas', 'teammembers'));
        } else {
            return view('backEnd.attendance.teamattendance', compact('attendanceDatas', 'teammembers'));
        }
    }

222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\adminattendance.blade.php


                            @foreach ($attendanceDatas as $attendanceData)
                                <tr>
                                    @php
                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $attendanceData->employee_name)
                                            ->first();

                                        $datadate = $attendanceData->fulldate
                                            ? Carbon\Carbon::createFromFormat('Y-m-d', $attendanceData->fulldate)
                                            : null;

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp
                                    <td style="display: none;">{{ $attendanceData->id }}</td>
                                    <td>{{ $attendanceData->team_member }}</td>
                                    {{-- <td class="text-center">
                                        {{ $attendanceData->newstaff_code ?? ($attendanceData->staffcode ?? '') }}</td> --}}
                                    {{-- <td class="text-center">{{ $attendanceData->final_staff_code }}</td> --}}
                                    @if ($permotiondate && $datadate && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $attendanceData->staffcode }}</td>
                                    @endif
                                    <td>{{ $attendanceData->rolename }}</td>
                                    {{-- <td> {{ $attendanceData->joining_date ? date('d-m-Y', strtotime($attendanceData->joining_date)) : 'NA' }}
                                    </td> --}}
                                    <td> {{ $attendanceData->final_rejoining_date ? date('d-m-Y', strtotime($attendanceData->final_rejoining_date)) : date('d-m-Y', strtotime($attendanceData->joining_date)) }}
                                    </td>
                                    <td> {{ $attendanceData->month }}</td>
                                    <td> {{ $attendanceData->year }}</td>
                                    <td> {{ $attendanceData->one ?? '…....' }}</td>
                                    <td> {{ $attendanceData->two ?? '…....' }}</td>
                                    <td> {{ $attendanceData->three ?? '…....' }}</td>
                                    <td> {{ $attendanceData->four ?? '…....' }}</td>
                                    <td> {{ $attendanceData->five ?? '…....' }}</td>
                                    <td> {{ $attendanceData->six ?? '…....' }}</td>
                                    <td> {{ $attendanceData->seven ?? '…....' }}</td>
                                    <td> {{ $attendanceData->eight ?? '…....' }}</td>
                                    <td> {{ $attendanceData->nine ?? '…....' }}</td>
                                    <td> {{ $attendanceData->ten ?? '…....' }}</td>
                                    <td> {{ $attendanceData->eleven ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twelve ?? '…....' }}</td>
                                    <td> {{ $attendanceData->thirteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->fourteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->fifteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->sixteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->seventeen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->eighteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->ninghteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twenty ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyone ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentytwo ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentythree ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyfour ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyfive ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentysix ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyseven ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyeight ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentynine ?? '…....' }}</td>
                                    <td> {{ $attendanceData->thirty ?? '…....' }}</td>
                                    <td> {{ $attendanceData->thirtyone ?? '…....' }}</td>

                                    <td class="text-center"> {{ $attendanceData->total_no_of_days ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->no_of_days_present ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->casual_leave ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->exam_leave ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->travel ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->offholidays ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->sundaycount ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->holidays ?? '0' }}</td>
                                </tr>
                            @endforeach



222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\attendance\teamattendance.blade.php

                            @foreach ($attendanceDatas as $attendanceData)
                                <tr>
                                    @php
                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $attendanceData->employee_name)
                                            ->first();

                                        $datadate = $attendanceData->fulldate
                                            ? Carbon\Carbon::createFromFormat('Y-m-d', $attendanceData->fulldate)
                                            : null;

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp
                                    <td style="display: none;">{{ $attendanceData->id }}</td>
                                    <td>{{ $attendanceData->team_member }}</td>
                                    {{-- <td class="text-center">
                                        {{ $attendanceData->newstaff_code ?? ($attendanceData->staffcode ?? '') }}</td> --}}
                                    {{-- <td class="text-center">{{ $attendanceData->final_staff_code }}</td> --}}
                                    @if ($permotiondate && $datadate && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $attendanceData->staffcode }}</td>
                                    @endif
                                    <td>{{ $attendanceData->rolename }}</td>
                                    {{-- <td> {{ $attendanceData->joining_date ? date('d-m-Y', strtotime($attendanceData->joining_date)) : 'NA' }}
                                    </td> --}}
                                    <td> {{ $attendanceData->final_rejoining_date ? date('d-m-Y', strtotime($attendanceData->final_rejoining_date)) : date('d-m-Y', strtotime($attendanceData->joining_date)) }}
                                    </td>
                                    <td> {{ $attendanceData->month }}</td>
                                    <td> {{ $attendanceData->year }}</td>
                                    <td> {{ $attendanceData->one ?? '…....' }}</td>
                                    <td> {{ $attendanceData->two ?? '…....' }}</td>
                                    <td> {{ $attendanceData->three ?? '…....' }}</td>
                                    <td> {{ $attendanceData->four ?? '…....' }}</td>
                                    <td> {{ $attendanceData->five ?? '…....' }}</td>
                                    <td> {{ $attendanceData->six ?? '…....' }}</td>
                                    <td> {{ $attendanceData->seven ?? '…....' }}</td>
                                    <td> {{ $attendanceData->eight ?? '…....' }}</td>
                                    <td> {{ $attendanceData->nine ?? '…....' }}</td>
                                    <td> {{ $attendanceData->ten ?? '…....' }}</td>
                                    <td> {{ $attendanceData->eleven ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twelve ?? '…....' }}</td>
                                    <td> {{ $attendanceData->thirteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->fourteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->fifteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->sixteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->seventeen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->eighteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->ninghteen ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twenty ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyone ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentytwo ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentythree ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyfour ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyfive ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentysix ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyseven ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentyeight ?? '…....' }}</td>
                                    <td> {{ $attendanceData->twentynine ?? '…....' }}</td>
                                    <td> {{ $attendanceData->thirty ?? '…....' }}</td>
                                    <td> {{ $attendanceData->thirtyone ?? '…....' }}</td>

                                    <td class="text-center"> {{ $attendanceData->total_no_of_days ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->no_of_days_present ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->casual_leave ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->exam_leave ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->travel ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->offholidays ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->sundaycount ?? '0' }}</td>
                                    <td class="text-center"> {{ $attendanceData->holidays ?? '0' }}</td>
                                </tr>
                            @endforeach


Ensure assignments do not appear for users after being marked inactive on that assignment (bug). ```start
222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php

} elseif (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
$assignment =  DB::table('assignmentmappings')  remove it 


$assignmentdata =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->get();

      $assignment = $assignmentdata->slice(0, 5);
      $assignmentcount = count($assignmentdata);


222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ReportController.php

   } else {
   
   
 $assignmentmappingData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentbudgetings.status', '1')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        ->where('assignmentteammappings.status', 1)
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();


      $assignmentmappingcloseData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        ->where('assignmentteammappings.status', 1)
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();



222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php

} elseif (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {


 $assignmentmappingData =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                // ->where('clients.status', 0)
                ->whereNotIn('clients.id', [33, 32, 34, 29])
                ->where('assignmentbudgetings.status', 1)
                // hide inactive client
                ->where('assignmentteammappings.status', 1)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->get();





222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php
   } elseif (auth()->user()->role_id == 14) {
   



         $clientDatas =      DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->select('clients.*')
                ->where('clients.status', 1)
                ->where('assignmentteammappings.status', 1)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->get();
            // dd($clientDatas);


222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php
    $clientassignment =  DB::table('assignmentmappings')

   } else {
   
   

  // dd(auth()->user()->teammember_id);
            $clientassignment =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('assignmentbudgetings.client_id', $id)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                ->where('assignmentteammappings.status', 1)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignmentbudgetings.status',
                    'assignments.assignment_name',
                    'clients.client_code',
                    'clients.client_name'
                )->distinct()->get();

            // dd($clientassignment);


2222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php
index function 
  } elseif (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {


    $assignmentmappingData =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                // ->where('clients.status', 0)
                ->whereNotIn('clients.id', [33, 32, 34, 29])
                ->where('assignmentbudgetings.status', 1)
                // hide inactive client
                ->where('assignmentteammappings.status', 1)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->get();


222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php
function yearWise(Request $request)

 } else {


  $assignmentmappingData =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                // status 1 is active  so that i can active or inactive assignment
                ->where('assignmentteammappings.status', 1)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                )->distinct()->get();


end hare 
222222222222222222222222222222222222222222222222222222222222222222222222222



222222222222222222222222222222222222222222222222222222222222222222222222222



222222222222222222222222222222222222222222222222222222222222222222222222222

222222222222222222222222222222222222222222222222222222222222222222222222222



222222222222222222222222222222222222222222222222222222222222222222222222222



222222222222222222222222222222222222222222222222222222222222222222222222222



2222222222222222222222222222222222222222222222222222222222222222222222222222

222222222222222222222222222222222222222222222222222222222222222222222222222



222222222222222222222222222222222222222222222222222222222222222222222222222











